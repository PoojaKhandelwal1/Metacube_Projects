<!-- 
 * ReferenceEdge
 * 
 * Point of Reference, Inc. - Copyright 2014 All rights reserved.
 *
 * @company : Point of Reference, Inc.
 * @website : www.point-of-reference.com
 *
 * Disclaimer: THIS SOFTWARE IS PROVIDED "AS-IS" BY POINT OF REFERENCE ("POR"), 
 * WITH NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE SOFTWARE, 
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. 
 * POR SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, 
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES. POR IS NOT LIABLE FOR, 
 * AND MAKES NO REPRESENTATIONS OR WARRANTIES REGARDING, THE ACTIONS OR OMISSIONS OF 
 * ANY THIRD PARTIES (OR THE PRODUCTS OR SERVICES OFFERED BY ANY THIRD PARTIES) INCLUDING, 
 * WITHOUT LIMIATION, SALESFORCE.COM. COPY, USE OR DISTRIBUTION PROHIBITED WITHOUT EXPRESS 
 * WRITTEN CONSENT FROM COMPANY. 
 -->
<apex:component controller="RefSearchBlockController">
    <html xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink">    
        <head>
            
            <style>
                .slds .slds-truncate{
                    white-space: normal !important;
                }
                .custom-ellipsis-class {
                    max-width: 200px;
                    display: block;
                    word-wrap: break-word;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                }
                .disabledAnchorTag {
                    color: #D0D0D0 !important;
                    cursor: default;
                    pointer-events: none;
                    text-decoration: none;
                }
                
                .account-about-panel {
                    position: absolute !important;
                    min-width: 350px;
                    left: 0;
                    top: 0px;
                }
                .account-about-panel .slds-text-heading--medium {
                    overflow: hidden !important;
                    white-space: nowrap !important;
                    text-overflow: ellipsis !important;
                    height: 30px;
                    display: block;
                    font-size: 17px;
                    max-width: 94%;
                }

                .account-Tags-panel {
                    position: absolute !important;
                    min-width: 350px;
                    left: 0;
                    top: 0px;
                }
                .account-Tags-panel .slds-text-heading--medium {
                    overflow: hidden !important;
                    white-space: nowrap !important;
                    text-overflow: ellipsis !important;
                    height: 30px;
                    display: block;
                    font-size: 17px;
                    max-width: 94%;
                }
                .tagReferencibilityAcc, .tagAttributeAcc { 
                    width: 310px;
                    max-height: 70px;
                    word-wrap: break-word;
                    overflow: auto !important;
                   
                }
                .popoverAccBackdrop {
                    position: fixed;
                    left: 0;
                    right: 0;
                    top: 0;
                    bottom: 0;
                    z-index: 999;
                }
                .leftPaddingCustom {
                    padding-left: 24px;
                }
                .hitIcon {
                    background-color: #00396b;
                    color: white;
                    font-size: 1.3rem;
                    font-weight: bold;
                    display: block;
                    height: 2rem;
                    border-radius: 1rem;
                    text-align: center;
                    margin-left: 1.5rem;
                }
                .minDivHeight {
                    min-height : 330px !important;                    
                }
                .addOverflow {
                    padding-bottom : 75px !important;
                }
                .popoverContentBackdrop {
                    position: fixed;
                    left: 0;
                    right: 0;
                    top: 0;
                    bottom: 0;
                    z-index: 999;
                }
                .content-type-panel {
                    position: absolute !important;
                    min-width: 350px;
                    min-height:150px;
                    left: 0;
                    top: 0px;
                }
                .content-type-panel .slds-text-body--regular {
                    height: 150px;
                }
                .content-type-panel .slds-text-heading--medium {
                    overflow: hidden !important;
                    white-space: nowrap !important;
                    text-overflow: ellipsis !important;
                    height: 30px;
                    display: block;
                }
                
                /* Start: Columns sequencing and alignment issues fixed */
                #accountTable thead th.selection-checkbox {
					width: 90px;
				}
				#accountTable thead th.acc-ref-content {
					width: 200px;
				}
				
				#accountTable thead th.col-notice {
					width: 130px;
				}
				
				#accountTable thead th.col-about {
					width: 135px;
				}
				#accountTable thead th.col-tag {
					width: 135px;
				}
                #accountTable thead th.col-owner {
					width: 200px;
				}
				#accountTable thead th.col-assigned-count {
					width: 137px;
				}
				#accountTable thead th.col-hitlist-count {
					width: 115px;
				}
				/* End: Columns sequencing and alignment issues fixed */
            </style>
            <script>
                var accTotlCount = 0;
                var viewedAccTotalCount = 0;
                
                //var AccountBlock = angular.module("AccountBlock", []);
                var accountmappingSelected = false;
                var AccountBlockCon = refSearch.controller('AccountBlockController', function($scope, productService, $q) {
                    $scope.isViewDetailsUpdateable = {!isViewDetailsUpdateable};
                    $scope.activeRBIlist = [];
                    $scope.filterAttributeMap = {};
                    $scope.selectedRef = [];
                    $scope.filterNos = {};
                    $scope.filterOperationMap = {};
                    $scope.alreadyDisplayedAccounts = [];
                    $scope.hgt = window.innerHeight;
                    $scope.pageIndex = 1;
                    $scope.pageSize = 5;
                    $scope.totalAccounts = 0;
                    $scope.showMoreAccount = false;
                    $scope.accountIds = [];
                    $scope.allActiveAccountIds = [];
                    $scope.accounts = [];
                    $scope.searchResult = [];
                    $scope.filterResult = [];
                    $scope.Account = 'Account__c';
                    $scope.Reference_Owner = 'Reference_Owner__c';
                    $scope.Referenceability = 'Referenceability__c';
                    $scope.Attributes = 'Attributes__c';
                    $scope.Default_Period_Completed_Uses = 'Default_Period_Completed_Uses__c';
                    $scope.Account_Level_RUL = 'Account_Level_RUL__c';
                    $scope.RUL_Limit_Reached = 'RUL_Limit_Reached__c';
                    $scope.Is_Contact_Limit_Reached = 'Is_Contact_Limit_Reached__c';
                    $scope.Referenceability_no = 'Referenceability_no__c';
                    $scope.Attribute_Ids = 'Attribute_Ids__c';
                    $scope.Referenceability_Status = 'Referenceability_Status__c';
                    $scope.nameSpace = '{!JSENCODE(nameSpace)}';
                    $scope.searchText = '';
                    $scope.orderByField = 'AccountName';
                    $scope.reverseSort = false;
                    $scope.isFilterAppiled = false;
                    $scope.isAnyFilterAppiled = false;
                    $scope.isMoreAccountsAvailable = false;
                    $scope.allRefContentsSelected = false;
                    $scope.accRefContentList = [];
                    $scope.selectedAccIds = [];
                    $scope.selectedAccIdsParam = [];
                    $scope.selectedRefContentIds = [];
                    $scope.refContentsForDownload = [];
                    $scope.columnsList = [];
                    $scope.showRefContentModal = false;
                    $scope.tempValshowRefContentModal = false;
                    $scope.showLimitReachedMsg = false;
                    $scope.showMaxAccountRequestsMsg = false;
                    $scope.showMinAccountMsg = false;
                    $scope.showCWSAModal = false;   //flag to show/hide modal for continue without selecting accounts.
                    $scope.maxAccountRequests = {!maxAccountRequests};
                    $scope.maxAccountRequestsMsg = '{!$Label.Maximum_Account_No_Message_Part1}';
                    $scope.fetchingData = false;
                    $scope.showLinkMsg = false;
                    $scope.showSelectContentMsg = false;
                    $scope.showStageErrorMessage1 = false;
                    $scope.stageErrorMessage1 = '';
                    $scope.allowRequestFromLead = {!allowRequestFromLead};
                    //  REF - 1377
                    // variables for showing data in the About popup panel.
                    $scope.rulPeriodLen = {!RULPeriodLength};  
                    $scope.showAboutPopup = false;                    
                    $scope.accountAboutName = '';
                    $scope.lastAboutNdays = '';
                    $scope.lastAboutUsed = '';
                    $scope.summary = '';
                    $scope.dateFormat = '{!JSENCODE(dateFormat)}';

                    // REF-1488
                    $scope.resource = '{!URLFOR($Resource.RFSearch_Icons)}';
                    $scope.contentTypeMap = {"0":"/Content_Count_0.svg",
                                            "1":"/Content_Count_1.svg",
                                            "2":"/Content_Count_2.svg",
                                            "3":"/Content_Count_3.svg",
                                            "4":"/Content_Count_4.svg",
                                            "5":"/Content_Count_5.svg",
                                            "6":"/Content_Count_6.svg",
                                            "7":"/Content_Count_7.svg",
                                            "8":"/Content_Count_8.svg",
                                            "9":"/Content_Count_9.svg"};

                    // variables for showing data in the Tags popup panel.
                    $scope.showTagsPopup = false;
                    $scope.tagAttributes = '';
                    $scope.tagReferencability = '';

                    // ref match data
                    $scope.isRefMatch = {!isRefMatch};
                    $scope.selectedRefStatus = 'Active';
                    $scope.refRequestId = '{!JSENCODE(refRequestId)}';
                    $scope.accRequestId = '{!JSENCODE(accRequestId)}';
                    $scope.unspecRequestId = '{!JSENCODE(unspecRequestId)}';
                    $scope.projectType = '{!JSENCODE(projectType)}';
                    $scope.refRequestWrapper = {};
                    $scope.selectedRequestItem = {};
                    $scope.requestRefTypeIds = [];
                    $scope.selectedRequestId = '';
                    $scope.isUr = false;
                    $scope.stopLoading = false;
                    $scope.isError = false;
                    $scope.errorMessage = '';

                    //  show hide popover
                    $scope.showBackDrop = false;
                    
                    //REF-2294
                    $scope.customContentSymbol = '{!URLFOR($Resource.refEdgeCutomContent)}';
                    $scope.resourceLightningCSS = '{!URLFOR($Resource.LightningCSS)}';
                    $scope.doctypeMap = {"UNKNOWN": "/assets/icons/doctype/unknown_60.png",
                                            "XML": "/assets/icons/doctype/xml_60.png",
                                            "TEXT": "/assets/icons/doctype/txt_60.png",
                                            "MP4": "/assets/icons/doctype/mp4_60.png",
                                            "CSV": "/assets/icons/doctype/csv_60.png",
                                            "EXCEL": "/assets/icons/doctype/excel_60.png",
                                            "JPG": "/assets/icons/doctype/image_60.png",
                                            "BMP": "/assets/icons/doctype/unknown_60.png",
                                            "PNG": "/assets/icons/doctype/image_60.png",
                                            "GIF": "/assets/icons/doctype/image_60.png",
                                            "LINK": "/assets/icons/doctype/link_60.png",
                                            "PDF": "/assets/icons/doctype/pdf_60.png",
                                            "POWER_POINT": "/assets/icons/doctype/ppt_60.png",
                                            "RTF": "/assets/icons/doctype/rtf_60.png",
                                            "WAV": "/assets/icons/doctype/audio_60.png",
                                            "MOV": "/assets/icons/doctype/video_60.png",
                                            "WORD": "/assets/icons/doctype/word_60.png",
                                            "WORD_X": "/assets/icons/doctype/word_60.png",
                                            "EXCEL_X": "/assets/icons/doctype/excel_60.png",
                                            "POWER_POINT_X": "/assets/icons/doctype/ppt_60.png",
                                            "Reference Interview": "/assets/icons/doctype/video_60.png",
                                            "ZIP": "/assets/icons/doctype/unknown_60.png"};
                    $scope.showTypePopup = false;
                    $scope.showBackContentDrop = false;
                    $scope.Title = 'Title__c';
                    $scope.Custom_Reference_Content = 'Custom_Reference_Content__c';
                    $scope.Attributes = 'Attributes__c';
                    $scope.Language = 'Language__c';
                    $scope.Referenceability = 'Referenceability__c';
                    $scope.Attribute = 'Attribute__c';
                    $scope.Reference_Content = 'Reference_Content__c';
                    $scope.Internal_Use = 'Internal_Use__c';
                    $scope.Featured_Content = 'Featured_Content__c';
                    $scope.Ref_Content_Type = 'Reference_Content_Type__c';
                    $scope.Summary = 'Summary__c';
                    $scope.Content_URL = 'Content_URL__c';
                    
                    function getAllActiveAccountIdsWithoutFilters(isReload) {
                    	var defer = $q.defer();
                    	Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.RefSearchBlockController.getAllAccountIds}', 
                            function(result, event) {
                                result = $scope.parseResult(result);
                                $scope.$apply(function (){
                                    $scope.allActiveAccountIds = JSON.parse(result); 
                                    $scope.totalAccounts = $scope.allActiveAccountIds.length; 
                                    accTotlCount = $scope.allActiveAccountIds.length; 
                                    if ((!$scope.preFilter && (!$scope.isRefMatch || $scope.refRequestId == '')) || !isReload) {
                                        getAccounts(isReload);
                                    }
                                    defer.resolve(); 
                                });
                            }
                        );
                        return defer.promise;
                    }
                    
                    $scope.intialFunction = function() {

                        if ('{!JSENCODE(selectedAccIdsParam)}' != '') {
                            $scope.selectedAccIdsParam = '{!JSENCODE(selectedAccIdsParam)}'.split(',');
                        }
                        $scope.maxAccountRequestsMsg = $scope.maxAccountRequestsMsg.replace(/@@@/gi, $scope.maxAccountRequests);
                        
                        getAllActiveAccountIdsWithoutFilters(true);
                        
                        if ($scope.refRequestId != '') {
                            
                            $scope.getRequestData().then(function(result) {
                                $scope.refRequestWrapper = result[0];
                                productService.requestData(result[0]);

                                if ($scope.refRequestWrapper['projectType'] == 'Candidate') {
                                    $scope.selectedRefStatus = 'Candidate';
                                }

                                if ($scope.accRequestId != '' && $scope.unspecRequestId == '') {
                                    $scope.isUr = false;

                                    if($scope.refRequestWrapper && $scope.refRequestWrapper['accRequests']) {
										for(var loop=0; loop<$scope.refRequestWrapper['accRequests'].length; loop++) {
											var ar = $scope.refRequestWrapper['accRequests'][loop];
											if (ar['accRequestId'] == $scope.accRequestId) {
	                                            $scope.selectedRequestItem = angular.copy(ar);
	                                            $scope.selectedRequestId = ar['accRequestId'];
	                                        }
	
	                                        if ($scope.requestRefTypeIds.indexOf(ar['refTypeId']) == -1) {
	                                            $scope.requestRefTypeIds.push(ar['refTypeId']);
	                                        }
										}
									}
                                } else if ($scope.accRequestId == '' && $scope.unspecRequestId != '') {
                                    $scope.isUr = true;

                                    if($scope.refRequestWrapper && $scope.refRequestWrapper['unspecRequests']) {
										for(var loop=0; loop<$scope.refRequestWrapper['unspecRequests'].length; loop++) {
											var ur = $scope.refRequestWrapper['unspecRequests'][loop];
											
											if (ur['unspecRequestId'] == $scope.unspecRequestId) {
	                                            $scope.selectedRequestItem = angular.copy(ur);
	                                            $scope.selectedRequestId = ur['unspecRequestId'];
	                                        }
	
	                                        if ($scope.requestRefTypeIds.indexOf(ur['refTypeId']) == -1) {
	                                            $scope.requestRefTypeIds.push(ur['refTypeId']);
	                                        }
										}
									}
                                }
                            });
                        }
                    }
                    
                    $scope.getRequestData = function() {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefSearchBlockController.getRequestData}',
                            $scope.refRequestId,
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(JSON.parse(result));
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.$on('SelectedColumnsList', function(event, accountColumns, contactColumns, contentColumns) {
                        $scope.columnsList = accountColumns;
                        
                        var columnDisplayOrder;
                        for(var loop=0; loop<$scope.columnsList.length; loop++) {
                        	
                        	if($scope.columnsList[loop].name == 'AccountName') {
                        		columnDisplayOrder = 1;
                        	} else if($scope.columnsList[loop].name == 'ReferenceContent') {
                        		columnDisplayOrder = 2;
                        	} else if($scope.columnsList[loop].name == 'Notice') {
                        		columnDisplayOrder = 3;
                        	} else if($scope.columnsList[loop].name == 'About') {
                        		columnDisplayOrder = 4;
                        	} else if($scope.columnsList[loop].name == 'Tags') {
                        		columnDisplayOrder = 5;
                        	} else if($scope.columnsList[loop].name == 'Owner') {
                        		columnDisplayOrder = 6;
                        	} 
                        	$scope.columnsList[loop]['displayOrder'] = columnDisplayOrder;
                        }
                    });

					function getAccountsData() {
                        $scope.alreadyDisplayedAccountsJson = angular.toJson($scope.alreadyDisplayedAccounts);
                        $scope.accountIds = [];
                        $scope.accounts = [];
                        $scope.alreadyDisplayedAccounts = [];
                        $scope.activeRBIlist = [];
                                
                        if ($scope.searchText != '') {
                            if ($scope.searchResult.length > 0) {
                                $scope.accountIds = $scope.searchResult;
                            }
                        } else {
                           $scope.accountIds = [];
                        }
                        if ($scope.isFilterAppiled || $scope.selectedRef.length > 0) {
                            if ($scope.filterResult.length > 0) {
                                if ($scope.accountIds.length > 0) {
                                    $scope.tempList = [];
                                    for (var i = 0; i < $scope.accountIds.length; i++) {
                                        if ($scope.filterResult.indexOf($scope.accountIds[i]) >= 0) {
                                            $scope.tempList.push($scope.accountIds[i]);
                                        }
                                    }
                                    $scope.accountIds = $scope.tempList;
                                } else {
                                    $scope.accountIds = $scope.filterResult;
                                }
                            } else {
                                $scope.accountIds = [];
                            }
                        }
                        if (accountmappingSelected) {
                            if ($scope.relatedAccountIds.length > 0) {
                                if ($scope.accountIds.length > 0) {
                                    $scope.tempList = [];
                                    for (var i = 0; i < $scope.accountIds.length; i++) {
                                        if ($scope.relatedAccountIds.indexOf($scope.accountIds[i]) >= 0) {
                                            $scope.tempList.push($scope.accountIds[i]);
                                        }
                                    }
                                    $scope.accountIds = $scope.tempList;
                                } else {
                                    $scope.accountIds = $scope.relatedAccountIds;
                                }
                            } else {
                                $scope.accountIds = [];
                            }
                        }
                        $scope.accountIdsJson = angular.toJson($scope.accountIds);
                        $scope.isAnyFilterAppiled = false;
                        
                        if ($scope.isFilterAppiled
                                || $scope.searchText != ''
                                || $scope.selectedRef.length > 0
                                || accountmappingSelected) {
                            $scope.isAnyFilterAppiled = true;
                        }
                        var refStatus = $scope.projectType == 'Candidate' ? 'Candidate' : $scope.selectedRefStatus;
                        
                        $q.all([getTotalAccounts(''),
								getAccounts(false)
			            ]).then(function() {
                            var showRefContent = false;
                                if (!$scope.forAccount || $scope.forContent) {
                                    showRefContent = true;
                                } 
			                if (($scope.isRefMatch || $scope.stopLoading)|| !showRefContent) {
                                productService.isloading(false);
                            } else {
                                $scope.stopLoading = true;
                            }
			            }, function(errorSearchResult) {
			                if ($scope.isRefMatch && $scope.stopLoading) {
                                productService.isloading(false);
                            } else {
                                $scope.stopLoading = true;
                            }
			            });
					}
                    
                    function getTotalAccounts() {
                        var defer = $q.defer();
                        var refStatus = $scope.projectType == 'Candidate' ? 'Candidate' : $scope.selectedRefStatus; 
                    	Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefSearchBlockController.getTotalAccounts1}',
                            $scope.isAnyFilterAppiled, $scope.alreadyDisplayedAccountsJson, $scope.accountIdsJson, refStatus,
                            function(result, event) {
                                $scope.$apply(function() {
                                    result = JSON.parse($scope.parseResult(JSON.stringify(result)));
                                    $scope.totalAccounts = result; 
                                    accTotlCount = result;
                                    defer.resolve();
                                });
                            }, function(error) {
                                defer.reject('Error in getTotalAccounts1 methods');
                            });
                        return defer.promise;
                    };
                    
                    function getAccounts(reload) {
                    	var defer = $q.defer();
                        $scope.alreadyDisplayedAccountsJson = angular.toJson($scope.alreadyDisplayedAccounts);
                        $scope.accountIdsJson = angular.toJson($scope.accountIds);
                        var refStatus = $scope.projectType == 'Candidate' ? 'Candidate' : $scope.selectedRefStatus;
                        
                        Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.RefSearchBlockController.getAllActiveRBIs2}',
                        $scope.isAnyFilterAppiled,$scope.alreadyDisplayedAccountsJson,$scope.accountIdsJson,250,
                        $scope.isRefMatch, $scope.refRequestId, refStatus,
                        function(result, event) {
                            $scope.$apply(function() {
                                result = $scope.parseResult(result);
                                $scope.tempList = JSON.parse(result);
                                
                                if ($scope.tempList.length > 250) {
                                    $scope.isMoreAccountsAvailable = true;
                                    $scope.tempList.splice(250,1);
                                } else {
                                    $scope.isMoreAccountsAvailable = false;
                                }
                                if ($scope.pageSize == 5) {
                                    $scope.showMoreAccount = ($scope.tempList.length > $scope.pageSize ? true : false);
                                } else {
                                    $scope.showMoreAccount = false;
                                }
                                for (var i = 0; i < $scope.tempList.length; i++) {
                                    $scope.alreadyDisplayedAccounts.push($scope.tempList[i].rbi[$scope.nameSpace + $scope.Account]);
                                    $scope.activeRBIlist.push($scope.tempList[i]);

                                    if (i < $scope.pageSize) {
                                        $scope.accounts.push($scope.tempList[i]);
                                    }

                                    // added for REF-1341 - Gaurav Saini (6 Sep, 2018)
                                    if ($scope.selectedAccIdsParam.length > 0
                                            && $scope.selectedAccIdsParam.indexOf($scope.tempList[i].rbi[$scope.nameSpace + $scope.Account]) >= 0) {
                                        var accIdIndex = $scope.selectedAccIds.indexOf($scope.tempList[i].rbi[$scope.nameSpace + $scope.Account]);
                                        $scope.tempList[i].isSelected = true;

                                        if (accIdIndex == -1) {
                                            $scope.selectedAccIds.push($scope.tempList[i].rbi[$scope.nameSpace + $scope.Account]);
                                        }
                                    }
                                    if (!$scope.isFilterAppiled && accountmappingSelected) {
                                        $scope.filterResult.push($scope.tempList[i].rbi[$scope.nameSpace+$scope.Account]);
                                    }
                                }
                                viewedAccTotalCount = $scope.accounts.length;
                                
                                $scope.fetchingData = false;
                                
                                if (reload) {
                                    var showRefContent = false;
                                    if (!$scope.forAccount || $scope.forContent) {
                                            showRefContent = true;
                                        } 
                                    if (($scope.isRefMatch || $scope.stopLoading)|| !showRefContent) {
                                        productService.isloading(false);
                                    } else {
                                        $scope.stopLoading = true;
                                    }
                                }
                                defer.resolve();
                            });
                        }, function(error) {
                        	defer.reject('Error in getAllActiveRBIs2 method');
                        });
			            
			            return defer.promise;
                    }
                    $scope.relatedAccountIds = [];
                    accountmappingSelected = false;
                    $scope.$on('filter', function(e,myMap,operationMap,accountMappedIds,accountmapping,relatedFilterMapContact,abc,relatedFilterMapContent,abc1,mappedFilterIds, stageFilterId) { 
                        $scope.filterAttributeMap = {};
                        $scope.filterNos = {};
                        accountmappingSelected = accountmapping;
                        $scope.relatedAccountIds = accountMappedIds;
                        $scope.filterOperationMap = operationMap;
                        $scope.isFilterAppiled = false;
                        $scope.selectedRef = [];
                        
                        if(myMap) {
                        	var myMapKeys = Object.keys(myMap);
	                        var key;
	                        for(var loop=0; loop<myMapKeys.length; loop++) {
	                        	key = myMapKeys[loop];
	                        	var itm = myMap[key];
	                        	
	                        	$scope.tempList = [];
	                            if (key == 'Referenceability') {
	                                for (var i = 0; i < itm.length; i++) {
	                                    if (itm[i].isSelected && itm[i].refType[$scope.nameSpace+$scope.Referenceability_no] != null) {
	                                        $scope.tempList.push(itm[i].refType[$scope.nameSpace+$scope.Referenceability_no]);
	                                    }
	                                }
	                                if ($scope.tempList.length > 0) {
	                                    $scope.selectedRef = $scope.tempList;
	                                    //$scope.isFilterAppiled = true;
	                                }
	                            } else if (key != stageFilterId && key != 'Content Types' && key != 'Content Language' && mappedFilterIds.indexOf(key) < 0) {
	                                var filterNo = '';
	                                for (var i = 0; i < itm.length; i++) {
	                                    if (itm[i].isSelected) {
	                                        $scope.tempList.push(itm[i].attId);
	                                        filterNo = itm[i].filterNo;
	                                    }
	                                }
	                                if ($scope.tempList.length > 0) {
	                                    $scope.filterAttributeMap[key] = $scope.tempList;
	                                    $scope.filterNos[key] = filterNo;
	                                    $scope.isFilterAppiled = true;
	                                }
	                            }
	                        }
                        }
                        $scope.alreadyDisplayedAccounts = [];
                        $scope.filterAccounts();
                    });
                    
                    $scope.filterAccounts = function() {
                        $scope.alreadyDisplayedAccountsJson = angular.toJson($scope.alreadyDisplayedAccounts);
                        $scope.accountIdsJson = angular.toJson($scope.allActiveAccountIds);
                        $scope.selectedRefJson = angular.toJson($scope.selectedRef);
                        $scope.filterNospJson = angular.toJson($scope.filterNos);
                        $scope.filterOperationMapJson  = angular.toJson($scope.filterOperationMap);
                        var refStatus = $scope.projectType == 'Candidate' ? 'Candidate' : $scope.selectedRefStatus;
                        Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.RefSearchBlockController.filterAccountsByRefAttributes}', 
                        $scope.selectedRefJson, $scope.filterNospJson, $scope.alreadyDisplayedAccountsJson,
                        $scope.accountIdsJson, $scope.filterOperationMapJson, refStatus,
                        function(result, event) {
                            result = $scope.parseResult(result);
                            $scope.$apply(function (){
                                $scope.tempList = JSON.parse(result); 
                                $scope.labelLogicMap = {};
                                $scope.filterResult = [];
                                for(var i = 0; i < $scope.tempList.length;i++){
                                    
                                    if($scope.isFilterAppiled){
                                        if($scope.tempList[i][$scope.nameSpace+$scope.Attribute_Ids] != null && $scope.tempList[i][$scope.nameSpace+$scope.Attribute_Ids] != ''){
                                            $scope.setAttribute = $scope.tempList[i][$scope.nameSpace+$scope.Attribute_Ids].split(",");
                                            $scope.selectedlabelCount = 0;
                                            $scope.recordMatchCount = 0;
                                            
                                            if($scope.filterAttributeMap) {
                                            	var filterAttributeMapKeys = Object.keys($scope.filterAttributeMap);
	                                            var labelId;
	                                            for(var loop=0; loop<filterAttributeMapKeys.length; loop++) {
	                                            	labelId = filterAttributeMapKeys[loop];
		                                            var array = $scope.filterAttributeMap[labelId];
		                                            
		                                            $scope.labelLogicMap[labelId] = false;
	                                                $scope.selectedlabelCount = $scope.selectedlabelCount+1;
	                                                if($scope.filterOperationMap[labelId] == 'and') {
	                                                    $scope.notMatched = false;
	                                                    for (var j = 0; j < array.length; j++) {
	                                                        if ($scope.setAttribute.indexOf(array[j]) < 0) {
	                                                            $scope.notMatched = true;
	                                                            break;
	                                                        }
	                                                    }
	                                                    if (!$scope.notMatched) {
	                                                        $scope.recordMatchCount = $scope.recordMatchCount+1;
	                                                        $scope.labelLogicMap[labelId] = true;
	                                                    }
	                                                } else {
	                                                    for (var j = 0; j < array.length; j++) {
	                                                        if ($scope.setAttribute.indexOf(array[j]) >= 0) {
	                                                            $scope.recordMatchCount = $scope.recordMatchCount+1;
	                                                            $scope.labelLogicMap[labelId] = true;
	                                                            break;
	                                                        }
	                                                    }
	                                                }
	                                            }
                                            }
                                            
                                            if($scope.selectedlabelCount != 0){
                                                //if advance filter has AND logic
                                                $scope.checkResult = true;
                                                
                                                if($scope.labelLogicMap) {
                                                	var labelLogicMapKeys = Object.keys($scope.labelLogicMap);
	                                                var labelId;
	                                                var flag;
	                                                for(var loop=0; loop<labelLogicMapKeys.length; loop++) {
	                                                	labelId = labelLogicMapKeys[loop];
			                                            flag = $scope.labelLogicMap[labelId];
			                                            $scope.checkResult = ($scope.checkResult && flag);
	                                                }
                                                }
                                                
                                                if ($scope.checkResult)
                                                    $scope.filterResult.push($scope.tempList[i][$scope.nameSpace+$scope.Account]);
                                            }
                                        }
                                    } else {
                                        $scope.filterResult.push($scope.tempList[i][$scope.nameSpace+$scope.Account]);
                                    }
                                }
                                getAccountsData();
                            });
                        }); 
                    }
                    $scope.$on('searchText', function(e,value) { 
                        $scope.searchText = value;
                        $scope.alreadyDisplayedAccounts = [];
                        $scope.search();
                    });
                    
                    $scope.$on('clearAllFiltersAndSearchText', function(event, value) { 
                        //Reset to initial defualt data
                        $scope.alreadyDisplayedAccounts = [];
                        $scope.accounts = [];
                        $scope.activeRBIlist = []; 
                        
                        //Reset Search text data
                        $scope.searchText = '';
                        
                        //Reset Filters defualt data
                        $scope.isAnyFilterAppiled = false; 
                        accountmappingSelected = false;
						$scope.relatedAccountIds = [];
						$scope.isFilterAppiled = false;
						$scope.selectedRef = [];

                        getAllActiveAccountIdsWithoutFilters(false).then(function() {
                        	productService.isloading(false);
                        });
                    });
                    
                    $scope.search = function() {
                        $scope.alreadyDisplayedAccountsJson = angular.toJson($scope.alreadyDisplayedAccounts);
                        $scope.accountIdsJson = angular.toJson($scope.allActiveAccountIds);
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefSearchBlockController.filterAccountsBySearchText1}',
                            $scope.searchText, $scope.alreadyDisplayedAccountsJson, $scope.accountIdsJson,
                            function(result, event) {
                                result = $scope.parseResult(result);
                                $scope.$apply(function() {
                                    var tempResult = JSON.parse(result);
                                    $scope.searchResult = tempResult['AllIds'];
                                    var result2 = tempResult['NameBasedIds'];
                                    productService.searchTextContent($scope.searchText, result2);
                                    if (!$scope.preFilter) {
                                        productService.searchTextContact($scope.searchText, result2);
                                    }
                                    getAccountsData();
                                });
                            }
                        );
                    }
                    
                    $scope.parseResult = function(result) {
                        if (result != null) {
                            result = result.replace(/&quot/gi, '"');
                            result = result.replace(/&amp/g, '&');
                            result = result.replace(/&lt/g, '<');
                            result = result.replace(/&gt/g, '>');
                            result = result.replace(/;/g, '');
                            result = result.replace(/&#39/g, '\'');
                            return result;
                        }
                    }
                    $scope.getRefContent = function(accId, checkcount) {
                    
                        if (checkcount != 0) {
                            $scope.showRefContentModal = true;
                            $scope.allRefContentsSelected = false;
                            $scope.selectedRefContentIds = [];
                            $scope.refContentsForDownload = [];
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.RefSearchBlockController.getRefContentForAccount}',
                                accId,
                                function(result, event) {
                                    if (result != null) {
                                        result = $scope.parseResult(result);
                                        $scope.$apply(function () {
                                            $scope.accRefContentList = JSON.parse(result);
                                        });
                                    }
                                },
                                {escape: true}
                            );
                        }    
                        //REF-2507
                        var countValue = 'Refcontent_Link_Count__c';
                        $scope.updateCount(countValue);                    
                    }
                    $scope.closeRefContentModal = function() {
                        $scope.showRefContentModal = false;
                        $scope.accRefContentList = [];
                        $scope.selectedRefContentIds = [];
                        $scope.refContentsForDownload = [];
                    }
                    $scope.closeDownloadNotification = function() {
                        $scope.isDownloadUnsuccessful = false;
                        $scope.showNoFileAvailableMsg = false;
                        $scope.showDownloadError = false;
                    }
                    
                    $scope.downloadRefContentFromPopup = function(refContentId) {
                        $scope.showTypeCustomModal = false;
                        var refContentIdsToDownload = [];
                        refContentIdsToDownload.push(refContentId);

                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefSearchBlockController.downloadRefContent}',
                            angular.toJson(refContentIdsToDownload),
                            function(result, event) {
                                console.log(result);
                                
                                if (result != '' && result.startsWith('Error') == false) {
                                    window.open(result, '_top');
                                } else if (result == '') {
                                    $scope.isDownloadUnsuccessful = true;
                                    $scope.showNoFileAvailableMsg = true;
                                } else {
                                    $scope.isDownloadUnsuccessful = true;
                                    $scope.showDownloadError = true;
                                    console.log('--->' + result);
                                }
                            },
                            {escape: true}
                        );
                    }
                    
                    $scope.openLinkURL = function(refContentId, refContentURL) {
                        $scope.showTypeCustomModal = false;
                        
                        if (refContentURL.indexOf("http://") >= 0 || refContentURL.indexOf("https://") >= 0) {
                            window.open('', '_blank').location.href = refContentURL;
                        } else {
                            window.open('', '_blank').location.href = 'http://' + refContentURL;
                        }
                        var actionName = 'open link';
                        var refContentIdsToUpdate = [];
                        refContentIdsToUpdate.push(refContentId);

                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefSearchBlockController.updateRefContentStatistics}',
                            angular.toJson(refContentIdsToUpdate), actionName,
                            function(result, event) {
                                console.log(result);
                            },
                            {escape: true}
                        );
                    }
                    
                    $scope.openDetailPage = function(refContentId) {
                        $scope.showTypeCustomModal = false;
                        var actionName = 'open detail';
                        var refContentIdsToUpdate = [];
                        refContentIdsToUpdate.push(refContentId);

                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefSearchBlockController.updateRefContentStatistics}',
                            angular.toJson(refContentIdsToUpdate), actionName,
                            function(result, event) {
                                console.log(result);
                            },
                            {escape: true}
                        );
                    }
                    
                    $scope.downloadRefContentForAccount = function() {
                        if ($scope.refContentsForDownload.length == 0) {
                            $scope.showSelectContentMsg = true;
                        } else if ($scope.refContentsForDownload.length == 1) {
                            if ($scope.refContentsForDownload[0].fileType == 'LINK' || $scope.refContentsForDownload[0].refContent[$scope.nameSpace + 'Custom_Reference_Content__c']) {
                                $scope.showLinkMsg = true;
                            } else {
                                //$scope.showRefContentModal = false;
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.RefSearchBlockController.downloadRefContent}',
                                    //angular.toJson($scope.refContentsForDownload),
                                    angular.toJson($scope.selectedRefContentIds),
                                    function(result, event) {
                                        if (result != '' && result.startsWith('Error') == false) {
                                            window.open(result, '_top');
                                            $scope.showRefContentModal = false;
                                            $scope.$apply();
                                        } else if (result == '') {
                                            $scope.isDownloadUnsuccessful = true;
                                            $scope.showNoFileAvailableMsg = true;
                                             $scope.$apply();
                                        } else {
                                            $scope.isDownloadUnsuccessful = true;
                                            $scope.showDownloadError = true;
                                        }
                                    },
                                    {escape: true}
                                );
                            }
                        } else {
                            var breakFlag = true;
                            var tempDownloads = angular.copy($scope.refContentsForDownload);
                            var tempSelectedRefs = angular.copy($scope.selectedRefContentIds);
                            
                            if($scope.refContentsForDownload) {
                            	for(var loop=0; loop<$scope.refContentsForDownload.length; loop++) {
	                            	var item = $scope.refContentsForDownload[loop];
	                            	
	                            	if (item.fileType == 'LINK' || item.refContent[$scope.nameSpace + 'Custom_Reference_Content__c']) {
	                                    var index = tempSelectedIds.indexOf(item.refContentId);
	                                    tempDownloads.splice(index, 1);
	                                    tempSelectedRefs.splice(index, 1);
	                                }
	                                if (breakFlag && (item.fileType == 'LINK' || item.refContent[$scope.nameSpace + 'Custom_Reference_Content__c'])) {
	                                    $scope.showLinkMsg = true;
	                                    breakFlag = false;
	                                }
	                            }
                            }
                            
                            $scope.refContentsForDownload = angular.copy(tempDownloads);
                            if ($scope.refContentsForDownload.length > 0) {
                                //$scope.showRefContentModal = false;
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.RefSearchBlockController.downloadRefContent}',
                                    //angular.toJson($scope.refContentsForDownload),
                                    angular.toJson(tempSelectedRefs),
                                    function(result, event) {
                                        if (result != '' && result.startsWith('Error') == false) {
                                            var downloadURL = window.location.protocol + "//" + window.location.host + "/" + result;
                                            window.open(downloadURL, '_top');
                                            $scope.showRefContentModal = false;
                                            $scope.$apply();
                                        } else if (result == '') {
                                            $scope.isDownloadUnsuccessful = true;
                                            $scope.showNoFileAvailableMsg = true;
                                        } else {
                                            $scope.isDownloadUnsuccessful = true;
                                            $scope.showDownloadError = true;
                                        }
                                    },
                                    {escape: true}
                                );
                            }
                        }
                        //$scope.selectedRefContentIds = [];
                        //$scope.refContentsForDownload = [];
                    }
                    $scope.selectAllRefContent = function() {
                        if($scope.accRefContentList) {
                        	for(var loop=0; loop<$scope.accRefContentList.length; loop++) {
	                        	var item = $scope.accRefContentList[loop];
	                        	
	                        	var index = $scope.selectedRefContentIds.indexOf(item.refContentId);
	                            if (index == -1
	                                    && !item.allowSharing
	                                    && item.contentVersion.Id != null) {
	                                item.isSelected = $scope.allRefContentsSelected;
	                                $scope.selectedRefContentIds.push(item.refContentId);
	                                $scope.refContentsForDownload.push(item);
	                            }
	                            if (!$scope.allRefContentsSelected) {
	                                $scope.selectedRefContentIds = [];
	                                $scope.refContentsForDownload = [];
	                                item.isSelected = false;
	                            }
	                        }
                        }
                    }
                    $scope.selectRefContent = function(refContentId, refContent) {
                        var index = $scope.selectedRefContentIds.indexOf(refContentId);
                        if (index == -1) {
                            $scope.selectedRefContentIds.push(refContentId);
                            $scope.refContentsForDownload.push(refContent);
                        } else {
                            $scope.selectedRefContentIds.splice(index, 1);
                            $scope.refContentsForDownload.splice(index, 1);
                        }
                        var allSelectedTemp = true;
                        var breakFlag = true;
                        
                        if($scope.accRefContentList) {
                        	for(var loop=0; loop<$scope.accRefContentList.length; loop++) {
	                        	var item = $scope.accRefContentList[loop];
	                        	if (breakFlag) {
	                                if (!item.allowSharing && !item.isSelected) {
	                                    allSelectedTemp = false;
	                                    breakFlag = false;
	                                }
	                            }
	                        }
                        }
                        
                        $scope.allRefContentsSelected = allSelectedTemp;
                    }
                    $scope.shareRefContentIds = function() {
                        var refContentIds = $scope.selectedRefContentIds.join(',');
                        
                        if (refContentIds != '') {
                            var form = document.createElement("form");
                            form.setAttribute("method", "POST");
                            form.setAttribute("action", "{!URLFOR($Page.Invitation_NewSLDS)}");
                            
                            var hiddenField = document.createElement("input");
                            hiddenField.setAttribute("type", "hidden");
                            hiddenField.setAttribute("name", "refContentIds");
                            hiddenField.setAttribute("value", refContentIds);
                            form.appendChild(hiddenField);
                            
                            var hiddenField1 = document.createElement("input");
                            hiddenField1.setAttribute("type", "hidden");
                            hiddenField1.setAttribute("name", "forAccount");
                            hiddenField1.setAttribute("value", $scope.forAccount);
                            form.appendChild(hiddenField1);
                            
                            var hiddenField2 = document.createElement("input");
                            hiddenField2.setAttribute("type", "hidden");
                            hiddenField2.setAttribute("name", "forContent");
                            hiddenField2.setAttribute("value", $scope.forContent);
                            form.appendChild(hiddenField2);
                            
                            var hiddenField3 = document.createElement("input");
                            hiddenField3.setAttribute("type", "hidden");
                            hiddenField3.setAttribute("name", "opportunityId");
                            hiddenField3.setAttribute("value", $scope.opportunityId);
                            form.appendChild(hiddenField3);
                            
                            if ($scope.leadId != '') {
                                var hiddenField4 = document.createElement("input");
                                hiddenField4.setAttribute("type", "hidden");
                                hiddenField4.setAttribute("name", "leadId");
                                hiddenField4.setAttribute("value", $scope.leadId);
                                form.appendChild(hiddenField4);
                            }
                            
                            document.body.appendChild(form);
                            form.submit();
                        } else {
                            $scope.showSelectContentMsg = true;
                        }
                    }
                    $scope.showMoreAccounts = function() {
                        $scope.pageSize = 25;
                        $scope.showMoreAccount = false;
                        for(var i = 5 ; i < $scope.activeRBIlist.length;i++){
                            if(i < $scope.pageSize)
                                $scope.accounts.push($scope.activeRBIlist[i]);
                        }
                        viewedAccTotalCount = $scope.accounts.length;
                        $scope.isAllAccountSelected = false;
                        showMoreSectionView(true,  false, false, true);
                        $scope.$parent.showMoreRecordsView = true;
                        //var toggleStatus = $scope.isAllAccountSelected;
                        //angular.forEach($scope.accounts, function(itm){ itm.isSelected = toggleStatus; });
                    }
                    $scope.more = function(){
                        if($scope.showMoreAccount == false){ 
                            //$scope.$apply(function (){
                                if($scope.accounts.length < $scope.activeRBIlist.length){
                                    var size = (parseInt($scope.accounts.length)+parseInt($scope.pageSize))
                                    for(var i = $scope.accounts.length ; i < $scope.activeRBIlist.length;i++){
                                        if(i < size)
                                            $scope.accounts.push($scope.activeRBIlist[i]);
                                    }
                                    viewedAccTotalCount = $scope.accounts.length;
                                }
                                else if($scope.isMoreAccountsAvailable){
                                    $scope.fetchingData = true;
                                    getAccounts(false);
                                }
                                $scope.isAllAccountSelected = false;
                                //var toggleStatus = $scope.isAllAccountSelected;
                                //angular.forEach($scope.accounts, function(itm){ itm.isSelected = toggleStatus; });
                            //});
                        } 
                    };

                    //  REF-1970    Rajneesh Raj(Nov 14,2018)
                    $scope.backToRefsearchPage = function() {
                        $scope.accounts.splice(5, ($scope.activeRBIlist.length - 5));
                        $scope.showMoreAccount = true;
                        $scope.pageSize = 5;
                        showMoreSectionView(true,  true, true, true);
                        $scope.$parent.showMoreRecordsView = false;
                    }

                    $scope.selectAll = function() {
                        if ($scope.accounts.length <= $scope.maxAccountRequests) {
                            if ($scope.isAllAccountSelected) {
                                //for showing limit reached message
                                var breakFlag = true;
                                
                                if($scope.accounts) {
                                	for(var loop=0; loop<$scope.accounts.length; loop++) {
	                                	var item = $scope.accounts[loop];
	                                	if (breakFlag) {
	                                        if (item.rbi[$scope.nameSpace + $scope.Account_Level_RUL]) {
	                                            if (item.rbi[$scope.nameSpace + $scope.RUL_Limit_Reached]) {
	                                                if (!item.isSelected) {
	                                                    breakFlag = false;
	                                                    $scope.showLimitReachedMsg = true;
	                                                }
	                                            }
	                                        } else {
	                                            if (item.rbi[$scope.nameSpace + $scope.Is_Contact_Limit_Reached]) {
	                                                if (!item.isSelected) {
	                                                    breakFlag = false;
	                                                    $scope.showLimitReachedMsg = true;
	                                                }
	                                            }
	                                        }
	                                    }
	                                }
                                }
                            }
                            var breakFlag2 = true;
                            
                            if($scope.accounts) {
                            	for(var loop=0; loop<$scope.accounts.length; loop++) {
	                            	var item = $scope.accounts[loop];
	                            	
	                            	if (breakFlag2) {
	                                    //for selecting or deselecting all accounts
	                                    item.isSelected = $scope.isAllAccountSelected;
	                                    var index = $scope.selectedAccIds.indexOf(item.rbi[$scope.nameSpace + $scope.Account]);
	                                    if (index == -1) {
	                                        $scope.selectedAccIds.push(item.rbi[$scope.nameSpace + $scope.Account]);
	                                    }
	                                    if (!$scope.isAllAccountSelected) {
	                                        $scope.selectedAccIds = [];
	                                    }
	                                }
	                            }
                            }
                        } else {
                            $scope.showMaxAccountRequestsMsg = true;
                            $scope.isAllAccountSelected = false;
                        }
                    }
                    $scope.selectDeselect = function(accWrap) {
                        var indexOfAccId = $scope.selectedAccIds.indexOf(accWrap.rbi[$scope.nameSpace + $scope.Account]);
                        if ($scope.selectedAccIds.length < $scope.maxAccountRequests || indexOfAccId >= 0) {
                            if (indexOfAccId == -1) {
                                $scope.selectedAccIds.push(accWrap.rbi[$scope.nameSpace + $scope.Account]);
                                if (accWrap.rbi[$scope.nameSpace + $scope.Account_Level_RUL]) {
                                    if (accWrap.rbi[$scope.nameSpace + $scope.RUL_Limit_Reached]) {
                                        $scope.showLimitReachedMsg = true;
                                    }
                                } else {
                                    if (accWrap.rbi[$scope.nameSpace + $scope.Is_Contact_Limit_Reached]) {
                                        $scope.showLimitReachedMsg = true;
                                    }
                                }
                            } else {
                                $scope.selectedAccIds.splice(indexOfAccId, 1);
                            }
                            var allSelectedTemp = true;
                            var breakFlag = true;
                            
                            if($scope.accounts) {
                            	for(var loop=0; loop<$scope.accounts.length; loop++) {
	                            	var item = $scope.accounts[loop];
	                            	
	                            	if (breakFlag) {
	                                    if (!item.isSelected) {
	                                        allSelectedTemp = false;
	                                        breakFlag = false;
	                                    }
	                                }
	                            }
                            }
                            
                            $scope.isAllAccountSelected = allSelectedTemp;
                        } else {
                            $scope.showMaxAccountRequestsMsg = true;
                            accWrap.isSelected = false;
                        }
                    }
                    
                    $scope.exportData = function() {
                        if ($scope.totalAccounts > 0 && ($scope.filterResult.length > 0 || $scope.searchResult.length > 0)) {
                            var accountIdsToExport = [];
                            
                            if ($scope.filterResult.length > 0 && $scope.searchResult.length > 0) {
                            	accountIdsToExport = $scope.filterResult.filter((n) => $scope.searchResult.includes(n));
                            } else if ($scope.filterResult.length > 0 && $scope.searchResult.length == 0) {
                            	accountIdsToExport = $scope.filterResult;
                            } else if ($scope.filterResult.length == 0 && $scope.searchResult.length > 0) {
                            	accountIdsToExport = $scope.searchResult;
                            }
                            var form = document.createElement('form');
                            form.setAttribute('method', 'POST');
                            form.setAttribute('action', '{!URLFOR($Page.ExportPage)}');
                            form.setAttribute('target', '_self');
                            var hiddenField = document.createElement('input');
                            hiddenField.setAttribute('type', 'hidden');
                            hiddenField.setAttribute('name', 'allAccountIds');
                            hiddenField.setAttribute('value', accountIdsToExport.join(','));
                            form.appendChild(hiddenField);
                            var hiddenField1 = document.createElement('input');
                            hiddenField1.setAttribute('type', 'hidden');
                            hiddenField1.setAttribute('name', 'exportObjectName');
                            hiddenField1.setAttribute('value', 'SearchedAccounts');
                            form.appendChild(hiddenField1);
                            
                            if ($scope.opportunityId != '' || $scope.leadId != '') {
                                var hiddenField2 = document.createElement('input');
                                hiddenField2.setAttribute('type', 'hidden');
                                if ($scope.opportunityId != '') {
                                    hiddenField2.setAttribute('name', 'opportunityId');
                                    hiddenField2.setAttribute('value', $scope.opportunityId);
                                } else {
                                    hiddenField2.setAttribute('name', 'leadId');
                                    hiddenField2.setAttribute('value', $scope.leadId);
                                } 
                                form.appendChild(hiddenField2);
                                var hiddenField3 = document.createElement('input');
                                hiddenField3.setAttribute('type', 'hidden');
                                hiddenField3.setAttribute('name', 'forAccount');
                                hiddenField3.setAttribute('value', $scope.forAccount);
                                form.appendChild(hiddenField3);
                                var hiddenField4 = document.createElement('input');
                                hiddenField4.setAttribute('type', 'hidden');
                                hiddenField4.setAttribute('name', 'forContent');
                                hiddenField4.setAttribute('value', $scope.forContent);
                                form.appendChild(hiddenField4);
                            }
                            var hiddenField5 = document.createElement('input');
                            hiddenField5.setAttribute('type', 'hidden');
                            hiddenField5.setAttribute('name', 'isSLDS');
                            hiddenField5.setAttribute('value', 'true');
                            form.appendChild(hiddenField5);
                            document.body.appendChild(form);
                            form.submit();
                        } else if ($scope.totalAccounts > 0 && $scope.filterResult.length == 0) {
                            
                            $scope.getAllAccountsForExport().then(function(result) {
                                var form = document.createElement('form');
                                form.setAttribute('method', 'POST');
                                form.setAttribute('action', '{!URLFOR($Page.ExportPage)}');
                                form.setAttribute('target', '_self');
                                var hiddenField = document.createElement('input');
                                hiddenField.setAttribute('type', 'hidden');
                                hiddenField.setAttribute('name', 'allAccountIds');
                                hiddenField.setAttribute('value', result.join(','));
                                form.appendChild(hiddenField);
                                var hiddenField1 = document.createElement('input');
                                hiddenField1.setAttribute('type', 'hidden');
                                hiddenField1.setAttribute('name', 'exportObjectName');
                                hiddenField1.setAttribute('value', 'SearchedAccounts');
                                form.appendChild(hiddenField1);

                                if ($scope.opportunityId != '' || $scope.leadId != '') {
                                    var hiddenField2 = document.createElement('input');
                                    hiddenField2.setAttribute('type', 'hidden');
                                    if ($scope.opportunityId != '') {
                                        hiddenField2.setAttribute('name', 'opportunityId');
                                        hiddenField2.setAttribute('value', $scope.opportunityId);
                                    } else {
                                        hiddenField2.setAttribute('name', 'leadId');
                                        hiddenField2.setAttribute('value', $scope.leadId);
                                    } 
                                    form.appendChild(hiddenField2);
                                    var hiddenField3 = document.createElement('input');
                                    hiddenField3.setAttribute('type', 'hidden');
                                    hiddenField3.setAttribute('name', 'forAccount');
                                    hiddenField3.setAttribute('value', $scope.forAccount);
                                    form.appendChild(hiddenField3);
                                    var hiddenField4 = document.createElement('input');
                                    hiddenField4.setAttribute('type', 'hidden');
                                    hiddenField4.setAttribute('name', 'forContent');
                                    hiddenField4.setAttribute('value', $scope.forContent);
                                    form.appendChild(hiddenField4);
                                }
                                var hiddenField5 = document.createElement('input');
                                hiddenField5.setAttribute('type', 'hidden');
                                hiddenField5.setAttribute('name', 'isSLDS');
                                hiddenField5.setAttribute('value', 'true');
                                form.appendChild(hiddenField5);
                                document.body.appendChild(form);
                                form.submit();
                            });
                        }
                    }
                    
                    $scope.getAllAccountsForExport = function() {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefSearchBlockController.getAllRecordsForExport}',
                            'account',
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(JSON.parse(result));
                            }
                        );
                        return deferred.promise;
                    }
                    
                    $scope.openCWSAModal = function() {
                        if ($scope.selectedAccIds.length == 0) {
                            $scope.sendAccIds();
                        } else {
                            $scope.showCWSAModal = true
                        }
                    }
                    $scope.$on('stageErrorEvent', function(event, stageErrorMsg) {
                        $scope.stageErrorMessage1 = stageErrorMsg;
                    });
                    $scope.selectAndContinue = function() {
                        
                        if ($scope.preFilter && $scope.stageErrorMessage1 != '') {
                            $scope.showStageErrorMessage1 = true;
                        } else {
                            $scope.showStageErrorMessage1 = false;
                            
                            if ($scope.selectedAccIds.length > 0) {
                                $scope.sendAccIds();
                            } else {
                                $scope.showMinAccountMsg = true;
                            }
                        }
                    }
                    $scope.discardAccIds = function() {
                        $scope.selectedAccIds = [];
                        $scope.sendAccIds();
                    }
                    $scope.sendAccIds = function() {
                        var ids = '';
                        
                        if ($scope.selectedAccIds.length > 0) {
                            ids = $scope.selectedAccIds.join(',');
                        }
                        var form = document.createElement("form");
                        form.setAttribute("method", "POST");
                        form.setAttribute("action", "{!URLFOR($Page.ReferenceUseRequestSLDS)}");
                        
                        var hiddenField = document.createElement("input");
                        hiddenField.setAttribute("type", "hidden");
                        hiddenField.setAttribute("name", "accountIds");
                        hiddenField.setAttribute("value", ids);
                        form.appendChild(hiddenField);
                        
                        var hiddenField1 = document.createElement("input");
                        hiddenField1.setAttribute("type", "hidden");
                        hiddenField1.setAttribute("name", "forAccount");
                        hiddenField1.setAttribute("value", $scope.forAccount);
                        form.appendChild(hiddenField1);
                        
                        var hiddenField2 = document.createElement("input");
                        hiddenField2.setAttribute("type", "hidden");
                        hiddenField2.setAttribute("name", "forContent");
                        hiddenField2.setAttribute("value", $scope.forContent);
                        form.appendChild(hiddenField2);
                        
                        if ($scope.opportunityId != '') {
                            var hiddenField3 = document.createElement("input");
                            hiddenField3.setAttribute("type", "hidden");
                            hiddenField3.setAttribute("name", "opportunityId");
                            hiddenField3.setAttribute("value", $scope.opportunityId);
                            form.appendChild(hiddenField3);
                        }
                        
                        if ($scope.caseId != '') {
                            var hiddenField3 = document.createElement("input");
                            hiddenField3.setAttribute("type", "hidden");
                            hiddenField3.setAttribute("name", "caseId");
                            hiddenField3.setAttribute("value", $scope.caseId);
                            form.appendChild(hiddenField3);
                        }
                        if ($scope.leadId != '') {
                            var hiddenField3 = document.createElement("input");
                            hiddenField3.setAttribute("type", "hidden");
                            hiddenField3.setAttribute("name", "leadId");
                            hiddenField3.setAttribute("value", $scope.leadId);
                            form.appendChild(hiddenField3);
                        }
                        document.body.appendChild(form);
                        form.submit();
                    }
                    //  Back to opportunity
                    $scope.backToOpportunity = function() {						
                       sforce.one.navigateToSObject($scope.opportunityId);
					}

                    // REF - 1377
                    $scope.openAboutPopup = function(accWrap, $event) {
                        $scope.accountAboutName = accWrap.AccountName;
                        $scope.lastAboutUsed = accWrap.LastUsed;
                        $scope.summary = accWrap.summary;
                        $scope.lastAboutNdays = accWrap.rbi[$scope.nameSpace + $scope.Default_Period_Completed_Uses];
                        $scope.showAboutPopup = true;
                        $scope.showBackDrop = true;
                        $(".account-about-panel").css("top", $($event.target).offset().top - 20);
			            $(".account-about-panel").css("left", $($event.target).offset().left - 368);
                    }

                    $scope.openTagsPopup = function(accWrap, $event) { 
                        $scope.accountAboutName = accWrap.AccountName;
                        $scope.tagReferencability = accWrap.rbi[$scope.nameSpace + $scope.Referenceability];                        
                        //  REF-1975
                        Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.RefSearchBlockController.rollUpAttribute}',
                        accWrap.rbi[$scope.nameSpace + $scope.Account],
                            true, 
                            '',
                            function(result, event) {
                                result = $scope.parseResult(result);
                                if(typeof(accWrap.rbi[$scope.nameSpace + $scope.Attributes]) != "undefined" && result != '') {
                                    $scope.tagAttributes = accWrap.rbi[$scope.nameSpace + $scope.Attributes] + ', '+result; 
                                } else if(typeof(accWrap.rbi[$scope.nameSpace + $scope.Attributes]) == "undefined" && result != '') {
                                    $scope.tagAttributes = result; 
                                } else if(typeof(accWrap.rbi[$scope.nameSpace + $scope.Attributes]) != "undefined" && result == '') {
                                    $scope.tagAttributes = accWrap.rbi[$scope.nameSpace + $scope.Attributes]; 
                                }
                                $scope.showTagsPopup = true;
                                $scope.showBackDrop = true;
                                $(".account-Tags-panel").css("top", $($event.target).offset().top - 23);
                                $(".account-Tags-panel").css("left", $($event.target).offset().left - 368);
                                $scope.$apply();
                            }
                        );
                    }

                    $scope.changeReferenceStatus = function() {
                        productService.referenceStatusChangeEvent($scope.selectedRefStatus);
                    }

                    $scope.showBackDropPopover = function() { 
                        $scope.showAboutPopup = false;
                        $scope.showTagsPopup = false;
                        $scope.showBackDrop = false;                                       
                    }

                    $scope.createHitListRecord = function(accId, conId) {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefSearchBlockController.createHitListRecord}',
                            accId, conId, $scope.refRequestWrapper['refRequestId'],
                            $scope.refRequestWrapper['oppId'], $scope.refRequestWrapper['projectType'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.assignAccountToRequest = function(accId, conId) {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefSearchBlockController.assignAccountContact}',
                            $scope.isUr, accId, conId, angular.toJson($scope.selectedRequestItem),
                            $scope.refRequestWrapper['refRequestId'], $scope.refRequestWrapper['requesterId'],
                            $scope.refRequestWrapper['projectType'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.hitAccount = function(accWrapper) {
                        productService.isloading(true);
                        
                        $scope.createHitListRecord(accWrapper.rbi[$scope.nameSpace + $scope.Account], '').then(function(result) {
                            
                            if (result == 'success') {
                                accWrapper.isAlreadyHit = true;
                                accWrapper.hitCount += 1;
                            } else {
                                $scope.isError = true;
                                $scope.errorMessage = result;
                            }
                            productService.isloading(false);
                        });
                    }

                    $scope.assignAccount = function(accWrapper) {
                        $scope.isError = false;
                        $scope.errorMessage = '';

                        if (accWrapper.rbi[$scope.nameSpace + $scope.Account] == $scope.selectedRequestItem['accountId']) {
                            $scope.isError = true;
                            $scope.errorMessage = '{!$Label.SELECT_DIFFERENT_ACCOUNT}';
                        } else {
                            productService.isloading(true);
                            $scope.selectedRequestItem['deadline'] = $scope.convertToDate($scope.selectedRequestItem['deadline']);

                            $scope.assignAccountToRequest(accWrapper.rbi[$scope.nameSpace + $scope.Account], '').then(function(result) {
                                
                                if (result.startsWith('success')) {
                                    var data = {};
                                    var tempMsg = '{!$Label.Assign_Hit_List_Msg}';
                                    data['successMessage'] = '{!$Label.Account}' + ' ' + tempMsg.replace('@@@', accWrapper['AccountName']);
                                    data['newRRAId'] = result.split('##')[1];
                                    window.parent.postMessage(data, window.parent.location.origin);
                                } else {
                                    $scope.isError = true;
                                    $scope.errorMessage = result;
                                }
                                productService.isloading(false);
                            });
                        }
                    }

                    $scope.convertToDate = function(date) {
                        date = (date == null) ? '' : date;
                        var regEx = /^[0-9]{4}\-(0[1-9]|1[012]|[1-9])\-([1-9]|0[1-9]|[12][0-9]|3[01])/;
                        var tempDF;
                        
                        if (date == null || date == '') {
                            return '';
                        }
                        
                        if (date.match(regEx)) {
                            tempDF = date.split('-');

                            if (tempDF.length < 3 || !$scope.checkDate(tempDF[2], tempDF[1], tempDF[0])) {
                                return null;
                            }
                            return date;
						}

	               		try {
	               			var tempDF = $scope.dateFormat;
	               			var tempDate = date + '';
	               			tempDF = tempDF.split(/[./-]/g);
	               			tempDate = tempDate.split(/[./-]/g);
	               			var month = (tempDF.indexOf('MM') == -1) ? tempDate[tempDF.indexOf('M')] :tempDate[tempDF.indexOf('MM')];
	               			var day = (tempDF.indexOf('dd') == -1) ? tempDate[tempDF.indexOf('d')] :tempDate[tempDF.indexOf('dd')];
	               			var modDate = new Date(tempDate[tempDF.indexOf('yyyy')], month - 1, day);
	               			var dateString = modDate.getFullYear() + '-' + (modDate.getMonth() + 1) + '-' + modDate.getDate();
		              	 	
	              	 		if (modDate != 'Invalid Date' && dateString.indexOf('NaN') == -1 ) {
	              	 			
	              	 			if (month.length > 2 || day.length > 2 || tempDate[tempDF.indexOf('yyyy')].length != 4 || !$scope.checkDate(day, month, tempDate[tempDF.indexOf('yyyy')])) {
		              	 			return null;
		              	 		}
	     				 		return dateString;
	     				 	} else {
	     				 		return null;
	     				 	}
	     				} catch (e) {
	     					return null;
	     				}
	                }
	                
	                $scope.checkDate = function(day, month, year) {
	                	var returnval = true;
                        
                        if (day == null || day.trim() == '' || month == null || month.trim() == '' || year == null || year.trim() == ''
                                || parseInt(day) == NaN || parseInt(month) == NaN || parseInt(year) == NaN) {
                            returnval = false;
                        } else {
                            day = parseInt(day);
                            month = parseInt(month);
                            year = parseInt(year);
                        }
					    returnval = (month < 1 || month > 12 || day < 1) ? false : returnval;
					    var days = (month == 2) ? ((year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) ? 29 : 28) : (month == 4 || month == 6 || month == 9 || month == 11) ? 30 : 31;
					    returnval = (day > days) ? false : returnval;
				        return returnval;
	                }
                    
                    //REF-2294
                    $scope.openTypePopup = function(accWrap, $event) {
                        
                        if (accWrap.isInterviewType) {
                            $scope.isContentInterviewType = true;
                        } else {
                            $scope.isContentInterviewType = false;
                        }
                        $scope.contentIcon = '';
                        $scope.showTypeCustomModal = true;
                        $scope.customContentFields = accWrap.customContentFields;
                        $scope.isCustomContent = accWrap.refContent[$scope.nameSpace + $scope.Custom_Reference_Content];
                        $scope.contentTitle = accWrap.refContent[$scope.nameSpace + $scope.Title];
                        $scope.customContentFieldsList = accWrap.customContentFieldsList;
                        $scope.contentType = accWrap.fileType;
                        $scope.contentId = accWrap.refContent.Id;
                        $scope.contentAccount = accWrap.accountName;
                        $scope.contentSummary = accWrap.refContent[$scope.nameSpace + $scope.Summary];
                        $scope.contentURL = accWrap.refContent[$scope.nameSpace + $scope.Content_URL] + (accWrap.refContent[$scope.nameSpace + 'Content_URL2__c'] == null ? '' : accWrap.refContent[$scope.nameSpace + 'Content_URL2__c']);
                        $scope.contentSize = (accWrap.contentVersion['ContentSize'] != null) ? accWrap.contentVersion['ContentSize'] + ' K' : '0 K'; 
                        $scope.orgWebsite = accWrap.orgWebsite;
                        $scope.orgDescription = accWrap.orgDescription;
                        $scope.speakerInfo = accWrap.speakerInfo;
                        $scope.photo = accWrap.photo;
                        $scope.videoList = accWrap.videoWrapList;
                        $scope.showTypePopup = false;
                        $scope.showBackContentDrop = false;
                        
                        if ($scope.isContentInterviewType) {    
                            $scope.showTypePopup = true;
                            $scope.showBackContentDrop = true; 
                            $scope.showTypeCustomModal = false;                  
                            $(".content-type-panel").css("top", $($event.target).offset().top - 326);
                            $(".content-type-panel").css("left", $($event.target).offset().left + 38);
                        } else {
                            $scope.tempValshowRefContentModal = $scope.showRefContentModal;
                            $scope.showRefContentModal = false;
                        }
                    }
                    
                    $scope.showBackContentDropPopover = function() { 
                        $scope.showTagsPopup = false;
                        $scope.showTypePopup = false;
                        $scope.showBackContentDrop = false;                                       
                    }
                });

                function accCountFunction() {
                    rfSearchCall(accTotlCount, viewedAccTotalCount);
                }
            </script>
        </head>
        <!-- Message --> 
        <apex:pageMessages id="pgmsgId"/>
        <body>
            <div class="slds">
                <div ng-controller="AccountBlockController" ng-init="intialFunction();" ng-cloak="ng-cloak"  
                	ng-class="{'slds-ref-search-sticky-header-block' : showMoreRecordsView, 'slds-ref-search-account-block' : showMoreRecordsView}">
                    <div style="height: 65px" ng-show="scrolledBelowSLDS"></div>
                    <div class="slds-page-header" role="banner">
                        <div class="slds-grid slds-wrap">
                            <div class="slds-size--1-of-1 slds-medium-size--1-of-3 slds-large-size--1-of-3">
                                <h1 class="slds-text-heading--medium slds-align-middle" title="{!$Label.Accounts}">
                                    {!$Label.Accounts}
                                </h1>
                            </div>
                            <div ng-show="!isRefMatch" class="slds-size--1-of-1 slds-medium-size--2-of-3 slds-large-size--2-of-3">
                                <div class="slds-button-group slds-float--right" role="group">
                                    <a class="slds-button slds-button--neutral" ng-click="backToOpportunity()" ng-show="opportunityId.length > 0" style="line-height: 1.5;padding: 6px;">{!RIGHT($Label.Back_to_Opportunity,20)}</a>
                                    <a class="slds-button slds-button--neutral" ng-click="selectAndContinue()" style="line-height: 1.5;padding: 6px;" ng-show="(leadId == '' && !fromLead && accounts.length > 0) || (allowRequestFromLead && leadId != '' && fromLead && accounts.length > 0)"><span id="accSelectContinue">{!$Label.Select_Continue}</span></a>
                                    <a class="slds-button slds-button--neutral" ng-click="openCWSAModal()" style="line-height: 1.5;padding: 6px;" ng-show="!isBasicEdition && ((leadId == '' && !fromLead) || (allowRequestFromLead && leadId != '' && fromLead))">{!$Label.Continue_without_selecting_Accounts}</a>
                                    <a class="slds-button slds-button--neutral" ng-click="exportData()" style="line-height: 1.5;padding: 6px;" ng-show="!isBasicEdition && showExportButton && accounts.length > 0">{!$Label.Export_Data}</a>
                                    <a class="slds-button slds-button--neutral" ng-click="backToRefsearchPage()" style="line-height: 1.5;padding: 6px;" ng-show="!showMoreAccount && accounts.length > 5">{!$Label.Back_to_RF_Search}</a>
                                </div>
                            </div>      
                            <div class="slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-1">
                                <div class="slds-grid slds-wrap">
                                    <div class="slds-size--1-of-5 slds-medium-size--1-of-8 slds-large-size--2-of-10">
                                        <p class="slds-text-body--small slds-align-middle">
                                            Showing {{accounts.length}} of {{totalAccounts}} Results
                                        </p>
                                    </div>
                                    <div class="slds-size--2-of-5 slds-medium-size--3-of-8 slds-large-size--2-of-10">
                                        <a style="cursor: pointer; margin: 1%;" ng-show="showMoreAccount" ng-click="showMoreAccounts();">
                                            <span id="accShowMore">{!$Label.Show_More}</span>
                                        </a>
                                        <a id="accViewMore" style="cursor: pointer; margin: 1%;"
                                                ng-show="!showMoreAccount && accounts.length < totalAccounts"
                                                ng-click="more();"
                                                ng-class="{disabledAnchorTag: fetchingData}">
                                            {!$Label.View_More}
                                        </a>
                                        <a style="cursor: pointer; margin: 1%;" ng-click="backToRefsearchPage()" ng-show="!showMoreAccount && accounts.length > 5 && isRefMatch">{!$Label.Back_to_RF_Search}</a>
                                    </div>
                                    <div ng-show="isRefMatch && projectType != 'Candidate'" class="slds-size--2-of-5 slds-medium-size--4-of-8 slds-large-size--6-of-10">
                                        <div style="text-align: right" class="slds-form-element__control">
                                            <label class="slds-radio">
                                                <input type="radio" id="activeRadio" ng-change="changeReferenceStatus()" name="refStatusRadio" value="Active" ng-model="selectedRefStatus" />
                                                <span class="slds-radio--faux"></span>
                                                <span for="activeRadio" class="slds-form-element__label">Active</span>
                                            </label>
                                            <label class="slds-radio">
                                                <input type="radio" id="inactiveRadio" ng-change="changeReferenceStatus()" name="refStatusRadio" value="Inactive" ng-model="selectedRefStatus" />
                                                <span class="slds-radio--faux"></span>
                                                <span for="inactiveRadio" class="slds-form-element__label">Inactive</span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="slds-notify slds-notify--alert slds-theme--inverse-text slds-theme--alert-texture" role="alert" ng-show="accounts.length == 0">
                        {!$Label.No_matches_found}
                    </div>
                    <div class="slds-scrollable--x slds-scrollable--y" ng-show="accounts.length > 0" style="max-height: auto;" ng-class="isRefMatch && !(accounts.length > 5) ? 'minDivHeight' :  isRefMatch && (accounts.length > 5) ? 'addOverflow':''">
                        <table id="accountTable" class="slds-table slds-table--bordered slds-max-medium-table--stacked-horizontal slds-ref-search-records-table">
                            <thead>
                                <tr class="slds-text-heading--label">
                                    <th class="slds-row-select selection-checkbox" scope="col" ng-show="((leadId == '' && !fromLead) || (allowRequestFromLead && leadId != '' && fromLead)) && !isRefMatch">
                                        <label class="slds-checkbox" for="select-all">
                                            <input type="checkbox" id="select-all" ng-click="selectAll()" ng-model="isAllAccountSelected" />
                                            <span class="slds-checkbox--faux" id="accSelection"></span>
                                            <span class="slds-form-element__label slds-assistive-text">select all</span>
                                        </label>
                                    </th>
                                    <th scope="col" ng-show="isRefMatch" class="leftPaddingCustom" style="min-width: 20px; max-width: 68px;">
                                        <span class="slds-truncate">&nbsp;</span>
                                    </th>
                                    <th scope="col" ng-repeat="column in columnsList | orderBy:'displayOrder'" ng-class="{'account-name' : (column.name == 'AccountName'),
                                    		'acc-ref-content' : ((column.name == 'ReferenceContent') && {!showRelatedRefContent}),
                                    		'col-notice' : (column.name == 'Notice'), 'col-about' : (column.name == 'About'), 
                                    		'col-tag' :  (column.name == 'Tags'), 'col-owner': ((column.name == 'Owner') && showOwner)}"
                                    		ng-if="(column.isSelected || !accountColumnsSaved || allAccountColsHidden) 
                                    			&& (!isRefMatch || (isRefMatch && column.name != 'ReferenceContent'))">
                                        <span class="slds-truncate" id="{{'col' + $index}}">
                                            <div ng-show="(column.name == 'AccountName')">
                                                {{column.label}}
                                            </div>
                                            
                                            <div ng-show="(column.name == 'ReferenceContent') && {!showRelatedRefContent}" style="text-align: center;">
                                                {{column.label}}
                                            </div>
                                            
                                            <div ng-show="(column.name == 'Notice')" style="text-align: center;">
                                                {{column.label}}
                                            </div>
                                            <div ng-show="(column.name == 'About')" style="text-align: center;">
                                                {{column.label}}
                                            </div>
                                            
                                            <div ng-show="(column.name == 'Tags')" style="text-align: center;">
                                                {{column.label}}
                                            </div>
                                            <div ng-show="(column.name == 'Owner') && showOwner">
                                                {{column.label}}
                                            </div>                                            
                                        </span>
                                    </th>
                                    <th scope="col" style="text-align: center;" ng-show="isRefMatch" class="col-assigned-count">
                                        <span class="slds-truncate">
                                            {!$Label.Assigned}
                                        </span>
                                    </th>
                                    <th scope="col" style="text-align: center;" ng-show="isRefMatch" class="col-hitlist-count">
                                        <span class="slds-truncate">
                                            {!$ObjectType.Hit_List__c.Label}
                                        </span>
                                    </th>
                                    <th scope="col" ng-show="isRefMatch" style="width: 60px;">
                                        <span class="slds-truncate">
                                            &nbsp;
                                        </span>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="slds-hint-parent" ng-repeat="accWrap in accounts|orderBy:orderByField:reverseSort">
                                    <td class="slds-row-select" ng-show="((leadId == '' && !fromLead) || (allowRequestFromLead && leadId != '' && fromLead)) && !isRefMatch">
                                        <label class="slds-checkbox">
                                            <input type="checkbox" ng-show="false" ng-change="selectDeselect(accWrap)" ng-model="accWrap.isSelected" />
                                            <span class="slds-checkbox--faux"></span>
                                        </label>
                                    </td>
                                    <td role="row" ng-show="isRefMatch" class="leftPaddingCustom">
                                        <span ng-show="accWrap.isAlreadyHit" class="hitIcon">H</span>
                                    </td>
                                    <td ng-repeat="column in columnsList | orderBy:'displayOrder'" data-label="{{column.label}}" role="row"
                                    	ng-if="(column.isSelected || !accountColumnsSaved || allAccountColsHidden) 
                                    			&& (!isRefMatch || (isRefMatch && column.name != 'ReferenceContent'))">
                                        <div ng-show="(column.isSelected && column.name == 'AccountName')
                                                                || (!accountColumnsSaved && column.name == 'AccountName')
                                                                || (allAccountColsHidden && column.name == 'AccountName')" class="custom-ellipsis-class">
                                            <a title="{{accWrap.AccountName}}" style="cursor: pointer;" href="/{{accWrap.rbi[nameSpace + Account]}}" target="_blank">
                                                {{accWrap.AccountName}}
                                            </a>
                                        </div>
                                        
                                        <div ng-show="((column.isSelected && column.name == 'ReferenceContent')
                                                            || (!accountColumnsSaved && column.name == 'ReferenceContent')
                                                            || (allAccountColsHidden && column.name == 'ReferenceContent')) && !isRefMatch && {!showRelatedRefContent}" style="text-align: center;">
                                            <div  ng-show="{{accWrap.refContentCount}} < 9">
                                                <img src="{{resource + contentTypeMap[accWrap.refContentCount]}}" ng-click="getRefContent(accWrap.rbi[nameSpace + Account],accWrap.refContentCount)" alt="Reference Content Count" style="cursor:pointer; max-width: 20px;"/>
                                            </div> 
                                            
                                            <div  ng-show="{{accWrap.refContentCount}} >= 10">
                                                <img src="{!URLFOR($Resource.RFSearch_Icons, 'Content_Count_' + TEXT(10) + '.svg')}" ng-click="getRefContent(accWrap.rbi[nameSpace + Account],accWrap.refContentCount)" alt="Reference Content Count" style="cursor:pointer; max-width: 20px;"/>
                                            </div>                                                               
                                        </div>
                                        
                                        <div  style="text-align: center;" ng-show="(column.isSelected && column.name == 'Notice')
                                                            || (!accountColumnsSaved && column.name == 'Notice')
                                                            || (allAccountColsHidden && column.name == 'Notice')">
                                            <span class="slds-truncate" ng-show="accWrap.rbi[nameSpace+Account_Level_RUL] == true">
                                                <div ng-show="accWrap.rbi[nameSpace+RUL_Limit_Reached] == true">
                                                    <span class="slds-badge slds-theme--error">{!$Label.Limit_Reached}</span>
                                                </div>
                                            </span>
                                            <span class="slds-truncate" ng-show="accWrap.rbi[nameSpace+Account_Level_RUL] == false">
                                                <div ng-show="accWrap.rbi[nameSpace+Is_Contact_Limit_Reached] == true">
                                                    <span class="slds-badge slds-theme--error">{!$Label.Limit_Reached}</span>
                                                </div>
                                            </span>
                                            <span class="slds-truncate" ng-show="(accWrap.rbi[nameSpace + Referenceability_Status] == 'Caution' && 
                                            										!((accWrap.rbi[nameSpace+Account_Level_RUL] && accWrap.rbi[nameSpace+RUL_Limit_Reached])
                                            											|| (accWrap.rbi[nameSpace+Is_Contact_Limit_Reached])))">
                                                <span class="slds-badge slds-theme--warning" style="color: WHITE">{!$Label.Caution}</span>
                                            </span>
                                        </div>
                                        <!--  About Section  -->
                                        <div id="accountAboutImg" style="text-align: center;">
                                            <img ng-show="(column.isSelected && column.name == 'About') || (!accountColumnsSaved && column.name == 'About')
                                                            || (allAccountColsHidden && column.name == 'About')" class="type-About" ng-click="openAboutPopup(accWrap, $event)"
                                                            src="{!URLFOR($Resource.RFSearch_Icons,'Info_Icon.svg')}"  style="max-width: 26px; cursor: pointer;"/>
                                        </div>               
                                        <!--  End About Section  -->
                                        
                                        <!--  Tags Section  -->
                                        <div style="text-align: center;">
                                        <img ng-show="(column.isSelected && column.name == 'Tags') || (!accountColumnsSaved && column.name == 'Tags')
                                                            || (allAccountColsHidden && column.name == 'Tags')" class="type-Tag" ng-click="openTagsPopup(accWrap, $event)"
                                                            src="{!URLFOR($Resource.RFSearch_Icons,'Tags.svg')}" style="max-width: 29px; cursor: pointer;"/>
                                        </div>
                                        <!--  End Tags Section  -->
                                        
                                        <a ng-show="showOwner && ((column.isSelected && column.name == 'Owner')
                                                            || (!accountColumnsSaved && column.name == 'Owner')
                                                            || (allAccountColsHidden && column.name == 'Owner'))" style="cursor: pointer;" href="/{{accWrap.ownerId}}" target="_blank">
                                            {{accWrap.Owner}}
                                        </a>
                                    </td>
                                    <td role="row" ng-show="isRefMatch" style="text-align: center;">
                                        <span class="slds-truncate">
                                            {{accWrap.assignCount}}
                                        </span>
                                    </td>
                                    <td role="row" ng-show="isRefMatch" style="text-align: center;">
                                        <span class="slds-truncate">
                                            {{accWrap.hitCount}}
                                        </span>
                                    </td>
                                    <td role="row" ng-show="isRefMatch" style="text-align: center;">
                                        <span class="slds-truncate">
                                            <div class="slds-dropdown-trigger slds-is-open">
			                                    <button class="slds-button slds-button--icon-border-filled slds-button--icon-x-small">
			                                        <svg class="slds-button__icon slds-button__icon--hint">
			                                            <use xlink:href="{!URLFOR($Resource.LightningCSS, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
			                                        </svg>
			                                    </button>
			                                    <div class="slds-dropdown slds-dropdown--right">
			                                        <ul class="dropdown__list">
			                                            <li class="slds-dropdown__item">
                                                            <a ng-click="hitAccount(accWrap)" ng-class="{'disabledAnchorTag' : accWrap.isAlreadyHit}">
			                                                    {!$Label.Hit}
			                                                </a>
                                                        </li>
			                                            <li ng-click="assignAccount(accWrap)" class="slds-dropdown__item">
                                                            <a>{!$Label.Assign}</a>
                                                        </li>
			                                        </ul>
			                                    </div>
			                                </div>
                                        </span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                        <!--    About Section  REF-1377  -->
                        <div ng-show="showAboutPopup" class="slds-popover slds-popover--panel slds-nubbin--right-top account-about-panel not-hide" role="dialog">
                            <button class="slds-button slds-button--icon-container" ng-click="showBackDropPopover()" style="cursor: pointer; position: absolute; right: 0;">
                                <svg aria-hidden="true" class="slds-button__icon">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                </svg>
                            </button>   
                            <div class="slds-popover__header not-hide">
                                <div class="slds-media slds-media--center slds-m-bottom--small not-hide">
                                    <div class="slds-media__body not-hide" style="font-size: 17px; margin-right: 9px;">                                       
                                        {{accountAboutName}}
                                    </div>
                                </div>
                                <div class="slds-grid slds-wrap not-hide">
                                    <footer class="slds-grid slds-wrap slds-grid_pull-padded">
                                        <div class="slds-p-horizontal_small slds-size_1-of-2 slds-p-bottom_x-small">
                                            <dl>
                                            <dt>
                                                <p class="slds-text-title_caps slds-truncate" title="{!$Label.USE_HISTORY}" style="color: #556886;">{!$Label.USE_HISTORY}</p>
                                            </dt>
                                            <dd>
                                                <p class="slds-truncate" title="{!$Label.Last}&nbsp;{{rulPeriodLen}}&nbsp;{!$Label.days}">{!$Label.Last}&nbsp;{{rulPeriodLen}}&nbsp;{!$Label.days} : {{lastAboutNdays}}</p>
                                                <p class="slds-truncate" title="{!$Label.T_Last_Used}">{!$Label.T_Last_Used}   : {{lastAboutUsed}}</p>
                                            </dd>
                                            <dt ng-show="summary.length > 0">
                                                <p class="slds-text-title_caps slds-truncate" title="{!$Label.summary}" style="color: #556886;">{!$Label.summary}</p>
                                            </dt>
                                            <dd>
                                                <pre class="slds-truncate tagAttributeAcc" style="white-space: pre-wrap!important;padding:unset;border:none;background-color: unset;font-family: unset;word-break: unset;color: #16325c;" title="{!$Label.summary}">{{summary}}</pre>                                                
                                            </dd>
                                            </dl>
                                        </div>                                        
                                    </footer>
                                </div>
                           </div> 
                        </div> 
                        <!--    End of About Section    -->
                        <!--    Tags Section  REF-1377  -->
                        <div ng-show="showTagsPopup" class="slds-popover slds-popover--panel slds-nubbin--right-top account-Tags-panel not-hide" role="dialog">
                            <button class="slds-button slds-button--icon-container" ng-click="showBackDropPopover()" style="cursor: pointer; position: absolute; right: 0;">
                                <svg aria-hidden="true" class="slds-button__icon">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                </svg>
                            </button>
                            <div class="slds-popover__header not-hide">
                                <div class="slds-media slds-media--center slds-m-bottom--small not-hide">
                                    <div class="slds-media__body not-hide" style="font-size: 17px; margin-right: 9px;">                                        
                                            {{accountAboutName}}                                        
                                    </div>
                                </div>
                                <div class="slds-grid slds-wrap not-hide">
                                    <footer class="slds-grid slds-wrap slds-grid_pull-padded">
                                        <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                            <dl>
                                            <dt>
                                                <p class="slds-text-title_caps slds-truncate" title="{!$Label.Referenceability}" style="text-transform:uppercase; color: #556886;">{!$Label.Referenceability}</p>
                                            </dt>
                                            <dd>
                                                <p class="slds-truncate tagReferencibilityAcc" title="{!$Label.Referenceability}">{{tagReferencability}}</p>                                                
                                            </dd>
                                            </dl>
                                        </div>   
                                          
                                        <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                            <dl>
                                            <dt>
                                                <p class="slds-text-title_caps slds-truncate" title="{!$Label.Attributes}" style="text-transform:uppercase; color: #556886;">{!$Label.Attributes}</p>
                                            </dt>
                                            <dd>
                                                <p class="slds-truncate tagAttributeAcc" title="{!$Label.Attributes}">{{tagAttributes}}</p>                                                
                                            </dd>
                                            </dl>
                                        </div>                                  
                                    </footer>
                                </div>
                           </div> 
                        </div> 
                        <!--    End of Tags Section    -->

                        <div class=" ng-scope popoverAccBackdrop" ng-click="showBackDropPopover()" ng-show="showBackDrop"></div>   

                        <div ng-show="showRefContentModal">
                            <div class="slds-modal slds-fade-in-open slds-modal--large" aria-hidden="false" role="dialog">
                                <div class="slds-modal__container">
                                    <div class="slds-modal__header">
                                        <button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="closeRefContentModal()">
                                            <img id="close-Image" src="{!URLFOR($Resource.LightningCSS, '/assets/icons/action/close_120.png')}" alt="close" height="20" width="20" />
                                            <span class="slds-assistive-text">Close</span>
                                        </button>
                                        <h2 class="slds-text-heading--medium">{!$Label.Related_Content}</h2>
                                    </div>
                                    <div class="slds-modal__content slds-p-around--medium">
                                        <table class="slds-table slds-table--bordered slds-max-medium-table--stacked-horizontal">
                                            <thead>
                                                <tr class="slds-text-heading--label">
                                                    <th class="slds-row-select" scope="col">
                                                        <label class="slds-checkbox">
                                                            <input type="checkbox" ng-model="allRefContentsSelected" ng-change="selectAllRefContent()" />
                                                            <span class="slds-checkbox--faux"></span>
                                                        </label>
                                                    </th>
                                                    <th scope="col">
                                                        <span class="slds-truncate">
                                                            {!$Label.Share}
                                                        </span>
                                                    </th>
                                                    <th scope="col">
                                                        <span class="slds-truncate">
                                                            {!$ObjectType.Reference_Content__c.fields.Title__c.Label}
                                                        </span>
                                                    </th>
                                                    <!-- REF-2294 -->
                                                    <th scope="col">
                                                        <span class="slds-truncate">
                                                        </span>
                                                    </th>
                                                    <th scope="col">
                                                        <span class="slds-truncate">
                                                            {!$ObjectType.Reference_Content__c.fields.Reference_Content_Type__c.Label}
                                                        </span>
                                                    </th>
                                                    <th scope="col">
                                                        <span class="slds-truncate">
                                                            {!$ObjectType.Reference_Content__c.fields.Publish_date__c.Label}
                                                        </span>
                                                    </th>
                                                    <th scope="col">
                                                        <span class="slds-truncate">
                                                            {!$ObjectType.Reference_Content__c.fields.Language__c.Label}
                                                        </span>
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr class="slds-hint-parent" ng-repeat="refContent in accRefContentList">
                                                    <td class="slds-row-select">
                                                        <label class="slds-checkbox">
                                                            <input type="checkbox" ng-show="false"  
                                                                    ng-disabled="refContent.allowSharing || (!refContent.refContent[$scope.nameSpace + 'Custom_Reference_Content__c'] && refContent.contentVersion.Id == null)"
                                                                    ng-model="refContent.isSelected" 
                                                                    ng-change="selectRefContent(refContent.refContentId, refContent)" />
                                                            <span class="slds-checkbox--faux"></span>
                                                        </label>
                                                    </td>
                                                    <th data-label="{!$Label.Share}" role="row">
                                                        <!-- REF-2294 -->
                                                        <div style="margin-left: 20%; width: 12px; height: 12px; border-radius: 50%; background: green" ng-show="!refContent.allowSharing"></div>
                                                        <div style="margin-left: 20%; width: 12px; height: 12px; border-radius: 50%; background: red" ng-show="refContent.allowSharing"></div>
                                                    </th>
                                                    <td style="min-width: 200px;max-width: 250px; overflow: hidden; text-overflow: ellipsis;" data-label="{!$Label.Title}"> 
                                                       <a href="/{{refContent.refContentId}}" target="_blank" >
                                                            {{refContent.title}}
                                                         </a> 
                                                    </td>
                                                    <!-- REF-2294 -->
                                                    <td style="max-width:30px;">
                                                         <img ng-show="refContent.refContent[nameSpace + Custom_Reference_Content]" class="type-icon"
                                                              ng-click="openTypePopup(refContent, $event)"
                                                              src="{{customContentSymbol}}" style="width: 20px;"/>
                                        				<img ng-show="!refContent.refContent[nameSpace + Custom_Reference_Content]" class="type-icon"
                                                             ng-click="openTypePopup(refContent, $event)"
                                                             src="{{resourceLightningCSS + doctypeMap[refContent.fileType]}}" style="width: 20px;"/>
                                                    </td>
                                                    <td data-label="{!$Label.Type}">
                                                        {{refContent.refContentType}}
                                                    </td>
                                                    <td data-label="{!$Label.Publish_Date}">
                                                        {{refContent.publishDate}}
                                                    </td>
                                                    <td data-label="{!$Label.Language}">
                                                        {{refContent.language}}
                                                    </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                    <div class="slds-modal__footer">
                                        <button class="slds-button slds-button--neutral" ng-click="downloadRefContentForAccount()">{!$Label.Download}</button>
                                        <button class="slds-button slds-button--neutral" ng-click="shareRefContentIds()">{!$Label.Share}</button>
                                    </div>
                                </div>
                            </div>
                            <div ng-hide="isRefMatch" class="slds-backdrop slds-backdrop--open"></div>
                        </div>
                        <div ng-show="showTypeCustomModal">
                            <div aria-hidden="false" role="dialog" class="slds-modal slds-fade-in-open" >
                                <div class="slds-modal__container">
                                    <div class="slds-modal__header">
                                        <button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="showRefContentModal = tempValshowRefContentModal;showTypeCustomModal = false;">
                                            <img id="close-Image" src="{!URLFOR($Resource.LightningCSS, '/assets/icons/action/close_120.png')}" alt="close" height="20" width="20"/>
                                        </button>
                                        <h2 class="slds-text-heading--medium">{{contentTitle}}</h2>
                                    </div>
                                    <div class="slds-modal__content slds-p-around--medium" > 
                                        <div class="slds-form-element" ng-show="!isCustomContent && !isContentInterviewType">
                                            <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                                <dl class="not-hide">
                                                    <dt class="not-hide">
                                                        <p class="slds-text-heading--label slds-truncate not-hide">
                                                            {!$Label.Type}
                                                        </p>
                                                    </dt>
                                                    <dd class="slds-truncate not-hide">
                                                        {{contentType}}
                                                    </dd>
                                                </dl>
                                            </div>
                                            <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                                <dl class="not-hide">
                                                    <dt class="not-hide">
                                                        <p class="slds-text-heading--label slds-truncate not-hide">
                                                            {!$Label.Size}
                                                        </p>
                                                    </dt>
                                                    <dd class="slds-truncate not-hide" ng-show="contentSize != ''">
                                                        {{contentSize}}
                                                    </dd>
                                                </dl>
                                            </div>
                                        </div>
                                        <div class="slds-form-element" ng-show="isCustomContent && !isContentInterviewType">
                                            <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide" ng-repeat="item in customContentFieldsList">
                                                <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                                    <dl class="not-hide">
                                                        <dt class="not-hide">
                                                            <p class="slds-text-heading--label slds-truncate not-hide">
                                                                {{item.label}}
                                                            </p>
                                                        </dt>
                                                        <dd class="slds-truncate not-hide">
                                                            <span class="slds-truncate not-hide" ng-if="item.type == 'BOOLEAN'" >
                                                                <input type="checkbox" name="options" value="on" ng-checked="item.value == 'true' || item.value == 'TRUE'" ng-disabled="true"/>
                                                            </span>
                                                            <p class="slds-truncate not-hide" ng-if="item.type != 'BOOLEAN'" ng-bind="item.value">
                                                            </p>
                                                        </dd>
                                                    </dl>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="slds-form-element" ng-show="!isContentInterviewType">
                                            <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                                <dl class="not-hide">
                                                    <dt class="not-hide">
                                                        <p class="slds-text-heading--label slds-truncate not-hide">
                                                            {!$Label.Summary}
                                                        </p>
                                                    </dt>
                                                    <dd class="slds-truncate not-hide">
                                                        {{contentSummary}}
                                                    </dd>
                                                </dl>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="slds-modal__footer">
                                        <div style="float:right;">
                                            <div class="slds-size--1-of-1 not-hide" ng-show="!isCustomContent && !isContentInterviewType " style="width: unset; float: left;">
                                                <a class="slds-button slds-button--neutral" ng-show="contentType != 'LINK' && contentType != 'UNKNOWN'" ng-click="downloadRefContentFromPopup(contentId)">{!$Label.Download}</a>
                                                <a class="slds-button slds-button--neutral" ng-show="contentType == 'LINK'" ng-click="openLinkURL(contentId, contentURL)">{!$Label.Open}</a>
                                                <a class="slds-button slds-button--neutral" href="/{{contentId}}" ng-show="isViewDetailsUpdateable" target="_blank" ng-click="openDetailPage(contentId)">{!$Label.View_Details}</a>
                                            </div>
                                            <div class="slds-size--1-of-1 not-hide" ng-show="isCustomContent && !isContentInterviewType && isViewDetailsUpdateable" style="width: unset; float: left;">
                                                <a class="slds-button slds-button--neutral" href="/{{contentId}}" target="_blank" ng-click="openDetailPage(contentId)">{!$Label.View_Details}</a>
                                            </div>
                                            
                                            <button class="slds-button slds-button--neutral" ng-click="showRefContentModal = tempValshowRefContentModal;showTypeCustomModal = false;" style="margin-left: 8px;">{!$Label.Cancel}</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="slds-backdrop slds-backdrop--open"></div>
                        </div>
                        
                        <div class="slds-notify_container" ng-show="showStageErrorMessage1">
                            <div class="slds-notify slds-notify--toast slds-theme--error" role="alert" style="position: fixed; top: 0; width: 50%; z-index: 999; left: 50%; margin-left: -25%;">
                                <span class="slds-assistive-text">Error</span>
                                <button class="slds-button slds-notify__close slds-button--icon-inverse" title="Close" ng-click="showStageErrorMessage1 = false">
                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                                        <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                    </svg>
                                    <span class="slds-assistive-text">Close</span>
                                </button>
                                <div class="slds-notify__content slds-grid">
                                    <svg class="slds-icon slds-icon--small slds-m-right--small slds-col slds-no-flex" aria-hidden="true">
                                        <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#warning')}"></use>
                                    </svg>
                                    <div class="slds-col slds-align-middle">
                                        <h2 class="slds-text-heading--small" style="font-size: 16px">{{stageErrorMessage1}}</h2>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="slds-notify_container" ng-show="showLimitReachedMsg">
                            <div class="slds-notify slds-notify--toast" role="alert" style="position: fixed; top: 0; width: 50%; z-index: 999; left: 50%; margin-left: -25%;">
                                <span class="slds-assistive-text">Info</span>
                                <button class="slds-button slds-notify__close slds-button--icon-inverse" title="Close" ng-click="showLimitReachedMsg = false">
                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                                        <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                    </svg>
                                    <span class="slds-assistive-text">Close</span>
                                </button>
                                <div class="slds-notify__content">
                                    <h2 class="slds-text-heading--small" style="font-size: 16px">{!$Label.Limit_Reached_Message}</h2>
                                </div>
                            </div>
                        </div>
                        <div class="slds-notify_container" ng-show="showMinAccountMsg">
                            <div class="slds-notify slds-notify--toast" role="alert" style="position: fixed; top: 0; width: 50%; z-index: 999; left: 50%; margin-left: -25%;">
                                <span class="slds-assistive-text">Info</span>
                                <button class="slds-button slds-notify__close slds-button--icon-inverse" title="Close" ng-click="showMinAccountMsg = false">
                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                                        <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                    </svg>
                                    <span class="slds-assistive-text">Close</span>
                                </button>
                                <div class="slds-notify__content">
                                    <h2 class="slds-text-heading--small" style="font-size: 16px">{!$Label.Select_Atleast_One_Account}</h2>
                                </div>
                            </div>
                        </div>
                        <div ng-show="showMaxAccountRequestsMsg">
                            <div role="alertdialog" tabindex="-1" aria-labelledby="prompt-heading-id" aria-describedby="prompt-message-wrapper" class="slds-modal slds-fade-in-open slds-modal--prompt">
                                <div class="slds-modal__container">
                                    <div class="slds-modal__header slds-theme--error slds-theme--alert-texture">
                                        <button class="slds-button slds-modal__close slds-button--icon-inverse" title="Close" style="display: block" ng-click="showMaxAccountRequestsMsg = false">
                                            <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                                                <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                            </svg>
                                            <span class="slds-assistive-text">Close</span>
                                        </button>
                                        <h2 class="slds-text-heading--medium" id="prompt-heading-id">{!$Label.Limit_Reached}</h2>
                                    </div>
                                    <div class="slds-modal__content slds-p-around--medium">
                                        <div>
                                            <p>{{maxAccountRequestsMsg}}</p>
                                        </div>
                                    </div>
                                    <div class="slds-modal__footer slds-theme--default">
                                        <button class="slds-button slds-button--neutral" ng-click="showMaxAccountRequestsMsg = false">{!$Label.Ok}</button>
                                    </div>
                                </div>
                            </div>
                            <div ng-hide="isRefMatch" class="slds-backdrop slds-backdrop--open"></div>
                        </div>
                        <div ng-show="showCWSAModal">
                            <div role="alertdialog" tabindex="-1" aria-labelledby="prompt-heading-id" aria-describedby="prompt-message-wrapper" class="slds-modal slds-fade-in-open slds-modal--prompt">
                                <div class="slds-modal__container">
                                    <div class="slds-modal__header slds-theme--warning slds-theme--alert-texture">
                                        <button class="slds-button slds-modal__close slds-button--icon-inverse" title="Close" style="display: block" ng-click="showCWSAModal = false">
                                            <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                                                <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                            </svg>
                                            <span class="slds-assistive-text">Close</span>
                                        </button>
                                        <h2 class="slds-text-heading--medium" id="prompt-heading-id">{!$Label.Continue_without_selecting_Accounts}</h2>
                                    </div>
                                    <div class="slds-modal__content slds-p-around--medium">
                                        <div>
                                            <p>{!$Label.Keep_Discard_Message}</p>
                                        </div>
                                    </div>
                                    <div class="slds-modal__footer slds-theme--default">
                                        <button class="slds-button slds-button--neutral" ng-click="discardAccIds()">{!$Label.Discard}</button>
                                        <button class="slds-button slds-button--brand" ng-click="sendAccIds()">{!$Label.Keep}</button>
                                    </div>
                                </div>
                            </div>
                            <div ng-hide="isRefMatch" class="slds-backdrop slds-backdrop--open"></div>
                        </div>
                        <div ng-show="isDownloadUnsuccessful">
                            <div class="slds-modal slds-fade-in-open" aria-hidden="false" role="dialog">
                                <div class="slds-modal__container">
                                    <div class="slds-modal__header slds-modal__header--empty">
                                        <button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="closeDownloadNotification()">
                                            <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                                                <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                            </svg>
                                        </button>
                                    </div>
                                    <div class="slds-modal__content slds-p-around--medium" ng-show="showNoFileAvailableMsg">
                                        No file available for download.
                                    </div>
                                    <div class="slds-modal__content slds-p-around--medium" ng-show="showDownloadError">
                                        Download Unsuccessful. Please try again.
                                    </div>
                                    <div class="slds-modal__footer">
                                        <button class="slds-button slds-button--neutral slds-button--brand" ng-click="closeDownloadNotification()">{!$Label.Ok}</button>
                                    </div>
                                </div>
                            </div>
                            <div ng-hide="isRefMatch" class="slds-backdrop slds-backdrop--open"></div>
                        </div>
                        <div class="slds-notify_container" ng-show="showSelectContentMsg">
                            <div class="slds-notify slds-notify--toast" role="alert" style="position: fixed; top: 0; width: 50%; z-index: 999; left: 50%; margin-left: -25%;">
                                <span class="slds-assistive-text">Info</span>
                                <button class="slds-button slds-notify__close slds-button--icon-inverse" title="Close" ng-click="showSelectContentMsg = false">
                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                                        <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                    </svg>
                                    <span class="slds-assistive-text">Close</span>
                                </button>
                                <div class="slds-notify__content">
                                    <h2 class="slds-text-heading--small" style="font-size: 16px">{!$Label.Select_Atleast_One_Content}</h2>
                                </div>
                            </div>
                        </div>
                        <div class="slds-notify_container" ng-show="showLinkMsg">
                            <div class="slds-notify slds-notify--toast" role="alert" style="position: fixed; top: 0; width: 50%; z-index: 999; left: 50%; margin-left: -25%;">
                                <span class="slds-assistive-text">Info</span>
                                <button class="slds-button slds-notify__close slds-button--icon-inverse" title="Close" ng-click="showLinkMsg = false">
                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                                        <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                    </svg>
                                    <span class="slds-assistive-text">Close</span>
                                </button>
                                <div class="slds-notify__content">
                                    <h2 class="slds-text-heading--small" style="font-size: 16px">{!$Label.Link_Content_Message}</h2>
                                </div>
                            </div>
                        </div>
                        <div class="slds-notify_container" ng-show="isError">
                            <div class="slds-notify slds-notify--toast slds-theme--error" role="alert" style="position: fixed; top: 0; width: 50%; z-index: 999; left: 50%; margin-left: -25%;">
                                <a class="slds-button slds-notify__close slds-button--icon-inverse" title="Close" ng-click="isError = false">
                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                                        <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                    </svg>
                                </a>
                                <div class="slds-notify__content">
                                    <h2 class="slds-text-heading--small" style="font-size: 16px">{{errorMessage}}</h2>
                                </div>
                            </div>
                        </div>
                        
                        <!-- REF-2294 -->
                        <div class=" ng-scope popoverContentBackdrop" ng-click="showBackContentDropPopover()" ng-show="showBackContentDrop"></div>
                        <div ng-show="showTypePopup" class="slds-popover slds-popover--panel slds-nubbin--left-bottom content-type-panel not-hide"
                             style="z-index:9999;" role="dialog">
                            <button class="slds-button slds-button--icon-container" ng-click="showBackContentDropPopover()"
                                    style="cursor: pointer; position: absolute; right: 0;">
                                <svg aria-hidden="true" class="slds-button__icon">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                </svg>
                            </button>
                            <div class="slds-popover__header not-hide">
                                <div class="slds-media slds-media--center slds-m-bottom--small not-hide">
                                    <div class="slds-media__figure not-hide">
                                        <span class="slds-avatar slds-avatar--large not-hide" style="width: auto; height: auto;">
                                            <img ng-show="isCustomContent" class="not-hide" src="{{customContentSymbol}}" />
                                            <img ng-show="!isCustomContent" class="not-hide" src="{{resourceLightningCSS + doctypeMap[contentType]}}" />
                                        </span>
                                    </div>
                                    <div class="slds-media__body not-hide">
                                        <a href="/{{contentId}}" target="_blank" title="{{contentTitle}}" class="slds-text-heading--medium not-hide">
                                            {{contentTitle}}
                                        </a> 
                                    </div>
                                </div>
                                <div class="slds-grid slds-wrap not-hide" ng-show="isContentInterviewType">
                                    <div class="slds-col slds-size--1-of-2 slds-p-bottom--x-small not-hide">
                                        <dl class="not-hide">
                                            <dt class="not-hide">
                                                <p class="slds-text-heading--label slds-truncate not-hide">
                                                    {!$Label.Type}
                                                </p>
                                            </dt>
                                            <dd class="slds-truncate not-hide">
                                                {{contentType}}
                                            </dd>
                                        </dl>
                                    </div>
                                    <div class="slds-col slds-size--1-of-2 slds-p-bottom--x-small not-hide">
                                        <dl class="not-hide">
                                            <dt class="not-hide">
                                                <p class="slds-text-heading--label slds-truncate not-hide">
                                                    {!$Label.Account}
                                                </p>
                                            </dt>
                                            <dd ng-show="contentAccount != ''" class="slds-truncate not-hide">
                                                {{contentAccount}}
                                            </dd>
                                        </dl>
                                    </div>
                                    <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                        <dl class="not-hide">
                                            <div class="slds-text-body--regular not-hide" style="white-space: normal; word-wrap: break-word;">
                                                <div class="slds-scrollable--y not-hide">
                                                    <div class="panel-group not-hide" id="accordion" role="tablist" aria-multiselectable="true">
                                                        <div class="panel panel-default not-hide" style="background: none; border: none">
                                                            <div class="panel-heading not-hide" role="tab" id="headingInfo" style="background: none;">
                                                                <h4 class="panel-title not-hide">
                                                                    <a class="collapsed not-hide" role="button" data-toggle="collapse" data-parent="#accordion"
                                                                       href="#collapseInfo" aria-expanded="true" aria-controls="collapseInfo" style="display: block; text-decoration: none;">
                                                                        <strong class="not-hide">{!$Label.Info}</strong>
                                                                    </a>
                                                                </h4>
                                                            </div>
                                                            <div id="collapseInfo" class="panel-collapse collapse not-hide" role="tabpanel" aria-labelledby="headingInfo">
                                                                <div class="panel-body not-hide" style="padding: 10px 0 5px 0;">
                                                                    <div class="slds-section__title not-hide">
                                                                        <strong class="not-hide">{!$Label.Speaker_Info}</strong>
                                                                    </div>
                                                                    <p class="slds-scrollable--y not-hide">{{speakerInfo}}</p>
                                                                    <div class="slds-section__title not-hide">
                                                                        <strong class="not-hide">{!$Label.Org_Website}</strong>
                                                                    </div>
                                                                    <p class="slds-scrollable--y not-hide">{{orgWebsite}}</p>
                                                                    <div class="slds-section__title not-hide">
                                                                        <strong class="not-hide">{!$Label.Org_Description}</strong>
                                                                    </div>
                                                                    <p class="slds-scrollable--y not-hide">{{orgDescription}}</p>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="panel panel-default not-hide" ng-repeat="video in videoList" style="background: none; border: none">
                                                            <div class="panel-heading not-hide" role="tab" id="heading-{{$index}}" style="background: none;">
                                                                <h4 class="panel-title not-hide">
                                                                    <a class="collapsed not-hide" role="button" data-toggle="collapse" data-parent="#accordion"
                                                                       href="#collapse-{{$index}}" aria-expanded="true" aria-controls="collapse-{{$index}}"
                                                                       style="display: block; text-decoration: none;">
                                                                        <strong class="not-hide">{{video.questionTitle}}</strong>
                                                                    </a>
                                                                </h4>
                                                            </div>
                                                            <div id="collapse-{{$index}}" class="panel-collapse collapse not-hide" role="tabpanel" aria-labelledby="heading-{{$index}}">
                                                                <div class="panel-body not-hide" style="padding: 10px 0 5px 0;">
                                                                    <div class="not-hide" anguvideo="anguvideo" ng-model="video.videoURL" width="305"></div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                    </div>
                </div>
            </div>
        </body>
    </html>
</apex:component>