<!--
 * ReferenceEdge
 * 
 * Point of Reference, Inc. - Copyright 2014 All rights reserved.
 *
 * @company : Point of Reference, Inc.
 * @website : www.point-of-reference.com
 *
 * Disclaimer: THIS SOFTWARE IS PROVIDED "AS-IS" BY POINT OF REFERENCE ("POR"), 
 * WITH NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE SOFTWARE, 
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. 
 * POR SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, 
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES. POR IS NOT LIABLE FOR, 
 * AND MAKES NO REPRESENTATIONS OR WARRANTIES REGARDING, THE ACTIONS OR OMISSIONS OF 
 * ANY THIRD PARTIES (OR THE PRODUCTS OR SERVICES OFFERED BY ANY THIRD PARTIES) INCLUDING, 
 * WITHOUT LIMIATION, SALESFORCE.COM. COPY, USE OR DISTRIBUTION PROHIBITED WITHOUT EXPRESS 
 * WRITTEN CONSENT FROM COMPANY.
 -->
<apex:component controller="RefSearchBlockController">
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">    
        <head>
            
            <style>  
                .slds .slds-truncate{
                    white-space: normal !important;
                }
                .circle {
                    border-radius: 50%;
                    width: 11px;
                    height: 11px;
                    margin-left: 30%;
                }
                /* #error-block {
                    background-color: #C60000;
                    color: WHITE;
                    font-weight: bold;
                    font-size: 15px;
                    border-radius: 5px;
                } */
                #error-block {
                    background-color: #B60202;
                    color: WHITE;
                    font-size: 15px;
                    border-radius: 5px;
                }
                /* #contentNameNotification {
                    position: fixed;
                    top: 48%;
                    z-index: 99999;
                    margin-left: 34%;
                } */
                .content-type-panel {
                    position: absolute !important;
                    min-width: 350px;
                    min-height:200px;
                    left: 0;
                    top: 0px;
                }
                .content-type-panel .slds-text-body--regular {
                    height: 200px;
                }
                .content-type-panel .slds-text-heading--medium {
                    overflow: hidden !important;
                    white-space: nowrap !important;
                    text-overflow: ellipsis !important;
                    height: 30px;
                    display: block;
                }
                #relatedAccsModal .slds-checkbox [type="checkbox"][disabled] ~ .slds-checkbox--faux { 
                    background-color: white !important;
                }
                #relatedAccsModal .slds-checkbox [type="checkbox"][disabled] > .slds-checkbox--faux:after, .slds .slds-checkbox [type="checkbox"][disabled] ~ .slds-checkbox--faux:after {
                    border-color : gray;
                }
                #collection-created-msg {
                    position: fixed;
                    top: 10px;
                    left: 0;
                    right: 0;
                    width: 30%;
                    margin: 0 auto;
                    z-index: 1100;
                }
                .content-table-title-content {
					width: 400px;
					display: block;
					word-wrap: break-word;
					white-space: nowrap;
					overflow: hidden;
					text-overflow: ellipsis;
                }
                .custom-ellipsis-class {
					width: 200px;
					display: block;
					word-wrap: break-word;
					white-space: nowrap;
					overflow: hidden;
					text-overflow: ellipsis;
				}
                .disabledAnchorTag {
                	color: #D0D0D0;
					cursor: default;
					pointer-events: none;
					text-decoration: none;
                }
                .scroll-spacer.override {
				    height: 0px !Important;
				}
				.content-search td{
					/*padding-left: 6px !important;
					padding-right: 6px !important;*/
				}
				.content-search td:last-child{
					padding-right:0px;
				}
				.content-search .inner-content{
					    display: block;
					    word-wrap: break-word;
					    padding: 7px;
					    width: 80px;
				}
                
                .content-Tag-panel {
                    position: absolute !important;
                    min-width: 350px;
                    left: 0;
                    top: 0px;
                }
                .content-Tag-panel .slds-text-heading--medium {
                    overflow: hidden !important;
                    white-space: nowrap !important;
                    text-overflow: ellipsis !important;
                    height: 30px;
                    display: block;
                    font-size: 17px;
                    max-width: 94%;
                }

                .slds .slds-nubbin--left-bottom:before {
                    width: 0px;
                }

                .tagAttributeCntnt { 
                    width: 310px;
                    max-height: 70px;
                    word-wrap: break-word;
                    overflow: auto !important;
                }

                .popoverContentBackdrop {
                    position: fixed;
                    left: 0;
                    right: 0;
                    top: 0;
                    bottom: 0;
                    z-index: 999;
                }
            </style>
            <script>
                //var AccountBlock = angular.module("AccountBlock", []);
                var contntCount = 0;
                var viewedContntTotalCount = 0;
                var ContentBlockCon = refSearch.controller('ContentBlockController', function($scope, $timeout, productService, $q) {
                    $scope.isViewDetailsUpdateable = {!isViewDetailsUpdateable};
                    $scope.allRefContents = [];
                    $scope.selectedTypes = [];
                    $scope.selectedLanguages = [];
                    $scope.selectedAttributes = [];
                    $scope.filterAttributeMap = {};
                    $scope.filterOperationMap = {};
                    $scope.alreadyDisplayedContents = [];
                    $scope.hgt = window.innerHeight;
                    $scope.pageIndex = 1;
                    $scope.pageSize = 5;
                    $scope.totalContents = 0;
                    $scope.showMoreContent = false;
                    $scope.contents = [];
                    $scope.searchResult = [];
                    $scope.filterResult = [];
                    $scope.contentTypeResult = [];
                    $scope.contentLanguageResult = [];
                    $scope.Title = 'Title__c';
                    $scope.Custom_Reference_Content = 'Custom_Reference_Content__c';
                    $scope.Attributes = 'Attributes__c';
                    $scope.Language = 'Language__c';
                    $scope.Referenceability = 'Referenceability__c';
                    $scope.Attribute = 'Attribute__c';
                    $scope.Reference_Content = 'Reference_Content__c';
                    $scope.Internal_Use = 'Internal_Use__c';
                    $scope.Featured_Content = 'Featured_Content__c';
                    $scope.Ref_Content_Type = 'Reference_Content_Type__c';
                    $scope.Summary = 'Summary__c';
                    $scope.Content_URL = 'Content_URL__c';
                    $scope.nameSpace = '{!nameSpace}';
                    $scope.searchText = '';
                    $scope.orderByField = '';
                    $scope.reverseSort = false;
                    $scope.isFilterAppiled = false;
                    $scope.isMoreContentAvailable = false;
                    $scope.isAnyFilterAppiled = false;
                    $scope.ShowFeaturedContentFirst = {!ShowFeaturedContentFirst};
                    $scope.featuredChecked = false;
                    $scope.isErrorFound = false;
                    //$scope.doctypeMap = {"UNKNOWN": "/assets/icons/doctype/unknown_60.png","TEXT": "/assets/icons/doctype/txt_60.png", "MP4": "/assets/icons/doctype/mp4_60.png", "CSV": "/assets/icons/doctype/csv_60.png", "EXCEL": "/assets/icons/doctype/excel_60.png", "JPG": "/assets/icons/doctype/image_60.png", "BMP": "/assets/icons/doctype/unknown_60.png", "PNG": "/assets/icons/doctype/image_60.png", "GIF": "/assets/icons/doctype/image_60.png", "LINK": "/assets/icons/doctype/link_60.png", "PDF": "/assets/icons/doctype/pdf_60.png", "POWER_POINT": "/assets/icons/doctype/ppt_60.png", "RTF": "/assets/icons/doctype/rtf_60.png", "WAV": "/assets/icons/doctype/audio_60.png", "MOV": "/assets/icons/doctype/video_60.png", "WORD": "/assets/icons/doctype/word_60.png", "WORD_X": "/assets/icons/doctype/word_60.png", "EXCEL_X": "/assets/icons/doctype/excel_60.png", "POWER_POINT_X": "/assets/icons/doctype/ppt_60.png"};
                    $scope.doctypeMap = {"UNKNOWN": "/assets/icons/doctype/unknown_60.png",
                                            "XML": "/assets/icons/doctype/xml_60.png",
                                            "TEXT": "/assets/icons/doctype/txt_60.png",
                                            "MP4": "/assets/icons/doctype/mp4_60.png",
                                            "CSV": "/assets/icons/doctype/csv_60.png",
                                            "EXCEL": "/assets/icons/doctype/excel_60.png",
                                            "JPG": "/assets/icons/doctype/image_60.png",
                                            "BMP": "/assets/icons/doctype/unknown_60.png",
                                            "PNG": "/assets/icons/doctype/image_60.png",
                                            "GIF": "/assets/icons/doctype/image_60.png",
                                            "LINK": "/assets/icons/doctype/link_60.png",
                                            "PDF": "/assets/icons/doctype/pdf_60.png",
                                            "POWER_POINT": "/assets/icons/doctype/ppt_60.png",
                                            "RTF": "/assets/icons/doctype/rtf_60.png",
                                            "WAV": "/assets/icons/doctype/audio_60.png",
                                            "MOV": "/assets/icons/doctype/video_60.png",
                                            "WORD": "/assets/icons/doctype/word_60.png",
                                            "WORD_X": "/assets/icons/doctype/word_60.png",
                                            "EXCEL_X": "/assets/icons/doctype/excel_60.png",
                                            "POWER_POINT_X": "/assets/icons/doctype/ppt_60.png",
                                            "Reference Interview": "/assets/icons/doctype/video_60.png",
                                            "ZIP": "/assets/icons/doctype/unknown_60.png"};
                    
                    $scope.refContentIdsCSV = '{!JSENCODE(refContentIds)}';
                    $scope.selectedRefContentIds = [];
                    $scope.refContentsForDownload = [];
                    $scope.refInternalContents = [];
                    $scope.shareableValue = 'All';
                    $scope.showCreateCollectionModal = false;
                    $scope.isCollectionNameBlank = false;
                    $scope.collectionName = '';
                    $scope.isFromInvitation = false;
                    $scope.showTypePopup = false;
                    $scope.showCollectionCreatedMsg = false;
                    $scope.selectedCollection = '';
                    $scope.showRelatedAccountsModal = false;
                    $scope.accRelatedToRefContent = [];
                    $scope.isCollectionCreated = false;
                    $scope.isCollectionNotSelected = false;
                    $scope.showLinkMsg = false;
                    $scope.selectOptions = [];
                    $scope.fetchingData = false;
                    $scope.isDownloadUnsuccessful = false;
                    $scope.showNoFileAvailableMsg = false;
                    $scope.showDownloadError = false;
                    
                    // variables for showing data in the content popup panel.
                    $scope.isContentInterviewType = false;
                    $scope.isCustomContent = false;
                    $scope.customContentFieldsList = [];
                    $scope.contentIcon = '';
                    $scope.contentType = '';
                    $scope.contentAccount = '';
                    $scope.contentTitle = '';
                    $scope.contentSummary = '';
                    $scope.contentURL = '';
                    $scope.contentSize = '';
                    $scope.contentId = '';
                    $scope.videoList = [];
                    $scope.orgWebsite = '';
                    $scope.orgDescription = '';
                    $scope.speakerInfo = '';
                    $scope.photo = '';
                    
                    $scope.stopLoadingFlag = false;
                    $scope.showSelectContentMsg = false;
                    $scope.isInternalUseContent = false;
                    //  REF - 1377                    
                    // variables for showing data in the Tags popup panel.
                    $scope.contentTagsId = '';
                    $scope.contentTagsName = ''; 
                    $scope.showTagsPopup = false;
                    $scope.tagAttributes = '';
                    $scope.isRefMatch = {!isRefMatch};

                    $scope.showBackContentDrop = false;

                    $scope.intialFunction = function() {
                        
                        if (!$scope.isRefMatch) {
                            if ($scope.refContentIdsCSV.length > 0) {
                                $scope.selectedRefContentIds = $scope.refContentIdsCSV.split(',');
                                $scope.isFromInvitation = true;
                            }
                            $scope.getContentCollections().then(function(result) {
                                if (result != '') {
                                    $scope.selectOptions = result;
                                }
                            });
                            if (!$scope.preFilter) {
                                $scope.getContentsData(false);
                            } else {
                                $scope.stopLoadingFlag = true;
                            }
                        }
                    }
                    $scope.$on('SelectedColumnsList', function(event, accountColumns, contactColumns, contentColumns) {
                        $scope.columnsList = contentColumns;
                    });
                    
                    $scope.getContentsData = function(isShareableClicked) {
                        
                        if (!$scope.isRefMatch) {
                            if(isShareableClicked) {
                                $scope.totalContents=0;
                                $scope.alreadyDisplayedContents = [];
                                $scope.allRefContents = [];
                            }
                            $scope.alreadyDisplayedContentsJson = angular.toJson($scope.alreadyDisplayedContents);
                            $scope.filteredContentId = [];
                            $scope.isAnyFilterAppiled = false;
                            if ($scope.searchText != '') {
                                if ($scope.searchResult.length > 0) {
                                    $scope.filteredContentId = $scope.searchResult;
                                }
                            } else {
                                $scope.filteredContentId = [];
                            }
                            if ($scope.isFilterAppiled) {
                                if ($scope.filterResult.length > 0) {
                                    if ($scope.filteredContentId.length > 0) {
                                        $scope.tempList = [];
                                        for (var i = 0; i < $scope.filteredContentId.length; i++) {
                                            if ($scope.filterResult.indexOf($scope.filteredContentId[i]) >= 0) {
                                                $scope.tempList.push($scope.filteredContentId[i]);
                                            }
                                        }
                                        $scope.filteredContentId = $scope.tempList;
                                    } else {
                                        $scope.filteredContentId = $scope.filterResult;
                                    }
                                } else {
                                    $scope.filteredContentId = [];
                                }
                            }
                            if (contentmappingSelected) {
                                if ($scope.relatedContentIds.length > 0) {
                                    if ($scope.filteredContentId.length > 0) {
                                        $scope.tempList = [];
                                        for (var i = 0; i < $scope.filteredContentId.length; i++) {
                                            if ($scope.relatedContentIds.indexOf($scope.filteredContentId[i]) >= 0) {
                                                $scope.tempList.push($scope.filteredContentId[i]);
                                            }
                                        }
                                        $scope.filteredContentId = $scope.tempList;
                                    } else {
                                        $scope.filteredContentId = $scope.relatedContentIds;
                                    }
                                } else {
                                    $scope.filteredContentId = [];
                                }
                            }
                            if ($scope.selectedTypes.length > 0) {
                                if ($scope.contentTypeResult.length > 0) {
                                    if ($scope.filteredContentId.length > 0) {
                                        $scope.tempList = [];
                                        for (var i = 0; i < $scope.filteredContentId.length; i++) {
                                            if ($scope.contentTypeResult.indexOf($scope.filteredContentId[i]) >= 0) {
                                                $scope.tempList.push($scope.filteredContentId[i]);
                                            }
                                        }
                                        $scope.filteredContentId = $scope.tempList;
                                    } else {
                                        $scope.filteredContentId = $scope.contentTypeResult;
                                    }
                                } else {
                                    $scope.filteredContentId = [];
                                }
                            }
                            if ($scope.selectedLanguages.length > 0) {
                                if ($scope.contentLanguageResult.length > 0) {
                                    if ($scope.filteredContentId.length > 0) {
                                        $scope.tempList = [];
                                        for (var i = 0; i < $scope.filteredContentId.length; i++) {
                                            if ($scope.contentLanguageResult.indexOf($scope.filteredContentId[i]) >= 0) {
                                                $scope.tempList.push($scope.filteredContentId[i]);
                                            }
                                        }
                                        $scope.filteredContentId = $scope.tempList;
                                    } else {
                                        $scope.filteredContentId = $scope.contentLanguageResult;
                                    }
                                } else {
                                    $scope.filteredContentId = [];
                                }
                            }
                            if ($scope.isFilterAppiled
                                    || $scope.searchText != ''
                                    || $scope.selectedLanguages.length > 0
                                    || $scope.selectedTypes.length > 0
                                    || contentmappingSelected) {
                                $scope.isAnyFilterAppiled = true;
                            }
                            $scope.filteredContentIdJson = angular.toJson($scope.filteredContentId);
                            $scope.contents = [];
                            $scope.alreadyDisplayedContents = [];
                            $scope.allRefContents = [];
                            $q.all([getTotalContents(isShareableClicked),
                                    getContents(isShareableClicked)
                            ]).then(function() {
                                if (!$scope.preFilter || $scope.stopLoadingFlag) {
                                    productService.isloading(false);
                                } else {
                                    $scope.stopLoadingFlag = true;
                                }
                            }, function(errorSearchResult) {
                                if (!$scope.preFilter || $scope.stopLoadingFlag) {
                                    productService.isloading(false);
                                } else {
                                    $scope.stopLoadingFlag = true;
                                }
                            });
                        }
                    }
                    function getTotalContents(isShareableClicked) {
                        var defer = $q.defer();
                        if (!$scope.isRefMatch) {
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.RefSearchBlockController.getTotalContentsValues}', 
                                $scope.isAnyFilterAppiled,
                                $scope.alreadyDisplayedContentsJson,
                                $scope.filteredContentIdJson,
                                $scope.featuredChecked,
                                $scope.shareableValue,
                                function(result, event) {   
                                    $scope.totalContents = result; 
                                    contntCount = result;
                                    defer.resolve();
                                }, function(error) {
	                            	defer.reject('Error in getTotalContents methods');
				                });
                        }
                        return defer.promise;
                    }
                     function getContents(isShareSwitchClicked) {
                     	var defer = $q.defer();
                        if (!$scope.isRefMatch) {
                            if (isShareSwitchClicked) {
                                productService.isloading(true);
                            }
                            $scope.alreadyDisplayedContentsJson = angular.toJson($scope.alreadyDisplayedContents);
                            $scope.filteredContentIdJson = angular.toJson($scope.filteredContentId);
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.RefSearchBlockController.getAllContents1}', 
                                $scope.shareableValue,
                                $scope.isAnyFilterAppiled,
                                $scope.alreadyDisplayedContentsJson,
                                $scope.filteredContentIdJson,
                                250,
                                $scope.featuredChecked,
                                $scope.ShowFeaturedContentFirst,
                                function(result, event) {    
                                    result = $scope.parseResult(result);
                                    $scope.tempList = JSON.parse(result);
                                    //$scope.tempList = result
                                    if ($scope.tempList.length > 250) {
                                        $scope.isMoreContentAvailable = true;
                                        $scope.tempList.splice(250, 1);
                                    } else {
                                        $scope.isMoreContentAvailable = false;
                                    }
                                    if ($scope.pageSize == 5) {
                                        $scope.showMoreContent = ($scope.tempList.length > $scope.pageSize ? true : false);
                                    } else {
                                        $scope.showMoreContent = false;
                                    }
                                    for (var i = 0; i < $scope.tempList.length; i++) {
                                        $scope.alreadyDisplayedContents.push($scope.tempList[i].refContent.Id);
                                        $scope.allRefContents.push($scope.tempList[i]);
                                        if (i < $scope.pageSize) {
                                            if ($scope.selectedRefContentIds.indexOf($scope.tempList[i].refContent.Id) >= 0) {
                                                $scope.tempList[i].isSelected = true;
                                            }
                                            $scope.contents.push($scope.tempList[i]);
                                        }
                                    }
                                    viewedContntTotalCount = $scope.contents.length;
                                    
                                    $scope.fetchingData = false;
                                    if (isShareSwitchClicked) {
                                        $timeout(function() {
                                            window.scrollTo(0, document.body.scrollHeight);
                                        }, 10);
                                    }
                                    defer.resolve();
                                }, function(error) {
	                            	defer.reject('Error in getContents methods');
				                },
                                {
                                    buffer: false,
                                    escape: true,
                                    timeout: 120000
                                }
                            );
                        }
                        return defer.promise;
                    };
                    $scope.relatedContentIds = [];
                    var contentmappingSelected = false;
                    $scope.$on('filter', function(e, myMap, operationMap, accountMappedIds, accountmappingSelected, contactMappedIds, contactmapping, contentMappedIds, contentmapping, mappedFilterIds, stageFilterId) { 
                        
                        if (!$scope.isRefMatch) {
                            $scope.filterAttributeMap = {};
                            $scope.filterOperationMap = operationMap;
                            $scope.relatedContentIds = contentMappedIds;
                            contentmappingSelected = contentmapping;
                            $scope.isFilterAppiled = false;
                            $scope.selectedAttributes = [];
                            var isType = false;
                            var isLanguage = false;
                            
                            
                            if (myMap){
                                var myMapKeys = Object.keys(myMap);
                                var key;
                                for(var loop=0; loop<myMapKeys.length; loop++) {
                                    key = myMapKeys[loop];
                                    var itm = myMap[key];
                                    
                                    $scope.tempList = [];
                                    if (key == 'Content Types') {
                                        for (var i = 0; i < itm.length; i++) {
                                            if (itm[i].isSelected && itm[i].contentTypeName != null && itm[i].contentTypeName != '') {
                                                $scope.tempList.push(itm[i].contentTypeName);
                                            } else {
                                                var index = $scope.selectedTypes.indexOf(itm[i].contentTypeName);
                                                if (index >= 0) {
                                                    $scope.selectedTypes.splice(index, 1);
                                                }
                                            }
                                        }
                                        
                                        if ($scope.tempList.length > 0) {
                                            $scope.selectedTypes = $scope.tempList;
                                        }
                                        isType = true;
                                    } else if (key == 'Content Language') {
                                        for (var i = 0; i < itm.length; i++) {
                                            if (itm[i].isSelected && itm[i].contentLanguageName != null && itm[i].contentLanguageName != '') {
                                                $scope.tempList.push(itm[i].contentLanguageName);
                                            } else {
                                                var index = $scope.selectedLanguages.indexOf(itm[i].contentLanguageName);
                                                if (index >= 0) {
                                                    $scope.selectedLanguages.splice(index, 1);
                                                }
                                            }
                                        }
                                        if ($scope.tempList.length > 0) {
                                            $scope.selectedLanguages = $scope.tempList;
                                        }
                                        isLanguage = true;
                                    } else if (key!='Referenceability' && mappedFilterIds.indexOf(key) < 0) {
                                        for (var i = 0; i < itm.length; i++) {
                                            if (itm[i].isSelected) {
                                                $scope.tempList.push(itm[i].attId);
                                                $scope.selectedAttributes.push(itm[i].attId);
                                            }
                                        }
                                        if ($scope.tempList.length > 0) {
                                            $scope.filterAttributeMap[key] = $scope.tempList;
                                            $scope.isFilterAppiled = true;
                                        }
                                    }
                                }
                            }
                            
                            $scope.contents = [];
                            $scope.alreadyDisplayedContents = [];
                            
                            performFilterEventActions(isLanguage, isType);
                        }
                    });
                    
                    function performFilterEventActions(isLanguage, isType) {
                    	var filterEventActionsTobePerformed = [];
                    	if(isLanguage) {
                    		filterEventActionsTobePerformed.push(filterContentsByLanguages());
                    	}
                    	
                    	if(isType) {
                    		filterEventActionsTobePerformed.push(filterContentsByTypes());
                    	}
                    	
                    	if ($scope.isFilterAppiled) {
                            filterEventActionsTobePerformed.push(filterContents());
                        }
                        
                    	$q.all(filterEventActionsTobePerformed).then(function() {
			                $scope.getContentsData(false);
			            }, function(errorSearchResult) {
			                console.log('error in performFilterEventActions method');
			            });
                    }
                    
                    function filterContentsByLanguages() {
                        var defer = $q.defer();
                        if (!$scope.isRefMatch) {
                            $scope.selectedLanguagesJson = angular.toJson($scope.selectedLanguages);
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.RefSearchBlockController.filterByContentLanguage}', 
                                $scope.selectedLanguagesJson, $scope.filterOperationMap['Content Language'],
                                function(result, event) {
                                    result = $scope.parseResult(result);
                                    $scope.$apply(function() {
                                        if (result != '') {
                                            $scope.contentLanguageResult = JSON.parse(result);
                                        } else {
                                            $scope.contentLanguageResult = [];
                                        }
                                        defer.resolve();
                                    });
                                }, function(error) {
	                            	defer.reject('Error in filterContentsByLanguages methods');
				                });
				                
							return defer.promise;
                        }
                    }
                    function filterContentsByTypes() {
                        var defer = $q.defer();
                        if (!$scope.isRefMatch) {
                            $scope.selectedTypesJson = angular.toJson($scope.selectedTypes);
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.RefSearchBlockController.filterByContentType}',
                                $scope.selectedTypesJson, $scope.filterOperationMap['Content Types'],
                                function(result, event) {
                                    result = $scope.parseResult(result);
                                    $scope.$apply(function() {
                                        if (result != '') {
                                            $scope.contentTypeResult = JSON.parse(result);
                                        } else {
                                            $scope.contentTypeResult = [];
                                        }
                                        defer.resolve();
                                    });
                                }, function(error) {
	                            	defer.reject('Error in filterContentsByTypes methods');
				                });
				                
							return defer.promise;
                        }
                    }
                    function filterContents() {
                        var defer = $q.defer();
                        if (!$scope.isRefMatch) {
                            $scope.selectedAttributesJson = angular.toJson($scope.selectedAttributes);
                            
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.RefSearchBlockController.filterByContentAttribute}',
                                $scope.selectedAttributesJson,
                                function(result, event) {
                                    result = $scope.parseResult(result);
                                    $scope.$apply(function() {
                                        $scope.contentAtts = JSON.parse(result); 
                                        $scope.labelLogicMap = {};
                                        $scope.refContentAttributes = {};
                                        $scope.filterResult = [];
                                        for (var i = 0; i < $scope.contentAtts.length; i++) {
                                            $scope.tempList = $scope.refContentAttributes[$scope.contentAtts[i][$scope.nameSpace + $scope.Reference_Content]];
                                            $scope.tempList1 = [];
                                            if ($scope.tempList1 != null) {
                                                $scope.tempList1.push($scope.contentAtts[i][$scope.nameSpace + $scope.Attribute]);
                                            } else {
                                                $scope.tempList1 = [];
                                            }
                                            if ($scope.tempList != null && $scope.tempList.length > 0) {
                                                for (var j = 0; j < $scope.tempList.length; j++) {
                                                    $scope.tempList1.push($scope.tempList[j]);
                                                }
                                            }
                                            $scope.refContentAttributes[$scope.contentAtts[i][$scope.nameSpace + $scope.Reference_Content]] = $scope.tempList1;
                                        }
                                        if ($scope.refContentAttributes) {
                                            var refContentAttributesMapKeys = Object.keys($scope.refContentAttributes);
                                            var contentId;
                                            for(var loop=0; loop<refContentAttributesMapKeys.length; loop++) {
                                                contentId = refContentAttributesMapKeys[loop];
                                                var conAttributes = $scope.refContentAttributes[contentId];
                                                
                                                $scope.attIds = [];
                                                $scope.recordMatchingCondition = 0;
                                                $scope.attMapLength = 0;
                                                
                                                if ($scope.filterAttributeMap) {
                                                    var filterAttributeMapKeys = Object.keys($scope.filterAttributeMap);
                                                    var labelId;
                                                    for(var innerLoop=0; innerLoop<filterAttributeMapKeys.length; innerLoop++) {
                                                        labelId = filterAttributeMapKeys[innerLoop];
                                                        var array = $scope.filterAttributeMap[labelId];
                                                        
                                                        $scope.attIds = conAttributes;
                                                        $scope.attMapLength = $scope.attMapLength + 1;
                                                        if ($scope.filterOperationMap[labelId] == 'and') {
                                                            $scope.recordMatched = false;
                                                            for (var j = 0; j < array.length; j++) {
                                                                if ($scope.attIds.indexOf(array[j]) < 0) {
                                                                    $scope.recordMatched = true;
                                                                    break;
                                                                }
                                                            }
                                                            if (!$scope.recordMatched) {
                                                                $scope.recordMatchingCondition = $scope.recordMatchingCondition + 1;
                                                            }
                                                        } else {
                                                            for (var j = 0; j < array.length; j++) {
                                                                if ($scope.attIds.indexOf(array[j]) >= 0) {
                                                                    $scope.recordMatchingCondition = $scope.recordMatchingCondition + 1;
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                if ($scope.recordMatchingCondition != 0 && $scope.recordMatchingCondition == $scope.attMapLength) {
                                                    $scope.filterResult.push(contentId);
                                                } else if ($scope.attMapLength == 0) {
                                                    $scope.filterResult.push(contentId);
                                                }
                                            }	
                                        }
                                        defer.resolve();
                                    });
                                }, function(error) {
	                            	defer.reject('Error in filterContents methods');
				                });
				                
							return defer.promise;
                        }
                    }
                    $scope.$on('searchTextContent', function(e, value, filterdaccounts) { 
                        if (!$scope.isRefMatch) {
                            $scope.searchText = value;
                            $scope.featuredChecked = false;
                            $scope.alreadyDisplayedContents = [];
                            search(filterdaccounts);
                        }
                    });
                    
                    $scope.$on('clearAllFiltersAndSearchText', function(event, value) { 
                        //Reset to initial defualt data
                        $scope.alreadyDisplayedContents = [];
                        $scope.contents = [];
                        $scope.allRefContents = [];
                        
                        //Reset Search text data
                        $scope.searchText = '';
                        
                        //Reset Filters defualt data
                        $scope.isAnyFilterAppiled = false; 
                        contentmappingSelected = false;
						$scope.relatedContentIds = [];
						$scope.isFilterAppiled = false;
						$scope.selectedAttributes = [];
						$scope.selectedTypes = [];
						$scope.selectedLanguages = [];
						$scope.featuredChecked = false;
						
                        $q.all([getTotalContents(false),
                                getContents(false)
                        ]).then(function() {
                            if (!$scope.preFilter || $scope.stopLoadingFlag) {
                                productService.isloading(false);
                            } else {
                                $scope.stopLoadingFlag = true;
                            }
                        }, function(errorSearchResult) {
                            if (!$scope.preFilter || $scope.stopLoadingFlag) {
                                productService.isloading(false);
                            } else {
                                $scope.stopLoadingFlag = true;
                            }
                        });
                    });
                    
                    function search(filterdaccounts) {
                        if (!$scope.isRefMatch) {
                            $scope.filterdaccountsJson = angular.toJson(filterdaccounts);
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.RefSearchBlockController.filterBySearchText}',
                                $scope.searchText, $scope.filterdaccountsJson,
                                function(result, event) {
                                    result = $scope.parseResult(result);
                                    $scope.$apply(function() {
                                        $scope.searchResult = JSON.parse(result);
                                        $scope.getContentsData(false);
                                    });
                                }
                            );
                        }
                    }
                    $scope.parseResult = function(result) {
                        if (result != null) {
                            result = result.replace(/&quot/gi, '"');
                            result = result.replace(/&amp/g, '&');
                            result = result.replace(/&lt/g, '<');
                            result = result.replace(/&gt/g, '>');
                            result = result.replace(/;/g, '');
                            result = result.replace(/&#39/g, '\'');
                            return result;
                        }
                    }
                    $scope.showMoreContents = function() {
                        $scope.pageSize = 25;
                        $scope.showMoreContent = false;
                        for (var i = 5; i < $scope.allRefContents.length; i++) {
                            if (i < $scope.pageSize) {
                                if ($scope.selectedRefContentIds.indexOf($scope.allRefContents[i].refContent.Id) >= 0) {
                                    $scope.allRefContents[i].isSelected = true;
                                }
                                $scope.contents.push($scope.allRefContents[i]);
                            }
                        }
                        viewedContntTotalCount = $scope.contents.length;
                        $scope.isAllContentSelected = false; 
                        showMoreSectionView(false,  false, true, true);
                        $scope.$parent.showMoreRecordsView = true;
                    }

                    $scope.more = function() {
                        if ($scope.showMoreContent == false) { 
                        productService.isloading(true);
                            if ($scope.contents.length < $scope.allRefContents.length) {
                                var size = (parseInt($scope.contents.length) + parseInt($scope.pageSize));
                                for (var i = $scope.contents.length; i < $scope.allRefContents.length; i++) {
                                    if (i < size) {
                                        if ($scope.selectedRefContentIds.indexOf($scope.allRefContents[i].refContent.Id) >= 0) {
                                            $scope.allRefContents[i].isSelected = true;
                                        }
                                        $scope.contents.push($scope.allRefContents[i]);
                                    }
                                }
                                viewedContntTotalCount = $scope.contents.length;
                            } else if ($scope.isMoreContentAvailable) {
                                $scope.fetchingData = true;
                                getContents(false);
                            }
                            $scope.isAllContentSelected = false;
                            //var toggleStatus = $scope.isAllContentSelected;
                            //angular.forEach($scope.contents, function(itm){ itm.isSelected = toggleStatus; });
                        } 
                        productService.isloading(false);
                    };

                    //  REF-1970    Rajneesh Raj(Nov 14,2018)
                    $scope.backToRefsearchPage = function() {
                        $scope.contents.splice(5, ($scope.allRefContents.length - 5));
                        $scope.showMoreContent = true;
                        $scope.pageSize = 5;
                        showMoreSectionView(true,  true, true, true);
                         $scope.$parent.showMoreRecordsView = false;
                    }

                    $scope.selectAll = function() {
                    	if ($scope.contents) {
                            for(var loop=0; loop<$scope.contents.length; loop++) {
                                var item = $scope.contents[loop];
                                
                                var index = $scope.selectedRefContentIds.indexOf(item.refContent.Id);
                                if (index == -1
                                		&& !item.refContent[$scope.nameSpace + $scope.Internal_Use]
                                        && (item.contentVersion.Id != null
											|| item.fileType == 'LINK'
											|| item.isInterviewType
                                            || item.refContent[$scope.nameSpace + $scope.Custom_Reference_Content])) {
                                    
                                    item.isSelected = $scope.isAllContentSelected;
                                    $scope.selectedRefContentIds.push(item.refContent.Id);
                                    $scope.refContentsForDownload.push(item);
                                }                                                                
                                 //re #496 - Get if requested content is Internal Use  
                                var index = $scope.refInternalContents.indexOf(item.refContent.Id); 
                                 
		                        if (index == -1 && item.refContent[$scope.nameSpace + $scope.Internal_Use] == true) { 
		                            $scope.refInternalContents.push(item.refContent.Id);  
		                        }  
                        
                                if (!$scope.isAllContentSelected) {
                                    $scope.selectedRefContentIds = [];
                                    $scope.refContentsForDownload = [];
                                    $scope.refInternalContents = [];
                                    item.isSelected = false;
                                }
                            }              	
				        } 
                    }
                    
                    $scope.selectDeselect = function(rcId, accWrap) { 
                        
                        var index = $scope.selectedRefContentIds.indexOf(rcId);
                        
                        if (index == -1) {
                            $scope.selectedRefContentIds.push(rcId);
                            $scope.refContentsForDownload.push(accWrap);
                        } else {
                            $scope.selectedRefContentIds.splice(index, 1);
                            $scope.refContentsForDownload.splice(index, 1);
                        }
                        
                        //re #496 - Get if requested content is Internal Use   
                        if (accWrap != null && accWrap.refContent[$scope.nameSpace + $scope.Internal_Use] == true) {
	                        var index = $scope.refInternalContents.indexOf(rcId);
	                        
	                        if (index == -1) {
	                            $scope.refInternalContents.push(rcId); 
	                        } else {
	                            $scope.refInternalContents.splice(index, 1); 
	                        }
                        }
                        
                        var allSelectedTemp = true;
                        var breakFlag = true;
                        if ($scope.contents) {
                            for(var loop=0; loop<$scope.contents.length; loop++) {
                                var item = $scope.contents[loop];
                                if (breakFlag) {
                                    if (!item.isSelected) {
                                        allSelectedTemp = false;
                                        breakFlag = false;
                                    }
                                }
                            }   
                        }
                        $scope.isAllContentSelected = allSelectedTemp;
                    }

                    $scope.openDetailPage = function(refContentId) {
                        $scope.showTypeCustomModal = false;
                        var actionName = 'open detail';
                        var refContentIdsToUpdate = [];
                        refContentIdsToUpdate.push(refContentId);

                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefSearchBlockController.updateRefContentStatistics}',
                            angular.toJson(refContentIdsToUpdate), actionName,
                            function(result, event) {
                                console.log(result);
                            },
                            {escape: true}
                        );
                    }

                    $scope.openLinkURL = function(refContentId, refContentURL) {
                        $scope.showTypeCustomModal = false;
                        
                        if (refContentURL.indexOf("http://") >= 0 || refContentURL.indexOf("https://") >= 0) {
                            window.open('', '_blank').location.href = refContentURL;
                        } else {
                            window.open('', '_blank').location.href = 'http://' + refContentURL;
                        }
                        var actionName = 'open link';
                        var refContentIdsToUpdate = [];
                        refContentIdsToUpdate.push(refContentId);

                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefSearchBlockController.updateRefContentStatistics}',
                            angular.toJson(refContentIdsToUpdate), actionName,
                            function(result, event) {
                                console.log(result);
                            },
                            {escape: true}
                        );
                    }

                    $scope.downloadRefContentFromPopup = function(refContentId) {
                        $scope.showTypeCustomModal = false;
                        var refContentIdsToDownload = [];
                        refContentIdsToDownload.push(refContentId);

                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefSearchBlockController.downloadRefContent}',
                            angular.toJson(refContentIdsToDownload),
                            function(result, event) {
                                console.log(result);
                                
                                if (result != '' && result.startsWith('Error') == false) {
                                    window.open(result, '_top');
                                } else if (result == '') {
                                    $scope.isDownloadUnsuccessful = true;
                                    $scope.showNoFileAvailableMsg = true;
                                } else {
                                    $scope.isDownloadUnsuccessful = true;
                                    $scope.showDownloadError = true;
                                    console.log('--->' + result);
                                }
                            },
                            {escape: true}
                        );
                    }

                    $scope.downloadRefContents = function() {
                        if ($scope.refContentsForDownload.length == 0) {
                            $scope.showSelectContentMsg = true;
                        } else if ($scope.refContentsForDownload.length == 1) {
                            if ($scope.refContentsForDownload[0].fileType == 'LINK') {
                                $scope.showLinkMsg = true;
                            } else {
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.RefSearchBlockController.downloadRefContent}',
                                    //angular.toJson($scope.refContentsForDownload),
                                    angular.toJson($scope.selectedRefContentIds),
                                    function(result, event) {
                                        console.log(result);
                                        if (result != '' && result.startsWith('Error') == false) {
                                            window.open(result, '_top');
                                        } else if (result == '') {
                                        	$scope.isDownloadUnsuccessful = true;
                                        	$scope.showNoFileAvailableMsg = true;
                                        } else {
                                        	$scope.isDownloadUnsuccessful = true;
                                        	$scope.showDownloadError = true;
                                        	console.log('--->' + result);
                                        }
                                    },
                                    {escape: true}
                                );
                            }
                        } else {
                            var breakFlag = true;
                            var tempDownloads = angular.copy($scope.refContentsForDownload);
                            var tempSelectedIds = angular.copy($scope.selectedRefContentIds);
                            if ($scope.refContentsForDownload) {
                                for(var loop=0; loop<$scope.refContentsForDownload.length; loop++) {
                                    var item = $scope.refContentsForDownload[loop];
                                    if (item.fileType == 'LINK') {
                                        var index = tempSelectedIds.indexOf(item.refContentId);
                                        tempDownloads.splice(index, 1);
                                        tempSelectedIds.splice(index, 1);
                                    }
                                    if (breakFlag && item.fileType == 'LINK') {
                                        $scope.showLinkMsg = true;
                                        breakFlag = false;
                                    }
                                }
                            }
                            $scope.refContentsForDownload = angular.copy(tempDownloads);
                            if ($scope.refContentsForDownload.length > 0) {
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.RefSearchBlockController.downloadRefContent}',
                                    //angular.toJson(tempDownloadList),
                                    angular.toJson(tempSelectedIds),
                                    function(result, event) {
                                        if (result != '' && result.startsWith('Error') == false) {
                                            window.open(result, '_top');
                                        } else if (result == '') {
                                        	$scope.isDownloadUnsuccessful = true;
                                        	$scope.showNoFileAvailableMsg = true;
                                        } else {
                                        	$scope.isDownloadUnsuccessful = true;
                                        	$scope.showDownloadError = true;
                                        	console.log('--->' + result);
                                        }
                                    },
                                    {escape: true}
                                );
                            }
                        }
                    }
                    $scope.closeDownloadNotification = function() {
                    	$scope.isDownloadUnsuccessful = false;
                      	$scope.showNoFileAvailableMsg = false;
                      	$scope.showDownloadError = false;
                   	}
                   	
                    $scope.shareRefContentIds = function() {
                    	var isMatched = false;
                    	if ($scope.selectedRefContentIds) {
                            var selectedRefContentIdsMapKeys = Object.keys($scope.selectedRefContentIds);
                            var keyrefCont;
                            for(var loop=0; loop<selectedRefContentIdsMapKeys.length; loop++) {
                                keyrefCont = selectedRefContentIdsMapKeys[loop];
                                var valueRefCont = $scope.selectedRefContentIds[keyrefCont];
                                
                                if (!isMatched) {
                                    if ($scope.refInternalContents) {
                                        var refInternalContentsMapKeys = Object.keys($scope.refInternalContents);
                                        var keyInt;
                                        for(var innerLoop=0; innerLoop<refInternalContentsMapKeys.length; innerLoop++) {
                                            keyInt = refInternalContentsMapKeys[innerLoop];
                                            var valueInt = $scope.refInternalContents[keyInt];
                                            
                                            if (valueRefCont === valueInt) {
                                                $scope.isInternalUseContent = true; 
                                                isMatched = true; 
                                            }
                                        }
                                    }	
                                }
                            }
                        }
                        
                        var refContentIds = $scope.selectedRefContentIds.join(',');
                        
                        if (refContentIds != '' && $scope.isInternalUseContent == false) {
                            var form = document.createElement("form");
                            form.setAttribute("method", "POST");
                            form.setAttribute("action", "{!URLFOR($Page.Invitation_NewSLDS)}");
                            
                            var hiddenField = document.createElement("input");
                            hiddenField.setAttribute("type", "hidden");
                            hiddenField.setAttribute("name", "refContentIds");
                            hiddenField.setAttribute("value", refContentIds);
                            form.appendChild(hiddenField);
                            
                            var hiddenField1 = document.createElement("input");
                            hiddenField1.setAttribute("type", "hidden");
                            hiddenField1.setAttribute("name", "forAccount");
                            hiddenField1.setAttribute("value", $scope.forAccount);
                            form.appendChild(hiddenField1);
                            
                            var hiddenField2 = document.createElement("input");
                            hiddenField2.setAttribute("type", "hidden");
                            hiddenField2.setAttribute("name", "forContent");
                            hiddenField2.setAttribute("value", $scope.forContent);
                            form.appendChild(hiddenField2);
                            
                            var hiddenField3 = document.createElement("input");
                            hiddenField3.setAttribute("type", "hidden");
                            hiddenField3.setAttribute("name", "opportunityId");
                            hiddenField3.setAttribute("value", $scope.opportunityId);
                            form.appendChild(hiddenField3);
                            
                            var hiddenField4 = document.createElement("input");
                            hiddenField4.setAttribute("type", "hidden");
                            hiddenField4.setAttribute("name", "caseId");
                            hiddenField4.setAttribute("value", $scope.caseId);
                            form.appendChild(hiddenField4);
                            
                            var hiddenField5 = document.createElement("input");
                            hiddenField5.setAttribute("type", "hidden");
                            hiddenField5.setAttribute("name", "leadId");
                            hiddenField5.setAttribute("value", $scope.leadId);
                            form.appendChild(hiddenField5);
                            
                            var hiddenField51 = document.createElement("input");
                            hiddenField51.setAttribute("type", "hidden");
                            hiddenField51.setAttribute("name", "fromLead");
                            hiddenField51.setAttribute("value", $scope.fromLead);
                            form.appendChild(hiddenField51);
                            
                            var hiddenField6 = document.createElement("input");
                            hiddenField6.setAttribute("type", "hidden");
                            hiddenField6.setAttribute("name", "isReturned");
                            hiddenField6.setAttribute("value", $scope.isReturned);
                            form.appendChild(hiddenField6);
                            
                            
                            var hiddenField7 = document.createElement("input");
                            hiddenField7.setAttribute("type", "hidden");
                            hiddenField7.setAttribute("name", "contactIds");
                            hiddenField7.setAttribute("value", $scope.contactIds);
                            form.appendChild(hiddenField7);
                            
                            var hiddenField8 = document.createElement("input");
                            hiddenField8.setAttribute("type", "hidden");
                            hiddenField8.setAttribute("name", "userIds");
                            hiddenField8.setAttribute("value", $scope.userIds);
                            form.appendChild(hiddenField8);
                            
                            var hiddenField9 = document.createElement("input");
                            hiddenField9.setAttribute("type", "hidden");
                            hiddenField9.setAttribute("name", "recipientsIds");
                            hiddenField9.setAttribute("value", $scope.recipientsIds);
                            form.appendChild(hiddenField9);
                            
                            var hiddenField10 = document.createElement("input");
                            hiddenField10.setAttribute("type", "hidden");
                            hiddenField10.setAttribute("name", "emailSubject");
                            hiddenField10.setAttribute("value", $scope.emailSubject);
                            form.appendChild(hiddenField10);
                            
                            var hiddenField11 = document.createElement("input");
                            hiddenField11.setAttribute("type", "hidden");
                            hiddenField11.setAttribute("name", "emailContent");
                            hiddenField11.setAttribute("value", $scope.emailContent);
                            form.appendChild(hiddenField11);
                            
                            var hiddenField12 = document.createElement("input");
                            hiddenField12.setAttribute("type", "hidden");
                            hiddenField12.setAttribute("name", "invitaionName");
                            hiddenField12.setAttribute("value", $scope.invitaionName);
                            form.appendChild(hiddenField12);
                            
                            var hiddenField13 = document.createElement("input");
                            hiddenField13.setAttribute("type", "hidden");
                            hiddenField13.setAttribute("name", "note");
                            hiddenField13.setAttribute("value", $scope.note);
                            form.appendChild(hiddenField13);
                            
                            var hiddenField14 = document.createElement("input");
                            hiddenField14.setAttribute("type", "hidden");
                            hiddenField14.setAttribute("name", "selectedMictosite");
                            hiddenField14.setAttribute("value", $scope.selectedMictosite);
                            form.appendChild(hiddenField14);
                            
                             var hiddenField15 = document.createElement("input");
			                hiddenField15.setAttribute("type", "hidden");
			                hiddenField15.setAttribute("name", "expDate");
			                hiddenField15.setAttribute("value", $scope.expDate);
			                form.appendChild(hiddenField15);
			               
			                var hiddenField16 = document.createElement("input");
			                hiddenField16.setAttribute("type", "hidden");
			                hiddenField16.setAttribute("name", "isCcAllowed");
			                hiddenField16.setAttribute("value", $scope.isCcAllowed);
			                form.appendChild(hiddenField16);
                			
                			var hiddenField17 = document.createElement("input");
			                hiddenField17.setAttribute("type", "hidden");
			                hiddenField17.setAttribute("name", "emailTo");
			                hiddenField17.setAttribute("value", $scope.emailTo);
			                form.appendChild(hiddenField17);
			                
			                var hiddenField18 = document.createElement("input");
			                hiddenField18.setAttribute("type", "hidden");
			                hiddenField18.setAttribute("name", "emailBcc");
			                hiddenField18.setAttribute("value", $scope.emailBcc);
			                form.appendChild(hiddenField18);
			                
			                var hiddenField19 = document.createElement("input");
			                hiddenField19.setAttribute("type", "hidden");
			                hiddenField19.setAttribute("name", "emailCc");
			                hiddenField19.setAttribute("value", $scope.emailCc);
			                form.appendChild(hiddenField19);
                			
                			 var hiddenField20 = document.createElement("input");
			                hiddenField20.setAttribute("type", "hidden");
			                hiddenField20.setAttribute("name", "opportunityName");
			                hiddenField20.setAttribute("value", $scope.opportunityName); 
			                form.appendChild(hiddenField20);
			                
			                 var hiddenField21 = document.createElement("input");
			                hiddenField21.setAttribute("type", "hidden");
			                hiddenField21.setAttribute("name", "opportunityAccount");
			                hiddenField21.setAttribute("value",$scope.opportunityAccount); 
                			form.appendChild(hiddenField21);
                			
                            document.body.appendChild(form);
                            form.submit();
                        } else if ($scope.isInternalUseContent == false) {
                            $scope.showSelectContentMsg = true;
                        }  
                    }
                    $scope.filterfeaturedContent = function() {
                        productService.isloading(true);
                        $scope.featuredChecked = !$scope.featuredChecked;
                        $scope.contents = [];
                        $scope.alreadyDisplayedContents = [];
                        //$scope.getTotalContents(false);
                        $scope.getContentsData(false);
                        $timeout(function() {
                            window.scrollTo(0, document.body.scrollHeight);
                        }, 10);
                        //productService.isloading(false);
                    }
                    $scope.customContentSymbol = '{!URLFOR($Resource.refEdgeCutomContent)}';
                    $scope.resource = '{!URLFOR($Resource.LightningCSS)}';
                    
                    $scope.cancelContentCollection = function() {
                        $scope.showCreateCollectionModal = false;
                        $scope.isCollectionNameBlank = false;
                        $scope.collectionName = '';
                        $scope.isErrorFound=false;
                    }
                    $scope.saveContentCollection = function() {
                        $scope.isCollectionNameBlank = false;
                        if ($scope.collectionName != null && $scope.collectionName.trim() != '') { 
                            productService.isloading(true);
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.RefSearchBlockController.createCollection}', 
                                $scope.collectionName, angular.toJson($scope.selectedRefContentIds),
                                function(result, event) {
                                    $scope.$apply(function() {
                                        if (result != null && !result.includes('@@')) {
                                            $scope.showCreateCollectionModal = false;
                                            $scope.showCollectionCreatedMsg = true;
                                            //alert('{!$Label.Collection_created}');
                                            $scope.isCollectionCreated = true;
                                            $scope.collectionName = '';
                                            $scope.isErrorFound=false;
                                            $scope.selectOptions.push(JSON.parse($scope.parseResult(result)));
                                            $timeout(function() {
                                                $scope.showCollectionCreatedMsg = false;
                                            }, 4000);
                                        } else { 
                                            $scope.errMsg = result.replace('@@','');
                                            $scope.isErrorFound=true;
                                            $scope.isCollectionCreated = false;
                                        }
                                        productService.isloading(false);
                                       
                                    });
                                },
                                {escape: true}
                            );
                        } else {
                        	$scope.isErrorFound=true;
                            $scope.isCollectionNameBlank = true;
                            $scope.errMsg = '{!$Label.Please_fill_the_Name_of_Content_Collection}';
                        }
                    }
                    $scope.getAllCollections = function() {
                        productService.isloading(true);
                        $scope.selectOptions = [];
                        $scope.getContentCollections().then(function(result) {
                            if (result != '') {
                                $scope.selectOptions = result;
                            }
                            $scope.useCreateCollection = true;
                            productService.isloading(false);
                        });
                    }
                    $scope.getContentCollections = function() {
                    	var deferred = $q.defer();
						
						Visualforce.remoting.Manager.invokeAction(
							'{!$RemoteAction.RefSearchBlockController.getContentCollections}',
							function(result, event) {
                                if (result != null && result != '') {
                                    result = $scope.parseResult(result);
                                    deferred.resolve(JSON.parse(result));
                                }
							}
						);
						return deferred.promise;
                    }
                    $scope.cancelUseCollection = function() {
                        $scope.useCreateCollection = false;
                        $scope.isCollectionNotSelected = false;
                    }
                    $scope.saveUseCollection = function() {
                        if ($scope.selectedCollection == null || $scope.selectedCollection == '') {
                            $scope.isCollectionNotSelected = true;
                        } else {
                            $scope.useCreateCollection = false;
                            
                            if ($scope.selectedCollection.relatedRefContentIds) {
                                for(var loop=0; loop<$scope.selectedCollection.relatedRefContentIds.length; loop++) {
                                    var item = $scope.selectedCollection.relatedRefContentIds[loop];
                                    var index = $scope.selectedRefContentIds.indexOf(item);
                                    if (index == -1) {
                                        $scope.selectedRefContentIds.push(item);
                                    }
                                }	
                            }
                            $scope.shareRefContentIds();
                        }
                    }
                    $scope.openTypePopup = function(accWrap, $event) {
                       
                        if (accWrap.isInterviewType) {
                            $scope.isContentInterviewType = true;
                        } else {
                            $scope.isContentInterviewType = false;
                        }
                        $scope.contentIcon = '';
                        $scope.showTypeCustomModal = true;
                        $scope.customContentFields = accWrap.customContentFields;
                        $scope.isCustomContent = accWrap.refContent[$scope.nameSpace + $scope.Custom_Reference_Content];
                        $scope.contentTitle = accWrap.refContent[$scope.nameSpace + $scope.Title];
                        $scope.customContentFieldsList = accWrap.customContentFieldsList;
                        console.log($scope.isCustomContent);
                        $scope.contentType = accWrap.fileType;
                        $scope.contentId = accWrap.refContent.Id;
                        $scope.contentAccount = accWrap.accountName;
                        $scope.contentSummary = accWrap.refContent[$scope.nameSpace + $scope.Summary];
                        $scope.contentURL = accWrap.refContent[$scope.nameSpace + $scope.Content_URL] + (accWrap.refContent[$scope.nameSpace + 'Content_URL2__c'] == null ? '' : accWrap.refContent[$scope.nameSpace + 'Content_URL2__c']);
                        $scope.contentSize = (accWrap.contentVersion['ContentSize'] != null) ? accWrap.contentVersion['ContentSize'] + ' K' : '0 K'; 
                        $scope.orgWebsite = accWrap.orgWebsite;
                        $scope.orgDescription = accWrap.orgDescription;
                        $scope.speakerInfo = accWrap.speakerInfo;
                        $scope.photo = accWrap.photo;
                        $scope.videoList = accWrap.videoWrapList;
                        
                        $scope.showTypePopup = false;
                        $scope.showBackContentDrop = false;
                        
                        if ($scope.isContentInterviewType) {    
                            $scope.showTypePopup = true;
                            $scope.showBackContentDrop = true; 
                            $scope.showTypeCustomModal = false;                  
                            $(".content-type-panel").css("top", $($event.target).offset().top - 306);
                            $(".content-type-panel").css("left", $($event.target).offset().left + 38);
                        } 
                    }
                    
                    $scope.getRelatedAccounts = function(accIds) {
                        productService.isloading(true);
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefSearchBlockController.getRelatedAccountsForRefContent}', 
                            accIds,
                            function(result, event) {
                                if (result != '') {
                                    result = $scope.parseResult(result);
                                    $scope.$apply(function () {
                                        $scope.accRelatedToRefContent = JSON.parse(result);
                                        $scope.showRelatedAccountsModal = true;
                                        productService.isloading(false);
                                    });
                                }
                            },
                            {escape: true}
                        );
                    }
                    $scope.createCollection = function() {
                    	if ($scope.selectedRefContentIds.length == 0) {
                    		$scope.showSelectContentMsg = true;
                    		$scope.showCreateCollectionModal = false;
                    	} else {
	                    	$scope.showCreateCollectionModal = true;
	                    	$scope.showSelectContentMsg = false;
                    	}
                    }
                    $scope.isError = false;
                    
                    $scope.exportData = function() {
                    	
                    	if ($scope.totalContents > 0 && ($scope.filterResult.length > 0 || $scope.searchResult.length > 0)) {
	                    	var contentIdsToExport = [];
                            
                            if ($scope.filterResult.length > 0 && $scope.searchResult.length > 0) {
                            	contentIdsToExport = $scope.filterResult.filter((n) => $scope.searchResult.includes(n));
                            } else if ($scope.filterResult.length > 0 && $scope.searchResult.length == 0) {
                            	contentIdsToExport = $scope.filterResult;
                            } else if ($scope.filterResult.length == 0 && $scope.searchResult.length > 0) {
                            	contentIdsToExport = $scope.searchResult;
                            }
	                    	var form = document.createElement('form');
							form.setAttribute('method', 'POST');
							form.setAttribute('action', '{!URLFOR($Page.ExportPage)}');
							form.setAttribute('target', '_self');
							var hiddenField = document.createElement('input');
							hiddenField.setAttribute('type', 'hidden');
							hiddenField.setAttribute('name', 'allContentIds');
							hiddenField.setAttribute('value', contentIdsToExport.join(','));
							form.appendChild(hiddenField);
							var hiddenField1 = document.createElement('input');
							hiddenField1.setAttribute('type', 'hidden');
							hiddenField1.setAttribute('name', 'exportObjectName');
							hiddenField1.setAttribute('value', 'SearchedContent');
							form.appendChild(hiddenField1);

                            if ($scope.opportunityId != '' || $scope.leadId != '') {
                                var hiddenField2 = document.createElement('input');
                                hiddenField2.setAttribute('type', 'hidden');
                                if ($scope.opportunityId != '') {
                                    hiddenField2.setAttribute('name', 'opportunityId');
                                    hiddenField2.setAttribute('value', $scope.opportunityId);
                                } else {
                                    hiddenField2.setAttribute('name', 'leadId');
                                    hiddenField2.setAttribute('value', $scope.leadId);
                                } 
                                form.appendChild(hiddenField2);
                                var hiddenField3 = document.createElement('input');
                                hiddenField3.setAttribute('type', 'hidden');
                                hiddenField3.setAttribute('name', 'forAccount');
                                hiddenField3.setAttribute('value', $scope.forAccount);
                                form.appendChild(hiddenField3);
                                var hiddenField4 = document.createElement('input');
                                hiddenField4.setAttribute('type', 'hidden');
                                hiddenField4.setAttribute('name', 'forContent');
                                hiddenField4.setAttribute('value', $scope.forContent);
                                form.appendChild(hiddenField4);
                            }
                            var hiddenField5 = document.createElement('input');
                            hiddenField5.setAttribute('type', 'hidden');
                            hiddenField5.setAttribute('name', 'isSLDS');
                            hiddenField5.setAttribute('value', 'true');
                            form.appendChild(hiddenField5);
							document.body.appendChild(form);
							form.submit();
                    	} else if ($scope.totalContents > 0 && $scope.filterResult.length == 0) {
                    		
                    		getAllContentForExport().then(function(result) {
                    			var form = document.createElement('form');
								form.setAttribute('method', 'POST');
								form.setAttribute('action', '{!URLFOR($Page.ExportPage)}');
								form.setAttribute('target', '_self');
								var hiddenField = document.createElement('input');
								hiddenField.setAttribute('type', 'hidden');
								hiddenField.setAttribute('name', 'allContentIds');
								hiddenField.setAttribute('value', result.join(','));
								form.appendChild(hiddenField);
								var hiddenField1 = document.createElement('input');
								hiddenField1.setAttribute('type', 'hidden');
								hiddenField1.setAttribute('name', 'exportObjectName');
								hiddenField1.setAttribute('value', 'SearchedContent');
								form.appendChild(hiddenField1);

                                if ($scope.opportunityId != '' || $scope.leadId != '') {
                                    var hiddenField2 = document.createElement('input');
                                    hiddenField2.setAttribute('type', 'hidden');
                                    if ($scope.opportunityId != '') {
                                        hiddenField2.setAttribute('name', 'opportunityId');
                                        hiddenField2.setAttribute('value', $scope.opportunityId);
                                    } else {
                                        hiddenField2.setAttribute('name', 'leadId');
                                        hiddenField2.setAttribute('value', $scope.leadId);
                                    } 
                                    form.appendChild(hiddenField2);
                                    var hiddenField3 = document.createElement('input');
                                    hiddenField3.setAttribute('type', 'hidden');
                                    hiddenField3.setAttribute('name', 'forAccount');
                                    hiddenField3.setAttribute('value', $scope.forAccount);
                                    form.appendChild(hiddenField3);
                                    var hiddenField4 = document.createElement('input');
                                    hiddenField4.setAttribute('type', 'hidden');
                                    hiddenField4.setAttribute('name', 'forContent');
                                    hiddenField4.setAttribute('value', $scope.forContent);
                                    form.appendChild(hiddenField4);
                                }
                                var hiddenField5 = document.createElement('input');
                                hiddenField5.setAttribute('type', 'hidden');
                                hiddenField5.setAttribute('name', 'isSLDS');
                                hiddenField5.setAttribute('value', 'true');
                                form.appendChild(hiddenField5);
								document.body.appendChild(form);
								form.submit();
                    		});
                    	}
                    }
                    
                    function getAllContentForExport() {
                    	var deferred = $q.defer();
						
						Visualforce.remoting.Manager.invokeAction(
							'{!$RemoteAction.RefSearchBlockController.getAllRecordsForExport}',
							'content',
							function(result, event) {
								result = $scope.parseResult(result);
								deferred.resolve(JSON.parse(result));
							}
						);
						return deferred.promise;
                    }

                    //  Back to opportunity
                    $scope.backToOpportunity = function() {						
                       sforce.one.navigateToSObject($scope.opportunityId);                 
					}
                    // REF - 1377                    
                    $scope.openTagsPopup = function(accWrap, $event) {                     
                        $scope.contentTagsId = accWrap.refContent.Id;
                        $scope.contentTagsName = accWrap.refContent[$scope.nameSpace + $scope.Title];
                    //alert('content Id :::   '+$scope.contentTagsId);   
                    //  REF-1975
                        Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.RefSearchBlockController.inheritAccountAttribute}',
                        $scope.contentTagsId,                            
                            function(result, event) {

                                if(result != '') {
                                    result = $scope.parseResult(result);
                                    $scope.tagAttributes = result; 
                                }
                                $scope.showTagsPopup = true;
                                $scope.showBackContentDrop = true; 
                                $(".content-Tag-panel").css("top", $($event.target).offset().top - 23);
                                $(".content-Tag-panel").css("left", $($event.target).offset().left - 368); 
                                $scope.$apply();
                            }
                        );                    
                    }

                    $scope.showBackContentDropPopover = function() { 
                        $scope.showTagsPopup = false;
                        $scope.showTypePopup = false;
                        $scope.showBackContentDrop = false;                                       
                    }
                });

                function contntCountFunction() {
                    rfSearchContntCall(contntCount, viewedContntTotalCount);
                }
            </script>
        </head>    
        <body>   
            <div class="slds">   
                <div ng-controller="ContentBlockController" ng-init="intialFunction();" ng-cloak="ng-cloak" 
                	ng-class="{'slds-ref-search-sticky-header-block' : showMoreRecordsView, 'slds-ref-search-content-block' : showMoreRecordsView}">
                    <div style="height: 65px" ng-show="scrolledBelowSLDS"></div>
                    <div class="slds-page-header" role="banner">
                        <div class="slds-grid slds-wrap">
                            <div class="slds-col slds-size--1-of-2 slds-medium-size--1-of-2 slds-large-size--1-of-2">
                                <h1 class="slds-text-heading--medium slds-align-middle" title="{!$Label.Accounts}">
                                    {!$Label.Content}  
                                </h1>
                            </div>
                            <div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-1">
                                <div class="slds-button-group slds-float--right" role="group" ng-show="isCRMContentUser">
                                    <a class="slds-button slds-button--neutral" ng-click="backToOpportunity()" ng-show="opportunityId.length > 0 && forContent ">{!RIGHT($Label.Back_to_Opportunity,20)}</a>
                                    <a class="slds-button slds-button--neutral" ng-click="downloadRefContents()" ng-show="contents.length > 0">{!$Label.Download}</a>
                                    <a class="slds-button slds-button--neutral" ng-click="shareRefContentIds()" ng-show="!isFromInvitation && contents.length > 0"><span id="contntShareBtn">{!$Label.Share}</span></a>
                                    <a class="slds-button slds-button--neutral" ng-click="shareRefContentIds()" ng-show="isFromInvitation && contents.length > 0">{!$Label.Return_to_Invitation}</a>
                                    <a class="slds-button slds-button--neutral" ng-click="getAllCollections()" ng-show="selectOptions.length > 0">{!$Label.use_a_Content_Collection}</a>
                                    <a class="slds-button slds-button--neutral" ng-click="createCollection()" ng-show="leadId == '' && !fromLead && contents.length > 0 && isCollectionCreateable">{!$Label.Create_Collection}</a>
                                    <a class="slds-button slds-button--neutral" ng-click="exportData()" ng-show="!isBasicEdition && showExportButton && contents.length > 0">{!$Label.Export_Data}</a>
                                    <a class="slds-button slds-button--neutral" ng-click="backToRefsearchPage()" ng-show="!showMoreContent && contents.length > 5">{!$Label.Back_to_RF_Search}</a>
                                </div>
                            </div>
                            <div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-1">
                                <div class="slds-grid slds-wrap">
                                    <div class="slds-col slds-size--1-of-5 slds-medium-size--1-of-8 slds-large-size--1-of-8">
                                        <p class="slds-text-body--small slds-align-middle">
                                            Showing {{contents.length}} of {{totalContents}} Results
                                        </p>
                                    </div>
                                    <div class="slds-col slds-size--1-of-5 slds-medium-size--1-of-8 slds-large-size--1-of-8" ng-show="totalContents>5">
                                        <a style="cursor:pointer;margin: 1%;" ng-show="showMoreContent" ng-click="showMoreContents();">
                                            <span id="contentShowMore">{!$Label.Show_More}</span>
                                        </a>
                                        <a id="contentViewMore" style="cursor: pointer; margin: 1%;"
                                        		ng-show="!showMoreContent && contents.length < totalContents"
                                        		ng-click="more();"
                                        		ng-class="{disabledAnchorTag: fetchingData}">
                                            {!$Label.View_More}
                                        </a>
                                    </div>
                                    <div class="slds-col slds-size--3-of-5 slds-medium-size--6-of-8 slds-large-size--6-of-8" style="position:relative;top:-3px;height:0px" ng-show="isCRMContentUser">
                                        <span class="slds-text-body--small slds-align-middle slds-p-right--x-small" style="position:relative;bottom:8px">Internal</span>
                                        <nz-toggle tri-toggle="tri-toggle" ng-model="shareableValue"
                                                    on-toggle="getContentsData(true)" height="20" width="60"
                                                    val-true="'Shareable'" val-false="'Internal'" val-null="'All'">
                                        </nz-toggle>
                                        <span class="slds-text-body--small slds-align-middle slds-p-left--x-small" style="position:relative;bottom:8px">Shareable</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="slds-notify slds-notify--alert slds-theme--inverse-text slds-theme--alert-texture" role="alert" ng-show="contents.length == 0">
                        {!$Label.No_matches_found}
                    </div>
                    <div class="slds-scrollable--x slds-scrollable--y" ng-show="contents.length > 0" style="max-height:auto;">
                        <table class="slds-table slds-table--bordered slds-max-medium-table--stacked-horizontal content-search slds-ref-search-records-table">
                            <thead>
                                <tr class="slds-text-heading--label">
                                    <th class="slds-row-select" scope="col">
                                        <label class="slds-checkbox" >
                                            <input name="checkbox" type="checkbox" ng-click="selectAll()" ng-disabled="!isCRMContentUser" ng-model="isAllContentSelected"/>
                                            <span class="slds-checkbox--faux" id="contentSelection"></span>
                                        </label>
                                    </th>
                                    <th scope="col" ng-repeat="column in columnsList" style="min-width: 40px">
                                        <div ng-show="column.isSelected || !contentColumnsSaved || allContentColsHidden">
                                            <span class="slds-truncate" ng-show="column.name != 'Featured' && column.name != 'Icon' && column.name != 'Share' && column.name != 'Tags'">
                                                {{column.label}}                                                
                                            </span>
                                            <div ng-show="(column.name == 'Share')" style="text-align: center;">
                                                    {{column.label}}
                                            </div>
                                            <div ng-show="(column.name == 'Tags')" style="text-align: center;">
                                                    {{column.label}}
                                            </div>
                                            <span class="slds-truncate" ng-show="column.name == 'Icon'"></span>
                                            <img ng-show="featuredChecked && column.name == 'Featured'" src="{!URLFOR($Resource.starImages,'startImages/starchecked.png')}" ng-click="filterfeaturedContent()" style="width: 20px;"/>
                                            <img ng-show="!featuredChecked && column.name == 'Featured'" src="{!URLFOR($Resource.starImages,'startImages/startunchecked.png')}" ng-click="filterfeaturedContent()" style="width: 20px;"/>
                                        </div>
                                    </th>
                                </tr>
                            </thead>
                            <tbody> 
                                <tr ng-repeat="accWrap in contents|orderBy:orderByField:reverseSort" class="slds-hint-parent">
                                    <td class="slds-row-select">
                                        <label class="slds-checkbox">
                                            <input ng-show="false" ng-disabled="!isCRMContentUser || accWrap.refContent[nameSpace + Internal_Use]
                                                                                || (!accWrap.refContent[nameSpace + Custom_Reference_Content] && accWrap.contentVersion.Id == null
                                                                                    && accWrap.fileType != 'LINK' && !accWrap.isInterviewType)"
               										type="checkbox" ng-change="selectDeselect(accWrap.refContent.Id, accWrap)" ng-model="accWrap.isSelected" />
                                            <span class="slds-checkbox--faux"></span>
                                        </label>
                                    </td>
                                    <td ng-repeat="column in columnsList" data-label="{{column.label}}" role="row">
                                        <img ng-show="((column.isSelected && column.name == 'Featured')
                                                            || (!contentColumnsSaved && column.name == 'Featured')
                                                            || (allContentColsHidden && column.name == 'Featured'))
                                                            && accWrap.refContent[nameSpace + Featured_Content]" src="{!URLFOR($Resource.starImages,'startImages/starchecked.png')}" title="{!$Label.Featured_Content}" style="width: 20px;"/>
                                        <div ng-show="((column.isSelected && column.name == 'Share')
                                                            || (!contentColumnsSaved && column.name == 'Share')
                                                            || (allContentColsHidden && column.name == 'Share'))
                                                            && !accWrap.refContent[nameSpace + Internal_Use]" style="width: 12px; height: 12px; border-radius: 50%; background: green; margin-left: 40%;">
                                        </div>
                                        <div ng-show="((column.isSelected && column.name == 'Share')
                                                            || (!contentColumnsSaved && column.name == 'Share')
                                                            || (allContentColsHidden && column.name == 'Share'))
                                                            && accWrap.refContent[nameSpace + Internal_Use]" style="width: 12px; height: 12px; border-radius: 50%; background: red; margin-left: 40%;">
                                        </div>
                                        <img ng-show="accWrap.refContent[nameSpace + Custom_Reference_Content] && ((column.isSelected && column.name == 'Icon')
                                                            || (!contentColumnsSaved && column.name == 'Icon')
                                                            || (allContentColsHidden && column.name == 'Icon'))" class="type-icon" ng-click="openTypePopup(accWrap, $event)" src="{{customContentSymbol}}" style="width: 20px;"/>
                                        <img ng-show="!accWrap.refContent[nameSpace + Custom_Reference_Content] && ((column.isSelected && column.name == 'Icon')
                                                            || (!contentColumnsSaved && column.name == 'Icon')
                                                            || (allContentColsHidden && column.name == 'Icon'))" class="type-icon" ng-click="openTypePopup(accWrap, $event)" src="{{resource + doctypeMap[accWrap.fileType]}}" style="width: 20px;"/>
                                        <div ng-show="(column.isSelected && column.name == 'Title')
                                                                || (!contentColumnsSaved && column.name == 'Title')
                                                                || (allContentColsHidden && column.name == 'Title')" class="content-table-title-content">
                                            <a title="{{accWrap.refContent[nameSpace + Title]}}" href="/{{accWrap.refContent.Id}}" target="_blank">
                                                {{parseResult(accWrap.refContent[nameSpace + Title])}}
                                            </a>
                                        </div>
                                        <a ng-show="(column.isSelected && column.name == 'Type')
                                                            || (!contentColumnsSaved && column.name == 'Type')
                                                            || (allContentColsHidden && column.name == 'Type')" style="cursor: pointer;" href="/{{accWrap.refContent[nameSpace + Ref_Content_Type]}}" target="_blank">
                                            {{accWrap.contentType}}
                                        </a>
                                        <span ng-show="((column.isSelected && column.name == 'Account')
                                                            || (!contentColumnsSaved && column.name == 'Account')
                                                            || (allContentColsHidden && column.name == 'Account'))
                                                            && accWrap.accountId.length == 0">
                                        </span>
                                        <a ng-show="((column.isSelected && column.name == 'Account')
                                                            || (!contentColumnsSaved && column.name == 'Account')
                                                            || (allContentColsHidden && column.name == 'Account'))
                                                            && accWrap.accountId.length == 1" title="{{accWrap.accountName}}" style="cursor: pointer;" href="/{{accWrap.accountId[0]}}" target="_blank" class="custom-ellipsis-class">
                                            {{accWrap.accountName}}
                                        </a>
                                        <a ng-show="((column.isSelected && column.name == 'Account')
                                                            || (!contentColumnsSaved && column.name == 'Account')
                                                            || (allContentColsHidden && column.name == 'Account'))
                                                            && accWrap.accountId.length > 1" style="cursor: pointer;" ng-click="getRelatedAccounts(accWrap.accountId)" target="_blank">
                                            {{accWrap.accountName}}
                                        </a>
                                        <!--  Tags Section  -->
                                        <div  style="text-align: center;">
                                            <img ng-show="(column.isSelected && column.name == 'Tags') || (!contentColumnsSaved && column.name == 'Tags')
                                                            || (allContentColsHidden && column.name == 'Tags')" class="type-Tag" ng-click="openTagsPopup(accWrap, $event)"
                                                            src="{!URLFOR($Resource.RFSearch_Icons,'Tags.svg')}"  style="width: 29px; cursor: pointer;"/>
                                        </div>
                                        <!--  End Tags Section  -->
                                        <span ng-show="(column.isSelected && column.name == 'PublishDate')
                                                            || (!contentColumnsSaved && column.name == 'PublishDate')
                                                            || (allContentColsHidden && column.name == 'PublishDate')" class="slds-truncate">
                                            {{accWrap.publishDate}}
                                        </span>
                                        <span ng-show="(column.isSelected && column.name == 'Language')
                                                            || (!contentColumnsSaved && column.name == 'Language')
                                                            || (allContentColsHidden && column.name == 'Language')" class="slds-truncate">
                                            {{accWrap.refContent[nameSpace + Language]}}
                                        </span>
                                        <span ng-show="(column.isSelected && column.name == 'Attributes')
                                                            || (!contentColumnsSaved && column.name == 'Attributes')
                                                            || (allContentColsHidden && column.name == 'Attributes')" class="slds-truncate inner-content">
                                            {{accWrap.refContent[nameSpace + Attributes]}}
                                        </span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                        <!--    Tags Section  REF-1377  -->
                        <div ng-show="showTagsPopup" class="slds-popover slds-popover--panel slds-nubbin--right-top content-Tag-panel not-hide" role="dialog">
                            <button class="slds-button slds-button--icon-container" ng-click="showBackContentDropPopover()" style="cursor: pointer; position: absolute; right: 0;">
                                <svg aria-hidden="true" class="slds-button__icon">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                </svg>
                            </button>
                            <div class="slds-popover__header not-hide">
                                <div class="slds-media slds-media--center slds-m-bottom--small not-hide">
                                    <div class="slds-media__body not-hide">
                                        <a href="/{{contentTagsId}}" target="_blank" title="{{contentTagsName}}" class="slds-text-heading--medium not-hide">
                                            {{contentTagsName}}
                                        </a>
                                    </div>
                                </div>
                                <div class="slds-grid slds-wrap not-hide">
                                    <footer class="slds-grid slds-wrap slds-grid_pull-padded">
                                        <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                            <dl>
                                            <dt>
                                                <p class="slds-text-title_caps slds-truncate" title="{!$Label.Attributes}" style="text-transform:uppercase; color: #556886;">{!$Label.Attributes}</p>
                                            </dt>
                                            <dd>
                                                <p class="slds-truncate tagAttributeCntnt" title="{!$Label.Attributes}">{{tagAttributes}}</p>                                                
                                            </dd>
                                            </dl>
                                        </div>                               
                                    </footer>
                                </div>
                           </div> 
                        </div> 
                        <!--    End of Tags Section    -->
                        <div class=" ng-scope popoverContentBackdrop" ng-click="showBackContentDropPopover()" ng-show="showBackContentDrop"></div> 

                        <div ng-show="showTypePopup" class="slds-popover slds-popover--panel slds-nubbin--left-bottom content-type-panel not-hide" role="dialog">
                            <button class="slds-button slds-button--icon-container" ng-click="showBackContentDropPopover()" style="cursor: pointer; position: absolute; right: 0;">
                                <svg aria-hidden="true" class="slds-button__icon">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                </svg>
                            </button>
                            <div class="slds-popover__header not-hide">
                                <div class="slds-media slds-media--center slds-m-bottom--small not-hide">
                                    <div class="slds-media__figure not-hide">
                                        <span class="slds-avatar slds-avatar--large not-hide" style="width: auto; height: auto;">
                                            <img ng-show="isCustomContent" class="not-hide" src="{{customContentSymbol}}" />
                                            <img ng-show="!isCustomContent" class="not-hide" src="{{resource + doctypeMap[contentType]}}" />
                                        </span>
                                    </div>
                                    <div class="slds-media__body not-hide">
                                        <a href="/{{contentId}}" target="_blank" title="{{contentTitle}}" class="slds-text-heading--medium not-hide">
                                            {{contentTitle}}
                                        </a> 
                                    </div>
                                </div>
                                <!--<div class="slds-grid slds-wrap not-hide" ng-show="!isContentInterviewType && !isCustomContent">
                                    <div class="slds-col slds-size--1-of-5 slds-p-bottom--x-small not-hide">
                                        <div class="slds-grid slds-wrap not-hide">
                                            <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                                <dl class="not-hide">
                                                    <dt class="not-hide">
                                                        <p class="slds-text-heading--label slds-truncate not-hide">
                                                            {!$Label.Type}
                                                        </p>
                                                    </dt>
                                                    <dd class="slds-truncate not-hide">
                                                        {{contentType}}
                                                    </dd>
                                                </dl>
                                            </div>
                                            <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                                <dl class="not-hide">
                                                    <dt class="not-hide">
                                                        <p class="slds-text-heading--label slds-truncate not-hide">
                                                            {!$Label.Account}
                                                        </p>
                                                    </dt>
                                                    <dd ng-show="contentAccount != ''" class="slds-truncate not-hide">
                                                        {{contentAccount}}
                                                    </dd>
                                                </dl>
                                            </div>
                                            <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                                <dl class="not-hide">
                                                    <dt class="not-hide">
                                                        <p class="slds-text-heading--label slds-truncate not-hide">
                                                            {!$Label.Size}
                                                        </p>
                                                    </dt>
                                                    <dd class="slds-truncate not-hide" ng-show="contentSize != ''">
                                                        {{contentSize}}
                                                    </dd>
                                                </dl>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="slds-col slds-size--4-of-5 slds-p-bottom--x-small slds-p-left--small not-hide" style="width:70% !important;">
                                        <dl class="not-hide">
                                            <dt class="not-hide">
                                                <p class="slds-text-heading--label slds-truncate not-hide">
                                                    {!$Label.Summary}
                                                </p>
                                            </dt>
                                            <dd class="not-hide">
                                                <div class="slds-text-body--regular not-hide" style="white-space: normal; word-wrap: break-word;">
                                                    <p class="slds-scrollable--y not-hide">{{contentSummary}}</p>
                                                </div>
                                            </dd>
                                        </dl>
                                    </div>
                                    <div class="slds-size--1-of-1 not-hide" ng-show="!isContentInterviewType " style="text-align: center">
                                        <a class="slds-button slds-button--neutral" ng-show="contentType != 'LINK' && contentType != 'UNKNOWN'" ng-click="downloadRefContentFromPopup(contentId)">{!$Label.Download}</a>
                                        <a class="slds-button slds-button--neutral" ng-show="contentType == 'LINK'" ng-click="openLinkURL(contentId, contentURL)">{!$Label.Open}</a>
                                        <a class="slds-button slds-button--neutral" href="/{{contentId}}" ng-show="isViewDetailsUpdateable" target="_blank" ng-click="openDetailPage(contentId)">{!$Label.View_Details}</a>
                                    </div>
                                </div>
                                <div class="slds-grid slds-wrap not-hide" ng-show="!isContentInterviewType && isCustomContent">
                                    <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                        <div class="slds-text-body--regular not-hide" style="white-space: normal; word-wrap: break-word;">
                                            <div class="slds-scrollable--y not-hide">
                                                <div class="panel-group not-hide" id="accordion" role="tablist" aria-multiselectable="true">
                                                    <div class="panel panel-default not-hide" style="background: none; border: none">
                                                        <div class="panel-body not-hide">
                                                            <div style="overflow-y: auto;">
                                                                <div style="overflow: hidden;overflow-y: auto;">
                                                                    <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                                                        <p class="slds-text-heading--label slds-truncate not-hide">
                                                                            {!$Label.Account}
                                                                        </p>
                                                                        <p ng-show="contentAccount != ''" class="slds-truncate not-hide">
                                                                            {{contentAccount}}
                                                                        </p>
                                                                    </div>
                                                                    <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide" ng-repeat="item in customContentFieldsList">
                                                                        <p class="slds-text-heading--label slds-truncate not-hide">
                                                                            {{item.label}}
                                                                        </p>
                                                                        <span class="slds-truncate not-hide" ng-if="item.type == 'BOOLEAN'" >
                                                                            <input type="checkbox" name="options" value="on" ng-checked="item.value == 'true' || item.value == 'TRUE'" ng-disabled="true"/>
                                                                        </span>
                                                                        <p class="slds-truncate not-hide" ng-if="item.type != 'BOOLEAN'" ng-bind="item.value">
                                                                        </p>
                                                                    </div>
                                                                    <div class="slds-col sslds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                                                        <p class="slds-text-heading--label slds-truncate not-hide">
                                                                            {!$Label.Summary}
                                                                        </p>
                                                                        <div>
                                                                            <p class="slds-scrollable--y not-hide">{{contentSummary}}</p>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="slds-size--1-of-1 not-hide" ng-show="!isContentInterviewType && isViewDetailsUpdateable" style="text-align: center">
                                        <a class="slds-button slds-button--neutral" href="/{{contentId}}" target="_blank" ng-click="openDetailPage(contentId)">{!$Label.View_Details}</a>
                                    </div>
                                </div>-->
                                <div class="slds-grid slds-wrap not-hide" ng-show="isContentInterviewType">
                                    <div class="slds-col slds-size--1-of-2 slds-p-bottom--x-small not-hide">
                                        <dl class="not-hide">
                                            <dt class="not-hide">
                                                <p class="slds-text-heading--label slds-truncate not-hide">
                                                    {!$Label.Type}
                                                </p>
                                            </dt>
                                            <dd class="slds-truncate not-hide">
                                                {{contentType}}
                                            </dd>
                                        </dl>
                                    </div>
                                    <div class="slds-col slds-size--1-of-2 slds-p-bottom--x-small not-hide">
                                        <dl class="not-hide">
                                            <dt class="not-hide">
                                                <p class="slds-text-heading--label slds-truncate not-hide">
                                                    {!$Label.Account}
                                                </p>
                                            </dt>
                                            <dd ng-show="contentAccount != ''" class="slds-truncate not-hide">
                                                {{contentAccount}}
                                            </dd>
                                        </dl>
                                    </div>
                                    <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                        <dl class="not-hide">
                                            <div class="slds-text-body--regular not-hide" style="white-space: normal; word-wrap: break-word;">
                                                <div class="slds-scrollable--y not-hide">
                                                    <div class="panel-group not-hide" id="accordion" role="tablist" aria-multiselectable="true">
                                                        <div class="panel panel-default not-hide" style="background: none; border: none">
                                                            <div class="panel-heading not-hide" role="tab" id="headingInfo" style="background: none;">
                                                                <h4 class="panel-title not-hide">
                                                                    <a class="collapsed not-hide" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseInfo" aria-expanded="true" aria-controls="collapseInfo" style="display: block; text-decoration: none;">
                                                                        <strong class="not-hide">{!$Label.Info}</strong>
                                                                    </a>
                                                                </h4>
                                                            </div>
                                                            <div id="collapseInfo" class="panel-collapse collapse not-hide" role="tabpanel" aria-labelledby="headingInfo">
                                                                <div class="panel-body not-hide" style="padding: 10px 0 5px 0;">
                                                                    <div class="slds-section__title not-hide">
                                                                        <strong class="not-hide">{!$Label.Speaker_Info}</strong>
                                                                    </div>
                                                                    <p class="slds-scrollable--y not-hide">{{speakerInfo}}</p>
                                                                    <div class="slds-section__title not-hide">
                                                                        <strong class="not-hide">{!$Label.Org_Website}</strong>
                                                                    </div>
                                                                    <p class="slds-scrollable--y not-hide">{{orgWebsite}}</p>
                                                                    <div class="slds-section__title not-hide">
                                                                        <strong class="not-hide">{!$Label.Org_Description}</strong>
                                                                    </div>
                                                                    <p class="slds-scrollable--y not-hide">{{orgDescription}}</p>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="panel panel-default not-hide" ng-repeat="video in videoList" style="background: none; border: none">
                                                            <div class="panel-heading not-hide" role="tab" id="heading-{{$index}}" style="background: none;">
                                                                <h4 class="panel-title not-hide">
                                                                    <a class="collapsed not-hide" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapse-{{$index}}" aria-expanded="true" aria-controls="collapse-{{$index}}" style="display: block; text-decoration: none;">
                                                                        <strong class="not-hide">{{video.questionTitle}}</strong>
                                                                    </a>
                                                                </h4>
                                                            </div>
                                                            <div id="collapse-{{$index}}" class="panel-collapse collapse not-hide" role="tabpanel" aria-labelledby="heading-{{$index}}">
                                                                <div class="panel-body not-hide" style="padding: 10px 0 5px 0;">
                                                                    <div class="not-hide" anguvideo="anguvideo" ng-model="video.videoURL" width="305"></div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </dl>
                                    </div>
                                </div>
                            </div>
                        </div> 
                    </div>
                    <div ng-show="showTypeCustomModal">
                        <div aria-hidden="false" role="dialog" class="slds-modal slds-fade-in-open" >
                            <div class="slds-modal__container">
                                <div class="slds-modal__header">
                                    <button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="showTypeCustomModal = false">
                                        <img id="close-Image" src="{!URLFOR($Resource.LightningCSS, '/assets/icons/action/close_120.png')}" alt="close" height="20" width="20"/>
                                    </button>
                                    <h2 class="slds-text-heading--medium">{{contentTitle}}</h2>
                                </div>
                                <div class="slds-modal__content slds-p-around--medium" > 
                                    <div class="slds-form-element">
                                        <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                            <dl class="not-hide">
                                                <dt class="not-hide">
                                                    <p class="slds-text-heading--label slds-truncate not-hide">
                                                        {!$Label.Account}
                                                    </p>
                                                </dt>
                                                <dd ng-show="contentAccount != ''" class="slds-truncate not-hide">
                                                    {{contentAccount}}
                                                </dd>
                                            </dl>
                                        </div>
                                    </div>
                                    <div class="slds-form-element" ng-show="!isCustomContent && !isContentInterviewType">
                                        <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                            <dl class="not-hide">
                                                <dt class="not-hide">
                                                    <p class="slds-text-heading--label slds-truncate not-hide">
                                                        {!$Label.Type}
                                                    </p>
                                                </dt>
                                                <dd class="slds-truncate not-hide">
                                                    {{contentType}}
                                                </dd>
                                            </dl>
                                        </div>
                                        <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                            <dl class="not-hide">
                                                <dt class="not-hide">
                                                    <p class="slds-text-heading--label slds-truncate not-hide">
                                                        {!$Label.Size}
                                                    </p>
                                                </dt>
                                                <dd class="slds-truncate not-hide" ng-show="contentSize != ''">
                                                    {{contentSize}}
                                                </dd>
                                            </dl>
                                        </div>
                                    </div>
                                    <div class="slds-form-element" ng-show="isCustomContent && !isContentInterviewType">
                                        <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide" ng-repeat="item in customContentFieldsList">
                                            <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                                <dl class="not-hide">
                                                    <dt class="not-hide">
                                                        <p class="slds-text-heading--label slds-truncate not-hide">
                                                            {{item.label}}
                                                        </p>
                                                    </dt>
                                                    <dd class="slds-truncate not-hide">
                                                        <span class="slds-truncate not-hide" ng-if="item.type == 'BOOLEAN'" >
                                                            <input type="checkbox" name="options" value="on" ng-checked="item.value == 'true' || item.value == 'TRUE'" ng-disabled="true"/>
                                                        </span>
                                                        <p class="slds-truncate not-hide" ng-if="item.type != 'BOOLEAN'" ng-bind="item.value">
                                                        </p>
                                                    </dd>
                                                </dl>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="slds-form-element" ng-show="!isContentInterviewType">
                                        <div class="slds-col slds-size--1-of-1 slds-p-bottom--x-small not-hide">
                                            <dl class="not-hide">
                                                <dt class="not-hide">
                                                    <p class="slds-text-heading--label slds-truncate not-hide">
                                                        {!$Label.Summary}
                                                    </p>
                                                </dt>
                                                <dd class="slds-truncate not-hide" style="white-space: pre-wrap;">
                                                    <pre style="white-space: pre-wrap;padding:unset;border:none;background-color: unset;font-family: unset;word-break: unset;">{{contentSummary}}</pre>
                                                </dd>
                                            </dl>
                                        </div>
                                    </div>
                                </div>
                                <div class="slds-modal__footer">
                                    <button class="slds-button slds-button--neutral"  ng-show="isCustomContent && !isContentInterviewType && !isViewDetailsUpdateable" ng-click="showTypeCustomModal = false;return false;">{!$Label.Cancel}</button>
                                    <div class="slds-size--1-of-1 not-hide" ng-show="!isCustomContent && !isContentInterviewType " style="text-align: center">
                                        <a class="slds-button slds-button--neutral" ng-show="contentType != 'LINK' && contentType != 'UNKNOWN'" ng-click="downloadRefContentFromPopup(contentId)">{!$Label.Download}</a>
                                        <a class="slds-button slds-button--neutral" ng-show="contentType == 'LINK'" ng-click="openLinkURL(contentId, contentURL)">{!$Label.Open}</a>
                                        <a class="slds-button slds-button--neutral" href="/{{contentId}}" ng-show="isViewDetailsUpdateable" target="_blank" ng-click="openDetailPage(contentId)">{!$Label.View_Details}</a>
                                    </div>
                                    <div class="slds-size--1-of-1 not-hide" ng-show="isCustomContent && !isContentInterviewType && isViewDetailsUpdateable" style="text-align: center">
                                        <a class="slds-button slds-button--neutral" href="/{{contentId}}" target="_blank" ng-click="openDetailPage(contentId)">{!$Label.View_Details}</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="slds-backdrop slds-backdrop--open"></div>
                    </div>
                    <div ng-show="useCreateCollection">
                        <div id="modelUseCollection" aria-hidden="false" role="dialog" class="slds-modal slds-fade-in-open" >
                            <div class="slds-modal__container">
                                <div class="slds-modal__header">
                                    <button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="useCreateCollection = false">
                                        <img src="{!URLFOR($Resource.LightningCSS, '/assets/icons/action/close_120.png')}" alt="close" height="20" width="20"/>
                                    </button>
                                    <h2 class="slds-text-heading--medium">{!$Label.Select_Collection}</h2>
                                </div>
                                <div class="slds-modal__content slds-scrollable--y">
                                    <div class="slds-grid slds-wrap">
                                        <div id="error-block" ng-show="isCollectionNotSelected" class="slds-p-around--small" style="width: 100%">
                                            <strong>
                                                {!$Label.Please_review_the_following_errors}
                                            </strong>
                                            <p>
                                                {!$Label.Please_select_content_collection}
                                            </p>
                                        </div>
                                        <div class="slds-col--padded slds-col slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-1 slds-text-heading--small" style="font-size:15px;">{!$Label.Please_select_content_collection}</div>
                                        <div style="text-align: center;" class="slds-col--padded slds-col slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-1">
                                            <select class="slds-select" ng-model="selectedCollection" ng-options="item as item.label for item in selectOptions" ng-change="isCollectionNotSelected = false">
                                                <option value="" label="--None--"></option>
                                                <!-- <option ng-repeat="option in selectOptions" value="{{option.value}}">{{option.label}}</option> -->
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="slds-modal__footer">
                                    <div class="slds-x-small-buttons--horizontal">
                                        <a class="slds-button slds-button--neutral" ng-click="cancelUseCollection()">{!$Label.Cancel}</a>
                                        <a class="slds-button slds-button--neutral" ng-click="saveUseCollection()">{!$Label.Continue}</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="slds-backdrop slds-backdrop--open"></div>
                    </div>
                    <div class="slds-notify_container" ng-show="showSelectContentMsg">
					    <div class="slds-notify slds-notify--toast" role="alert" style="position: fixed; top: 0; width: 50%; z-index: 999; left: 50%; margin-left: -25%;">
					        <span class="slds-assistive-text">Info</span>
					        <button class="slds-button slds-notify__close slds-button--icon-inverse" title="Close" ng-click="showSelectContentMsg = false">
					            <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
					                <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
					            </svg>
					            <span class="slds-assistive-text">Close</span>
					        </button>
					        <div class="slds-notify__content">
					            <h2 class="slds-text-heading--small" style="font-size: 16px">{!$Label.Select_Atleast_One_Content}</h2>
					        </div>
					    </div>
					</div>  
					 <div class="slds-notify_container" ng-show="isInternalUseContent">
					    <div class="slds-notify slds-notify--toast" role="alert" style="position: fixed; top: 0; width: 50%; z-index: 999; left: 50%; margin-left: -25%;">
					        <span class="slds-assistive-text">Info</span>
					        <button class="slds-button slds-notify__close slds-button--icon-inverse" title="Close" ng-click="isInternalUseContent = false">
					            <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
					                <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
					            </svg>
					            <span class="slds-assistive-text">Close</span>
					        </button>
					        <div class="slds-notify__content">
					            <h2 class="slds-text-heading--small" style="font-size: 16px">{!$Label.Internal_Content_Share}</h2>
					        </div>
					    </div>
					</div>
                    <div ng-show="showCreateCollectionModal">
                        <div aria-hidden="false" role="dialog" class="slds-modal slds-fade-in-open" >
                            <div class="slds-modal__container">
                                <div class="slds-modal__header">
                                    <button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="cancelContentCollection()">
                                        <img id="close-Image" src="{!URLFOR($Resource.LightningCSS, '/assets/icons/action/close_120.png')}" alt="close" height="20" width="20"/>
                                    </button>
                                    <h2 ng-show="selectedRefContentIds.length == 0" class="slds-text-heading--medium">Select atleast one content</h2>
                                    <h2 ng-show="selectedRefContentIds.length > 0" class="slds-text-heading--medium">{!$Label.Create_Collection}</h2>
                                </div>
                                <div class="slds-modal__content slds-p-around--medium">
                                    <div ng-show="selectedRefContentIds.length == 0">
                                        {!$Label.Select_Atleast_One_Content}
                                    </div>
                                    <div ng-show="selectedRefContentIds.length > 0">
                                        <div id="error-block" ng-show="isErrorFound" class="slds-p-around--small">
                                            <strong>
                                                {!$Label.Please_review_the_following_errors}
                                            </strong>
                                            <p>
                                                {{errMsg}}
                                            </p>
                                        </div>
                                        <div class="slds-form-element">
                                            <label class="slds-form-element__label">{!$Label.Name}</label>
                                            <div class="slds-form-element__control">
                                                <input class="slds-input" type="text" ng-model="collectionName" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="slds-modal__footer">
                                    <button class="slds-button slds-button--neutral" ng-show="selectedRefContentIds.length > 0" ng-click="cancelContentCollection()">{!$Label.Cancel}</button>
                                    <button class="slds-button slds-button--brand" ng-show="selectedRefContentIds.length > 0" ng-click="saveContentCollection()">{!$Label.Save}</button>
                                    <button class="slds-button slds-button--neutral" ng-show="selectedRefContentIds.length == 0" ng-click="showCreateCollectionModal = false">{!$Label.Ok}</button>
                                </div>
                            </div>
                        </div>
                        <div class="slds-backdrop slds-backdrop--open"></div>
                    </div>
                    <!-- <div ng-show="showCollectionCreatedMsg" style="position: absolute;">
                        <div class="slds-notify_container">
                            <div class="slds-notify slds-notify--toast" role="alert">
                                <button class="slds-button slds-button--icon-inverse slds-notify__close" ng-click="showCollectionCreatedMsg = false">
                                    <img id="close-Image" src="{!URLFOR($Resource.LightningCSS, '/assets/icons/action/close_120.png')}" alt="close" height="20" width="20" />
                                </button>
                                <div class="notify__content">
                                    <h2 class="slds-text-heading--small">{!$Label.Collection_created}</h2>
                                </div>
                            </div>
                        </div>
                    </div> -->
                    <div id="collection-created-msg" ng-show="showCollectionCreatedMsg" class="slds-notify_container">
                        <div ng-show="isCollectionCreated" class="slds-notify slds-notify--toast slds-theme--success" role="alert">
                            <span class="slds-assistive-text">Success</span>
                            <button class="slds-button slds-button--icon-inverse slds-notify__close">
                                <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large" ng-click="showCollectionCreatedMsg = false" style="cursor:pointer">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                </svg>
                                <span class="slds-assistive-text">Close</span>
                            </button>
                            <div class="slds-notify__content slds-grid">
                                <svg aria-hidden="true" class="slds-icon slds-icon--small slds-m-right--small slds-col slds-no-flex">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#success')}"></use>
                                </svg>
                                <div class="slds-col slds-align-middle">
                                    <h2 class="slds-text-heading--small">{!$Label.Collection_created}</h2>
                                </div>
                            </div>
                        </div>
                        <div ng-show="!isCollectionCreated" class="slds-notify slds-notify--toast slds-theme--error" role="alert">
                            <span class="slds-assistive-text">Error</span>
                            <button class="slds-button slds-button--icon-inverse slds-notify__close">
                                <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large" ng-click="showCollectionCreatedMsg = false" style="cursor:pointer">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                </svg>
                                <span class="slds-assistive-text">Close</span>
                            </button>
                            <div class="slds-notify__content slds-grid">
                                <svg aria-hidden="true" class="slds-icon slds-icon--small slds-m-right--small slds-col slds-no-flex">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#error')}"></use>
                                </svg>
                                <div class="slds-col slds-align-middle">
                                    <h2 class="slds-text-heading--small">{!$Label.Collection_not_created}</h2>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- <div ng-show="isCollectionNameBlank" id="contentNameNotification">
                        <div class="slds-notify_container">
                            <div class="slds-notify slds-notify--toast" role="alert">
                                <button class="slds-button slds-button--icon-inverse slds-notify__close" ng-click="isCollectionNameBlank = false">
                                    <img id="close-Image" src="{!URLFOR($Resource.LightningCSS, '/assets/icons/action/close_120.png')}" alt="close" height="20" width="20" />
                                </button>
                                <div class="notify__content">
                                    <h2 class="slds-text-heading--small">{!$Label.Please_fill_the_Name_of_Content_Collection}</h2>
                                </div>
                            </div>
                        </div>
                    </div> -->
                    <div class="slds-notify_container" ng-show="showLinkMsg">
					    <div class="slds-notify slds-notify--toast" role="alert" style="position: fixed; top: 0; width: 50%; z-index: 999; left: 50%; margin-left: -25%;">
					        <span class="slds-assistive-text">Info</span>
					        <button class="slds-button slds-notify__close slds-button--icon-inverse" title="Close" ng-click="showLinkMsg = false">
					            <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
					                <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
					            </svg>
					            <span class="slds-assistive-text">Close</span>
					        </button>
					        <div class="slds-notify__content">
					            <h2 class="slds-text-heading--small" style="font-size: 16px">{!$Label.Link_Content_Message}</h2>
					        </div>
					    </div>
					</div>
                    <div ng-show="isDownloadUnsuccessful">
                        <div class="slds-modal slds-fade-in-open" aria-hidden="false" role="dialog">
                            <div class="slds-modal__container">
                                <div class="slds-modal__header slds-modal__header--empty">
                                    <button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="closeDownloadNotification()">
                                        <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </button>
                                </div>
                                <div class="slds-modal__content slds-p-around--medium" ng-show="showNoFileAvailableMsg">
                                    No file available for download.
                                </div>
                                <div class="slds-modal__content slds-p-around--medium" ng-show="showDownloadError">
                                    Download Unsuccessful. Please try again.
                                </div>
                                <div class="slds-modal__footer">
                                    <button class="slds-button slds-button--neutral slds-button--brand" ng-click="closeDownloadNotification()">{!$Label.Ok}</button>
                                </div>
                            </div>
                        </div>
                        <div class="slds-backdrop slds-backdrop--open"></div>
                    </div>
                    <div ng-show="showRelatedAccountsModal">
                        <div id="relatedAccsModal" class="slds-modal slds-fade-in-open slds-modal--large" aria-hidden="false" role="dialog">
                            <div class="slds-modal__container">
                                <div class="slds-modal__header">
                                    <button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="showRelatedAccountsModal = false">
                                        <img id="close-Image" src="{!URLFOR($Resource.LightningCSS, '/assets/icons/action/close_120.png')}" alt="close" height="20" width="20" />
                                        <span class="slds-assistive-text">Close</span>
                                    </button>
                                    <h2 class="slds-text-heading--medium">{!$Label.Related_Accounts}</h2>
                                </div>
                                <div class="slds-modal__content slds-p-around--medium">
                                    <table class="slds-table slds-table--bordered slds-max-medium-table--stacked-horizontal">
                                        <thead>
                                            <tr class="slds-text-heading--label">
                                                <th scope="col">
                                                    <span class="slds-truncate">
                                                        {!$ObjectType.Account.fields.Name.Label}
                                                    </span>
                                                </th>
                                                <th scope="col">
                                                    <span class="slds-truncate">
                                                        {!$ObjectType.Account.fields.Type.Label}
                                                    </span>
                                                </th>
                                                <th scope="col">
                                                    <span class="slds-truncate">
                                                        {!$Label.Referenceable}
                                                    </span>
                                                </th>
                                                <th scope="col">
                                                    <span class="slds-truncate">
                                                        {!$Label.Referenceability_Status}
                                                    </span>
                                                </th>
                                            </tr>
                                        </thead>  
                                        <tbody>
                                            <tr class="slds-hint-parent" ng-repeat="acc in accRelatedToRefContent">
                                                <td style="min-width: 250px" data-label="{!$ObjectType.Account.fields.Name.Label}">
                                                  <a href="/{{acc.id}}" target="_blank" >
                                                    {{acc.name}}
                                                    </a>
                                                </td>
                                                <th data-label="{!$ObjectType.Account.fields.Type.Label}">
                                                    {{acc.accType}}
                                                </th>
                                                <td data-label="{!$Label.Referenceable}">
                                                    <div class="slds-form-element__control">
                                                        <span class="slds-form-element__static">
                                                            <label class="slds-checkbox">
                                                                <input type="checkbox" ng-model="acc.isReferenceable" disabled="disabled" />
                                                                <span class="slds-checkbox--faux"></span>
                                                            </label>
                                                        </span>
                                                    </div>
                                                </td>
                                                <td data-label="{!$Label.Referenceability_Status}">
                                                    {{acc.referenceabilityStatus}}
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="slds-backdrop slds-backdrop--open"></div>
                    </div>
                </div>
            </div>
        </body>
    </html>
</apex:component>