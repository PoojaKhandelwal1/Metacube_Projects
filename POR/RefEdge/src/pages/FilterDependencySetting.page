<!-- 
    * ReferenceEdge
    * 
    * Point of Reference, Inc. - Copyright 2014 All rights reserved.
    *
    * @company : Point of Reference, Inc.
    * @website : www.point-of-reference.com
    *
    * Disclaimer: THIS SOFTWARE IS PROVIDED "AS-IS" BY POINT OF REFERENCE ("POR"), 
    * WITH NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE SOFTWARE, 
    * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
    * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. 
    * POR SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, 
    * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES. POR IS NOT LIABLE FOR, 
    * AND MAKES NO REPRESENTATIONS OR WARRANTIES REGARDING, THE ACTIONS OR OMISSIONS OF 
    * ANY THIRD PARTIES (OR THE PRODUCTS OR SERVICES OFFERED BY ANY THIRD PARTIES) INCLUDING, 
    * WITHOUT LIMIATION, SALESFORCE.COM. COPY, USE OR DISTRIBUTION PROHIBITED WITHOUT EXPRESS 
    * WRITTEN CONSENT FROM COMPANY.
-->
<apex:page Controller="FilterDependencyController"
       showHeader="true"
        tabStyle="Custom_Settings__c" 
       sidebar="false"
        applyHtmlTag="true" 
        applyBodyTag="true" 
        docType="html-5.0">
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <head>
            <apex:stylesheet value="{!URLFOR($Resource.LightningCSS_2_3, 'assets/styles/custom-slds.css')}" />   
            <apex:includeScript value="{!URLFOR($Resource.AngularJS)}"/>
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js"></script>
            <apex:stylesheet value="{!URLFOR($Resource.Font, 'font-awesome-4.5.0/css/font-awesome.min.css')}" />
            <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.7/angular-resource.min.js"></script>
            <apex:stylesheet value="{!URLFOR($Resource.ClassicCSS)}" />
            <style>
                .classicselect {
                    color: black;
                    background-color: white;
                }
                .slds-checkbox [type="checkbox"][disabled] + .slds-checkbox_faux:after, .slds-checkbox [type="checkbox"][disabled] + .slds-checkbox--faux:after, .slds-checkbox [type="checkbox"][disabled] ~ .slds-checkbox_faux:after, .slds-checkbox [type="checkbox"][disabled] ~ .slds-checkbox--faux:after, .slds-checkbox [type="checkbox"][disabled] + .slds-checkbox__label .slds-checkbox_faux:after, .slds-checkbox [type="checkbox"][disabled] + .slds-checkbox__label .slds-checkbox--faux:after {
                    border-color: #7d8894; 
                }
				.slds .slds-checkbox [type="checkbox"][disabled] > .slds-checkbox_faux, .slds .slds-checkbox [type="checkbox"][disabled] ~ .slds-checkbox--faux {
					background-color: white;
				}

				.tooltip:hover .tooltipHelpHide {
				    display : none;
                    bottom: 65px;
                    position: absolute;
				}
                .tooltip:hover .tooltipHelpShow {
                    display : inline;
                    bottom: 36px;
                    left: 62px;
                    position: absolute;
                }
                .tooltipHelpShow {
                    display : none;
                    bottom: 36px;
                    left: 62px;
                    line-height: 0.95rem;
                    position: absolute;
                }
				.tooltipHelpHide {
				    display : inline;
                    bottom: 65px;
                    position: absolute;
				}
                div.tooltipClassic {
                    opacity:0.35;
                    width: 20px;
                    float: right;
                    margin-right: 1px;
                    display:inline;
                }
                div.tooltipClassic:hover {
                    opacity:1;
                    width: 20px;
                    float: right;
                    margin-right: 1px;
                    display:inline;
                }
                div.tooltipClassic span {
                    display: none;
                    font-weight:normal;
                    text-align:left;
                    padding: 3px 5px;
                    margin-left: 8px;
                    width: 250px;
                }
                div.tooltipClassic:hover span {
                    display: inline;
                    position: absolute;
                    border: 1px solid orange;
                    width: 15em;
                    z-index: 1;
                    background-color: #fefdb9;
                    padding: 2px 5px;
                    border: 1px solid orange;
                    text-align: left;
                    right: 25px;
                    top: 25px;
                    white-space: normal;
                    font-weight: normal;
                    color: #000;
                }
                .labelCol {
                    padding-top: 3px;
                    padding-bottom: 3px;
                    padding-right: 10px;
                    padding-left: 2px;
                    text-align: right;
                    font-size: 91%;
                    font-weight: bold;
                    color: #4a4a56;
                }
                .container {
                    position: fixed;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    overflow-x: hidden;
                    overflow-y: scroll;
                }
                .editIcon {
                    fill: #bec0c5;
                }
                .warningIcon {
                    fill: #FFB75D;
                }
                .editableFormElement:HOVER .editIcon {
                    fill: #444444;
                }
                .slds {
                    background: white !important;
                }
                #classicDiv {
                    min-height:80vh;
                }
                #classicDiv .tertiaryPalette {
                    background: #79b4cd;
                    border-color: #79b4cd;
                    margin-bottom: 0.5rem;
                }
                #classicDiv .tertiaryPalette h3 {
                    font-size: 1.1em !important;
                }
                .classicTableHeaderCell {
                    background: #f2f3f3;
                    border-width: 0 0 1px 1px;
                    border-color: #e0e3e5;
                    color: #000;
                    font-size: 1em;
                    color: #54698d;
                    padding: 5px 2px 4px 5px;
                    border: 1px solid #ededed;
                }
                .classicSpinner {
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    margin-left: -30px;
                }
                .classicSpinnerBackground {
                    top: 0;
                    height: 70vh;
                    left: 0;
                    right: 0;
                    background-color: WHITE;
                    opacity: 0.7;
                    z-index: 9999;
                }
                .headcol {
                    position: absolute!important;
                    width: 20rem;
                    left: 2.6rem;
                    top: auto;
                }
                .headcol2 {
                    position: absolute!important;
                    width: 5rem;
                    left: 22.6rem;
                    top: auto;
                }
                .headcollight {
                    position: absolute!important;
                    border-left: 1px solid #d8dde6;
                    border-bottom: 1px solid #d8dde6;
                    width: 20rem;
                    left: 2rem;
                    top: auto;
                }
                .headcol2light {
                    position: absolute!important;
                    border-bottom: 1px solid #d8dde6;
                    width: 7rem;
                    left: 22rem;
                    top: auto;
                }
                .pageHeader {
                    background-color: #F4F6F9;
                }
                .classicModal {
                    background-color: #f8f8f8;
                    box-shadow: 0 0 20px #6D6D6D;
                    position: fixed;
                    left: 50%;
                    z-index: 999;
                }
                .classicModalHeader {
                    background-color: #03a7e5;
                    border-radius: 3px;
                    margin: 2px;
                    padding: 0.3rem 0.3rem 0.3rem 1.2rem;
                }
                .classicModalHeader a {
                    float: right;
                    line-height: 1.5em;
                    color: #f8f8f8;
                    border-radius: 3px;
                    padding: 0 0.28rem;
                    cursor: pointer;
                }
                .classicModalHeader a:HOVER {
                    background-color: #f8f8f8;
                    color: #ff6a00;
                }
                .classicModalHeader span {
                    color: #f8f8f8;
                    font-weight: bold;
                    line-height: 150%;
                }
                .classicModalContent {
                    padding: 0.5rem 1rem;
                    max-height: 20rem;
                    overflow-y: auto;
                }
                .classicTablebodyCell {
                    border-width: 0 0 1px 0;
                    border-color: #ededed;
                    border-style: solid;
                    padding: 4px 2px 4px 5px;
                    font-size: .9em;
                }
                .classicModalFooter {
                    padding: 0.6rem 1.6rem;
                    text-align: right;
                    background-color: #eeeeee;
                    border-top: 1px solid lightgray;
                }
                .classicModalFooter a {
                    line-height: 220%;
                    text-decoration: none !important;
                    color: black;
                    padding: 4px 3px;
                }
                .classicModalbackdrop {
                    background-color: black;
                    opacity: 0.20;
                    filter: alpha(opacity = 20);
                    position: absolute;
                    width: 100%;
                    height: 100%;
                    top: 0;
                    left: 0;
                    z-index: 99;
                }
                .modalErrorMsg {
                    border-radius: 4px;
                    background-color: #ffc;
                    border-style: solid;
                    border-width: 1px;
                    color: #000;
                    padding: 6px 8px 6px 6px;
                    margin: 4px 4px 10px 4px;
                    float: left;
                    width: 98%;
                    display: block;
                }
                .errorPageMsgDiv {
                    border-radius: 4px;
                    background-color: #ffc;
                    border-style: solid;
                    border-width: 1px;
                    color: #000;
                    padding: 6px 8px 6px 6px;
                    margin: 4px 20px;
                }
                .successImg {
                    background-image: url(/img/msg_icons/info32.png);
                    background-position: 0 0;
                    width: 32px;
                    height: 32px;
                    background-size: 32px;
                }
                .errorImg {
                    background-image: url(/img/msg_icons/error24.png);
                    background-position: 0 0;
                    width: 32px;
                    height: 32px;
                    background-size: 32px;
                }  
            </style>
            <script> 
                var myapp = angular.module('myapp',  []);
                var infiniteScrollDIrective = myapp.directive('whenScrolled',
                    function() {
                        return function(scope, elm, attr) {
                            var raw = elm[0];
                            
                            elm.bind('scroll', function() {
                            
                                if (raw.scrollLeft + raw.offsetWidth > raw.scrollWidth) {
                                    scope.$apply(attr.whenScrolled);
                                }
                            });
                        };
                    } 
                );
                myapp.filter('mapLimitTo', [function(){
                    return function(obj, limit){
                        var keys = Object.keys(obj);
                        if(keys.length < 1){
                            return [];
                        }
                        var ret = new Object,
                        count = 0;
                        angular.forEach(keys, function(key){
                            if(count >= limit){
                                return false;
                            }
                            ret[key] = obj[key];
                            count++;
                        });
                        return ret;
                    };
                }]);
                myapp.controller('controller', function ($scope, $q, $window, $filter, $location) {
                    $scope.isLoading = true;
                    $scope.isSLDS = {!isSLDS};
                    $scope.unsavedChanges = '{!$Label.Unsaved_Changes}';
                    $scope.cs = '{!JSENCODE(cs)}';
                    $scope.isEdit = false;
                    $scope.isView = false;
                    $scope.isViewClicked = false;
                    $scope.isError = false;
                    $scope.errorMsg = '';
                    $scope.recordToDel = '';
                    $scope.currentRecord = {};
                    $scope.tempCurrentRecord = {};
                    $scope.attributeMap = [];
                    $scope.visibleList = [];
                    $scope.attributeDependencyList = [];
                    $scope.showConfirmDelete = false;
                    $scope.showEditPanel = false;
                    $scope.confirmDeleteMsg = 'Are you sure?';
                    $scope.dateFormat = '{!JSENCODE(dateFormat)}';
                    $scope.todayDate = '{!JSENCODE(todayDate)}';
                    $scope.showFilterSelect = false;
                    $scope.filterDependencyList = [];
                    $scope.allFilters = {}; 
                    $scope.filterListControl = [];
                    $scope.filterListDepend = [];
                    $scope.selectedDependent = '';
                    $scope.selectedControl = '';
                    $scope.showAttPanel = false;
                    $scope.scrollLeft = true;
                    $scope.showMore = true;
                    $scope.showMoreLimit = 0;
                    $scope.depSize = 0;
                    $scope.getMoreData = function () {
                        if ($scope.scrollLeft){
                            $scope.isLoading = true;
                            $scope.getAttributeDependencyList().then( function(result) {
                                $scope.attributeDependencyList = $scope.attributeDependencyList.concat(result);
                                $scope.isLoading = false;
                                if (result.length < 50) {
                                    $scope.scrollLeft = false;
                                }
                            });
                        }
                    }
                    $scope.getMoreDataControlling = function () {
                        if ($scope.showMore){
                            $scope.showMoreLimit += 50;
                            
                            if ($scope.showMoreLimit > $scope.depSize) {
                                $scope.showMoreLimit = $scope.depSize;
                                $scope.showMore = false;
                            }
                        }
                        
                    }
                    $scope.init = function () { 
                        $scope.filterDependencyList = [];
                        $scope.recordToDel = '';
                        $scope.scrollLeft = true;
                        $scope.showConfirmDelete = false;
                        $scope.confirmDeleteMsg = 'Are you sure?';
                        $scope.showEditPanel = false;
                        $scope.isEdit = false;
                        $scope.isView = false;
                        $scope.isViewClicked = false;
                        $scope.allFilters = {}; 
                        $scope.isError = false;
                        $scope.errorMsg = '';
                        $scope.attributeMap = [];
                        $scope.visibleList = [];
                        $scope.attributeDependencyList = [];
                        $scope.filterListControl = [];
                        $scope.filterListDepend = [];
                        $scope.showFilterSelect = false;
                        $scope.showAttPanel = false;
                        $scope.isLoading = true;
                        $scope.unsavedChanges = $scope.unsavedChanges.replace(/\n/g, " ");
                        $scope.getFilterDependencyList().then( function(result) {
                            $scope.filterDependencyList = JSON.parse(result[0]); 
                            $scope.allFilters = JSON.parse(result[1]); 
                            $scope.isLoading = false;
                        });
                    
                    }

                    $scope.confirmDelete = function (entry) { 
                        $scope.recordToDel = entry.dmRecord;
                        if ($scope.currentRecord.dmRecord == $scope.recordToDel) {
                            $scope.confirmDeleteMsg = 'Unsaved changes will be lost and this entry will be deleted. Are you sure?';
                        }
                        $scope.showConfirmDelete = true;
                    }

                    $scope.newDependency = function () { 
                        $scope.currentRecord = {};
                        $scope.scrollLeft = true;
                        $scope.tempCurrentRecord = {};
                        $scope.filterListControl = [];
                        $scope.filterListDepend = [];
                        $scope.selectedDependent = '';
                        $scope.selectedControl = '';
                        var dependents = [];
                        $scope.isEdit = false;
                        $scope.isView = false;
                        $scope.isViewClicked = false;

                        // get list of all dependent and do not allow them in dependent filter list
                        angular.forEach($scope.filterDependencyList, function(value) {
                            dependents.push(value.dFId);
                        }); 

                        angular.forEach($scope.allFilters, function(value, key) {
                                        
                            if (dependents.indexOf(key) < 0) {
                                $scope.filterListDepend.push(key);
                            }
                            $scope.filterListControl.push(key);
                        });
                        $scope.showFilterSelect = true;
                        $scope.showAttPanel = false;
                    }
                    $scope.cancelDependency  = function () { 
                        $scope.currentRecord = {} ;
                        $scope.tempCurrentRecord = {};
                        $scope.isEdit = false;
                        $scope.isViewClicked = false;
                        $scope.isView = false;
                        $scope.filterListControl = [];
                        $scope.filterListDepend = [];
                        $scope.showAttPanel = false;
                        $scope.scrollLeft = true;
                        $scope.attributeMap = [];
                        $scope.visibleList = [];
                        $scope.attributeDependencyList = [];
                        $scope.showFilterSelect = false;
                    }

                    $scope.saveDependency  = function () { 
                        $scope.saveFilterDependency().then( function(result) {
                            if (result != null && result != 'true' && result != true) {
                                $scope.isError = true;
                                $scope.errorMsg = $scope.parseResult(result);
                            } else if (result != null) {
                                $scope.isEdit = false;
                                $scope.isViewClicked = false;
                                $scope.isView = false;
                                $scope.showAttPanel = false;
                                $scope.attributeMap = [];
                                $scope.visibleList = [];
                                $scope.attributeDependencyList = [];
                                $scope.showFilterSelect = false;
                                $scope.init();
                            }
                        });
                    } 
                    $scope.view = function (entry,view) { 
                        $scope.isViewClicked = true;
                        $scope.editDependency(entry,true);
                    } 
                    $scope.editDependency = function (dmRecord,view) { 
                        
                        if ($scope.showAttPanel && !$scope.isView && !$scope.showEditConfirmation) { 
                            $scope.showEditConfirmation = true;
                            $scope.tempCurrentRecord = dmRecord;
                        } else {
                            $scope.scrollLeft = true;
                            $("#matrix").scrollLeft(0);
                            $("#matrixLightning").scrollLeft(0);                            
                            $scope.isEdit = dmRecord != null;
                            $scope.isLoading = true;
                            $scope.showEditConfirmation = false;
                            $scope.currentRecord = dmRecord;
                            $scope.tempCurrentRecord = {};
                            $scope.showFilterSelect = false;
                            $scope.attributeMap = [];
                            $scope.visibleList = [];
                            $scope.showMore = true;
                            $scope.showMoreLimit = 0;
                            $scope.showEditConfirmation = false;
                            $scope.depSize = 0;
                            $scope.isView = view == null ? false : view;
                            $scope.isView = $scope.isView == false ? $scope.isViewClicked : $scope.isView;
                            $scope.isViewClicked = false;
                            $scope.attributeDependencyList = [];
                            $scope.getAttributeDependencyList().then( function(result) {
                                $scope.attributeMap = JSON.parse(result[0]);
                                $scope.attributeDependencyList = JSON.parse(result[1]);
                                $scope.currentRecord = JSON.parse(result[2]);
                                $scope.visibleList = JSON.parse(result[3]);
                                $scope.depSize = Object.keys($scope.attributeMap).length;
                                $scope.getMoreDataControlling();
                                if ($scope.isEdit || $scope.isView) {
                                    $scope.selectedDependent = dmRecord.dFId;
                                    if (!$scope.filterListDepend.includes($scope.selectedDependent)) {
                                        $scope.filterListDepend.push($scope.selectedDependent);
                                    }
                                    $scope.selectedControl = dmRecord.cFId;
                                    if (!$scope.filterListControl.includes($scope.selectedControl)) {
                                        $scope.filterListControl.push($scope.selectedControl);
                                    }
                                } 
                                $scope.isLoading = false;
                                $scope.showAttPanel = true;
                            });
                        }
                    }
                    $scope.valueUnchecked = function (dependent,entry) { 
                        var selected = false;
                        if (entry.dependentWrapperList.indexOf(dependent) == -1) {
                            entry.dependentWrapperList.push(dependent);
                            if ($scope.visibleList.indexOf(dependent) == -1) {
                                $scope.visibleList.push(dependent);
                            }
                        } else {
                            entry.dependentWrapperList.splice(entry.dependentWrapperList.indexOf(dependent), 1);
                            selected = false;
                            for(var index = 0 ; index < $scope.attributeDependencyList.length && !selected; index++) {
                               selected = selected || $scope.attributeDependencyList[index].dependentWrapperList.indexOf(dependent) != -1;
                            } 
                            if (!selected && $scope.visibleList.indexOf(dependent) != -1) {
                                $scope.visibleList.splice($scope.visibleList.indexOf(dependent), 1);
                            }
                        }
                    }

                    $scope.deleteEntry = function (response) { 
                        $scope.isError = false;
                        $scope.showConfirmDelete = false;

                        if (response) {
                            $scope.deleteFilterDependency().then( function(result) {
                                if (result != 'true') {
                                    $scope.isError = true;
                                    $scope.errorMsg = $scope.parseResult(result);
                                } else {
                                    $scope.isLoading = true;
                                    if ($scope.currentRecord.dmRecord == $scope.recordToDel) {
                                        $scope.init();
                                    } else {
                                        $scope.recordToDel = '';
                                        $scope.showConfirmDelete = false;
                                        $scope.confirmDeleteMsg = 'Are you sure?';
                                        $scope.getFilterDependencyList().then(function(result) {
                                            $scope.filterDependencyList = JSON.parse(result[0]); 
                                            $scope.allFilters = JSON.parse(result[1]); 
                                            $scope.isLoading = false;
                                        });
                                    }
                                }
                            });
                        } else {
                            $scope.recordToDel = '';
                        }
                    
                    }
                    //remoteAction call
                    $scope.getFilterDependencyList = function() {
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.FilterDependencyController.getFilterDependencyList}' ,
                            function(result, event) {
                                if (result != null) {
                                    result = $scope.parseResult(result);
                                    deferred.resolve(JSON.parse(result)); 
                                }
                            }
                        );
                        return deferred.promise;    
                    }

                    //remoteAction call
                    $scope.deleteFilterDependency = function() {
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.FilterDependencyController.deleteFilterDependency}' ,
                            $scope.recordToDel,
                            function(result, event) {
                                deferred.resolve(result); 
                            }
                        );
                        return deferred.promise;    
                    }

                    //remoteAction call
                    $scope.getAttributeDependencyList = function(depList) {
                        var deferred = $q.defer();
                        var depListString = '';
                        if ($scope.attributeDependencyList && $scope.attributeDependencyList.length > 0) {
                            var depList = []
                            angular.forEach($scope.attributeDependencyList,function(value) {
                                depList.push(value.id);
                            });
                            depListString = JSON.stringify(depList);
                        } 
                        var param = $scope.isEdit ? JSON.stringify($scope.currentRecord) : $scope.selectedControl + ';' + $scope.selectedDependent;
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.FilterDependencyController.getAttributeDependencyList}' ,
                            param,
                            depListString,
                            !$scope.isEdit,
                            function(result, event) {
                                if (result != null) {
                                    result = $scope.parseResult(result);
                                    deferred.resolve(JSON.parse(result)); 
                                }
                            }
                        );
                        return deferred.promise;
                    }

                    //remoteAction call
                    $scope.saveFilterDependency = function() {
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.FilterDependencyController.saveFilterDependency}' ,
                            JSON.stringify($scope.attributeDependencyList),
                            !$scope.isEdit,
                            JSON.stringify($scope.currentRecord),
                            function(result, event) {
                                if (result != null) {
                                    result = $scope.parseResult(result);
                                    deferred.resolve(JSON.parse(result)); 
                                }
                            }
                        );
                        return deferred.promise;    
                    }

                    $scope.backToCustomSetting = function() {
                        if ($scope.isSLDS) {
                           sforce.one.navigateToURL('/' + $scope.cs + '?nooverride=1', true);
                        } else {
                            window.location.href = '/' + $scope.cs + '?nooverride=1';
                        }
                    }

                    $scope.parseResult = function(result) {
                        if (result != null) {
                            result = result.replace(/&quot/gi, '"');
                            result = result.replace(/&amp/g, '&');
                            result = result.replace(/&lt/g, '<');
                            result = result.replace(/&gt/g, '>');
                            result = result.replace(/;/g, '');
                            result = result.replace(/&#39/g, '\'');
                            return result;
                        }
                    }
                }); 
            </script>
        </head>
        <div id="angularPanel" align="left" ng-app="myapp" ng-controller="controller">
            <div ng-init="init();">
                <div ng-show="isSLDS" id="lightningDiv" class="container slds" ng-cloak="true" style="margin-bottom: 52px;">
                    <div role="status" ng-show="isLoading" class="slds-spinner slds-spinner_medium slds-spinner_brand">
                        <span class="slds-assistive-text">{!$Label.Loading}</span>
                        <div class="slds-spinner__dot-a"></div> 
                        <div class="slds-spinner__dot-b"></div>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>
                    <!-- toast -->
                    <div id="toast-msg" ng-cloak="true" ng-show="isError && !isLoading" class="slds-notify_container">
                        <div class="slds-notify slds-notify--toast slds-theme--error" role="alert">
                            <span class="slds-assistive-text">{!$Label.Error}</span>
                            <button class="slds-button slds-button--icon-inverse slds-notify__close">
                                <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large" ng-click="isError = false;" style="cursor:pointer">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                </svg>
                                <span class="slds-assistive-text">{!$Label.Close}</span>
                            </button>
                            <div class="slds-notify__content slds-grid">
                                <svg aria-hidden="true" class="slds-icon slds-icon--small slds-m-right--small slds-col slds-no-flex">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS, '/assets/icons/utility-sprite/svg/symbols.svg#error')}"></use>
                                </svg>
                                <div class="slds-col slds-align-middle">
                                    <h2 class="slds-text-heading--small" style="white-space: pre-wrap;" ng-show="isError">{{parseResult(errorMsg)}}</h2>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div ng-show="showConfirmDelete && !isLoading" ng-cloak="true">
                        <div class="slds-modal slds-fade-in-open" aria-hidden="false" role="dialog">
                            <div class="slds-modal__container" style="width: 30%;">
                                <header class="slds-modal__header slds-modal__header_empty">
                                    <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" ng-click="deleteEntry(false);">
                                        <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large" style="cursor:pointer">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                        <span class="slds-assistive-text">{!$Label.Close}</span>
                                    </button>
                                </header>
                                <div class="slds-modal__content slds-p-around--medium">
                                    <div>
                                        {{confirmDeleteMsg}}
                                    </div>
                                </div>
                                <div class="slds-modal__footer">
                                    <button class="slds-button slds-button_neutral" style="font-weight: normal;" ng-click="deleteEntry(true)">{!$Label.Yes}</button>
                                    <button class="slds-button slds-button_brand" style="font-weight: normal;" ng-click="deleteEntry(false);">{!$Label.Cancel}</button>
                                </div>
                            </div>
                        </div>
                        <div class="slds-backdrop slds-backdrop--open"></div>
                    </div>
                    <div ng-show="showEditConfirmation && !isLoading" ng-cloak="true">
                        <div class="slds-modal slds-fade-in-open" aria-hidden="false" role="dialog">
                            <div class="slds-modal__container" style="width: 30%;">
                                <header class="slds-modal__header slds-modal__header_empty">
                                    <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" ng-click="deleteEntry(false);">
                                        <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large" style="cursor:pointer">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                        <span class="slds-assistive-text">{!$Label.Close}</span>
                                    </button>
                                </header>
                                <div class="slds-modal__content slds-p-around--medium">
                                    <div>
                                        {{unsavedChanges}}
                                    </div>
                                </div>
                                <div class="slds-modal__footer">
                                    <button class="slds-button slds-button_neutral" style="font-weight: normal;" ng-click="editDependency(tempCurrentRecord,false);">{!$Label.Yes}</button>
                                    <button class="slds-button slds-button_brand" style="font-weight: normal;"  ng-click="showEditConfirmation = false;">{!$Label.Cancel}</button>
                                </div>
                            </div>
                        </div>
                        <div class="slds-backdrop slds-backdrop--open"></div>
                    </div>
                    <div style="width: 100%;" role="banner" ng-cloak="true"> 
                        <div style="display: inline-block;width:95%;margin-top: 1rem;margin-left: 2.1rem;font-size: 0.75rem;">
                            <a ng-click="backToCustomSetting();" style="cursor: pointer;" >{!$Label.Back_to_the_Custom_Setting_Page}</a>
                            <div style="display: inline-block;width: 65%;text-align: center;font-size: 0.8rem;">
                                <h1 style="font-size: 1.5em;width: 100%;text-align: center;" class="slds-page-header__title slds-m-right--small slds-align-middle slds-truncate">{!$Label.Dependent_Filter}</h1>
                            </div>
                            <button ng-hide="showAttPanel && !isView" style="font-weight: normal;float:right;" ng-click="newDependency();"  class="slds-button slds-button_neutral">{!$Label.New}</button>
                            <button ng-show="showAttPanel && !isView" style="font-weight: normal;float:right;" ng-click="saveDependency();"  class="slds-button slds-button_neutral">{!$Label.Save}</button>
                            <button ng-show="showAttPanel && !isView" style="font-weight: normal;float:right;" ng-click="cancelDependency();"  class="slds-button slds-button_neutral">{!$Label.Cancel}</button>
                        </div>
                    </div>
                    <div ng-cloak="true" style="font-size: 0.75rem;">
                        <div class="slds-section slds-border_bottom" >
                            <table class="slds-table slds-table--bordered slds-table--col-bordered" style="width:95%;margin-left: 2rem;border-bottom:none">
                                <div style="margin-left: 3rem;margin-top:0.7rem;" ng-hide="filterDependencyList.length == 0">{!$Label.Existing_Dependencies}</div>
                                <div style="margin-left: 3rem;margin-top:0.7rem;" ng-show="filterDependencyList.length == 0 && !showFilterSelect">No {!$Label.Existing_Dependencies}</div>
                                <thead ng-hide="filterDependencyList.length == 0">
                                    <tr class="slds-text-heading--label">
                                        <th scope="col" style="border-left: 1px solid #d8dde6;">
                                            <div class="slds-truncate"></div>
                                        </th>
                                        <th scope="col" style="border-left: 1px solid #d8dde6;">
                                            <div class="slds-truncate"></div>
                                        </th>
                                        <th scope="col" style="border-left: 1px solid #d8dde6;">
                                            <div class="slds-truncate"></div>
                                        </th>
                                        <th scope="col" style="border-left: 1px solid #d8dde6;">
                                            <div class="slds-truncate slds-text-title_caps">{!$Label.Controlling_Filter}</div>
                                        </th>
                                        <th scope="col" style="border-left: 1px solid #d8dde6; border-right: 1px solid #d8dde6;">
                                            <div class="slds-truncate slds-text-title_caps">{!$Label.Dependent_Filter}</div>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody ng-hide="filterDependencyList.length == 0">
                                    <tr ng-show="filterDependencyList.size() == 0">
                                        <td colspan="4" style="border-left: 1px solid #d8dde6; border-right: 1px solid #d8dde6;">
                                            <div class="slds-truncate" >{!$Label.No_Records_Found}</div>
                                        </td>
                                    </tr>
                                    <tr ng-repeat="entry in filterDependencyList">
                                        <td style="border-left: 1px solid #d8dde6;">
                                            <div class="slds-form-element">
                                                <div class="slds-form-element__icon slds-align-middle">
                                                    <button class="slds-button slds-button_icon slds-cell-edit__button " style="border: none!important;box-shadow: none!important;" ng-click="editDependency(entry,false);">
                                                        <svg aria-hidden="true" class="slds-button__icon">
                                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"></use>
                                                        </svg>
                                                        <span class="slds-assistive-text">{!$Label.Edit}</span>
                                                    </button>
                                                </div>
                                            </div>
                                        </td>
                                        <td style="border-left: 1px solid #d8dde6;">
                                            <button class="slds-button" style="line-height: 1.2;font-weight: normal;box-shadow:none;" ng-click="view(entry);">{!$Label.View}</button>
                                        </td>
                                        <td style="border-left: 1px solid #d8dde6; ">
                                            <button class="slds-button" style="line-height: 1.2;font-weight: normal;box-shadow:none;" ng-click="confirmDelete(entry);">{!$Label.Delete}</button>
                                        </td>
                                        <td style="border-left: 1px solid #d8dde6;">
                                            <div class="slds-truncate">{{allFilters[entry.cFId]}}</div>
                                        </td>
                                        <td style="border-left: 1px solid #d8dde6; border-right: 1px solid #d8dde6;">
                                            <div class="slds-truncate">{{allFilters[entry.dFId]}}</div>
                                        </td>
                                    </tr> 
                                </tbody>
                            </table>
                        </div>
                        <div class="slds-section" ng-cloak="true" ng-show="showFilterSelect && !isLoading" style="width:95%;margin-left:2rem;margin-top: 1rem;">
                            <div style="width:90%;display:flex;">
                                <!--<div class="slds-col slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-1 remove-flex top-padding" -->
                                <div class="slds-form-element" style="flex:0.45;margin-right: 3rem;">
                                    <label class="slds-form-element__label slds-text-title_caps" style="display:inline;">{!$Label.Controlling_Filter}</label>
                                    <div class="slds-form-element__control" style="display:inline;">
                                        <select style="width: 60%;" ng-model="selectedControl" class="slds-select ng-pristine ng-valid ng-not-empty ng-touched" >
                                            <option label="--None--" value=""></option> 
                                            <option ng-show="key != selectedDependent" ng-repeat="key in filterListControl" value="{{key}}">{{allFilters[key]}}</option>
                                        </select> 
                                    </div>
                                </div>
                                <div class="slds-form-element" style="flex:0.45;margin-right: 3rem;">
                                    <label class="slds-form-element__label slds-text-title_caps" style="display:inline;">{!$Label.Dependent_Filter}</label>
                                    <div class="slds-form-element__control" style="display:inline;">
                                        <select style="width: 60%;" ng-model="selectedDependent" class="slds-select ng-pristine ng-valid ng-not-empty ng-touched" >
                                            <option label="--None--" value=""></option> 
                                            <option ng-show="key != selectedControl" ng-repeat="key in filterListDepend" value="{{key}}">{{allFilters[key]}}</option>
                                        </select> 
                                    </div>
                                </div>
                                <button style="align-self: center;font-weight: normal;flex:0.1" ng-show="!showAttPanel && selectedDependent != '' && selectedControl != ''" ng-click="editDependency();" class="slds-button slds-button_brand">Create</button>
                            </div>
                        </div>
                        <div ng-show="showAttPanel && !isLoading" ng-cloak="true" style="margin-top: 2rem;font-weight: bold;">
                            <div class="slds-text-heading_label" style="display:inline-block;margin-left:2.2rem;">
                                <span ng-bind="allFilters[selectedDependent]"/>
                            </div>
                            <div class="slds-text-heading_label" style="display:inline-block;position: absolute;left: 31rem;">
                                <span ng-bind="allFilters[selectedControl]"/>
                            </div>
                        </div>
                        <div id="matrixLightning" style="width: 60%;overflow-x: scroll;margin-left: 30rem;border-left: 1px solid #d8dde6;border-right: 1px solid #d8dde6;" ng-show="showAttPanel && !isLoading" ng-cloak="true" when-scrolled="getMoreData()">
                            <table class="slds-table slds-table_cell-buffer slds-table_bordered slds-no-row-hover slds-table_col-bordered" style="width:100%;">
                                <thead>
                                    <tr>
                                        <th scope="col" class="slds-text-heading_label headcollight" style="border-top: 1px solid #d8dde6;border-bottom:none">
                                            <div class="slds-truncate">{!$Label.Values}</div>
                                        </th>
                                        <th scope="col" class="headcol2light" style="text-align: center;border-top: 1px solid #d8dde6;border-left: none;padding-bottom: 0.3rem;border-right: 1px solid #d8dde6;overflow-wrap: break-word;">
                                            <div class="slds-truncate slds-text-heading_label" style="display: inline;">{!$Label.All_Values}</div>
                                            <div style="display: inline-flex;overflow-wrap: break-word;" class="tooltip">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpHide overflow-wrap: break-word;" role="tooltip" id="help">
                                                    <div class="slds-popover__body overflow-wrap: break-word;" style="padding: 0.5rem;"><p>{!$Label.Warning_Info}</p></div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow overflow-wrap: break-word;" role="tooltip" id="help">
                                                    <div class="slds-popover__body overflow-wrap: break-word;" style="padding: 0.5rem;"><p style="white-space: initial;width: 17rem;">{!$Label.Warning_Info}</p></div>
                                                </div>
                                            </div>
                                        </th>
                                        <th scope="col" style="flex:1;text-align: center;flex-basis: auto;width:auto" ng-repeat="entry in attributeDependencyList" class="slds-text-heading_label">
                                            <div class="slds-truncate">{{entry.name}}</div>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr ng-repeat="(attId, attName) in attributeMap | mapLimitTo : showMoreLimit" >
                                        <td class="headcollight">
                                            <div class="slds-truncate" title="{{attName}}">{{attName}}</div>
                                        </td>
                                        <td class="headcol2light" style="text-align: center;border-left:none;border-top: none;padding-bottom: 0.55rem;border-right: 1px solid #d8dde6;">
                                            <div>
                                                <span class="slds-icon_container slds-icon-utility-warning">
                                                    <svg class="slds-icon slds-icon_xx-small warningIcon" aria-hidden="true" ng-hide="visibleList.indexOf(attId) != -1">
                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#warning')}"/>
                                                    </svg>
                                                </span>
                                            </div>
                                        </td>
                                        <td ng-repeat="entry in attributeDependencyList">
                                            <div class="slds-form-element__control">
                                                <span >
                                                    <label class="slds-checkbox" style="text-align: center;">
                                                        <input type="checkbox" ng-disabled="isView" ng-checked="entry.dependentWrapperList.indexOf(attId) != -1" ng-click="valueUnchecked(attId,entry)"/>
                                                        <span class="slds-checkbox--faux"></span>
                                                    </label>
                                                </span>
                                            </div>
                                        </td>
                                    </tr> 
                                </tbody>
                            </table>
                        </div>
                        <button ng-if="showMore && showAttPanel && !isLoading" style="align-self: center;font-weight: normal;left: 2rem; position: fixed; bottom: 0;" ng-click="getMoreDataControlling();"  class="slds-button slds-button_neutral">{!$Label.Show_More}</button>
                    	<span ng-if="showMore && showAttPanel && !isLoading" style="left: calc(2rem + 110px); position: fixed; bottom: 8px;">Showing {{showMoreLimit}} of {{depSize}} Records</span>
                    </div>
                </div>
                <div ng-show="!isSLDS" id="classicDiv" ng-cloak="true" >
                    <div role="status" ng-show="isLoading" class="slds-spinner slds-spinner_medium slds-spinner_brand">
                        <span class="slds-assistive-text">{!$Label.Loading}</span>
                        <div class="slds-spinner__dot-a"></div> 
                        <div class="slds-spinner__dot-b"></div>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>
                    <div ng-show="!isLoading" ng-cloak="true">
                        <div class="errorPageMsgDiv" style="border-color: #c00 !important; position: relative" ng-show="isError">
                            <img class="errorImg" src="/s.gif" />
                            <span style="position: absolute; padding-top: 0.2rem; padding-left: 0.4rem">
                                <span style="display: block; font-weight: bold; color: #cc0000">Error:</span>
                                <span >{{errorMsg}}</span>
                            </span>
                        </div>
                        <div style="width: 100%;" role="banner"> 
                            <div style="display: inline-block;width:95%;">
                                <a ng-click="backToCustomSetting();" style="cursor: pointer;margin-left:2.1rem;" >{!$Label.Back_to_the_Custom_Setting_Page}</a>
                                <div style="display: inline-block;width: 65%;text-align: center;">
                                    <h1 style="font-size: 1.5em;width: 100%;text-align: center;" class="slds-page-header__title slds-m-right--small slds-align-middle slds-truncate">{!$Label.Dependent_Filter}</h1>
                                </div>
                                <div style="display: inline-block;margin-right: 3%;vertical-align: middle;float: right;">
                                    <a class="btn" style="text-decoration: none; color: black; padding: 4px 3px;vertical-align: middle;" ng-hide="showAttPanel && !isView" ng-click="newDependency();">{!$Label.New}</a>
                                    <a class="btn" style="text-decoration: none; color: black; padding: 4px 3px;vertical-align: middle;" ng-show="showAttPanel && !isView" ng-click="saveDependency();">{!$Label.Save}</a>
                                    <a class="btn" style="text-decoration: none; color: black; padding: 4px 3px;vertical-align: middle;" ng-show="showAttPanel && !isView" ng-click="cancelDependency();">{!$Label.Cancel}</a>
                                </div>
                            </div>
                        </div>                        
                        <table class="detailList classictable" style="width:95%;display:flex;margin-left: 2rem;margin-bottom:1rem;">
                            <div style="margin-left: 3rem;margin-top:0.7rem;" ng-hide="filterDependencyList.length == 0">{!$Label.Existing_Dependencies}</div>
                            <div style="margin-left: 3rem;margin-top:0.7rem;" ng-show="filterDependencyList.length == 0 && !showFilterSelect">No {!$Label.Existing_Dependencies}</div>
                            <tbody style="width: 100%;" ng-hide="filterDependencyList.length == 0">
                                <tr class="headerRow" style="display:flex;border-right-width: 0;">
                                    <th scope="row" class="classicTableHeaderCell" style="border-left: 1px solid #ededed!important;text-align: center;flex:1">
                                        <span style="text-align:center;"></span>
                                    </th>
                                    <th scope="row" class="classicTableHeaderCell" style="text-align: center;flex:1">
                                        <span style="text-align:center;"></span>
                                    </th>
                                    <th scope="row" class="classicTableHeaderCell" style="text-align: center;flex:1">
                                        <span style="text-align:center;"></span>
                                    </th>
                                    <th scope="row" class="classicTableHeaderCell" style="text-transform: uppercase;text-align: center;flex:4">
                                        <span style="text-align:center;">{!$Label.Controlling_Filter}</span>
                                    </th>
                                    <th scope="row" class="classicTableHeaderCell" style="text-transform: uppercase;text-align: center;flex:4;border-right: 1px solid #ededed!important;">
                                        <span style="text-align:center;">{!$Label.Dependent_Filter}</span>
                                    </th>
                                </tr>
                                <tr ng-repeat="entry in filterDependencyList" class="dataRow" style="border-left: 1px solid #ededed;border-right-width: 0;border-top-width: 0;display:flex">
                                    <td class="dataCell vfLabelColTextWrap classicTablebodyCell" style="flex:1;text-align: center;">
                                        <button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small editableFormElement" style="border: none!important;box-shadow: none!important;border: none!important;" ng-click="editDependency(entry,false);">
                                            <span class="slds-icon_container slds-icon-utility-edit">
                                                <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                    <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"/>
                                                </svg>
                                            </span>
                                            <span class="slds-assistive-text">{!$Label.Edit}</span>
                                        </button>
                                    </td>
                                    <td class="dataCell vfLabelColTextWrap classicTablebodyCell" style="flex:1;text-align: center;">
                                        <div ng-click="view(entry);"><a style="cursor: pointer;">{!$Label.View}</a></div>
                                    </td>
                                    <td class="dataCell vfLabelColTextWrap classicTablebodyCell" style="flex:1;text-align: center;">
                                        <div ng-click="confirmDelete(entry);"><a style="cursor: pointer;">{!$Label.Delete}</a></div>
                                    </td>
                                    <td class="dataCol classicTablebodyCell" style="flex:4;text-align: center;">
                                        {{allFilters[entry.cFId]}}
                                    </td>
                                    <td class="dataCol classicTablebodyCell" style="flex:4;border-right: 1px solid #ededed!important;text-align: center;">
                                        {{allFilters[entry.dFId]}}
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                        <div ng-show="showFilterSelect && !showAttPanel" style="width:95%;margin-left:2rem;">
                            <div style="display:inline;margin-left:2rem;">
                                <label class="labelCol" style="display:inline;">{!$Label.Controlling_Filter}</label>
                                <select class="classicselect" ng-model="selectedControl" style="min-width: 15%;display:inline;">
                                    <option label="--None--" value=""></option> 
                                    <option ng-show="key != selectedDependent" ng-repeat="key in filterListControl" value="{{key}}">{{allFilters[key]}}</option>
                                </select>
                            </div>
                            <div style="display:inline;margin-left:2rem;">
                                <label class="labelCol" style="display:inline;">{!$Label.Dependent_Filter}</label>
                                <select class="classicselect" style="min-width: 15rem;display:inline;" ng-model="selectedDependent">
                                    <option label="--None--" value=""></option> 
                                    <option ng-show="key != selectedControl" ng-repeat="key in filterListDepend" value="{{key}}">{{allFilters[key]}}</option>
                                </select>
                            </div>
                            <a class="btn" style="margin-left:2rem;text-decoration: none; color: black; padding: 4px 3px;vertical-align: middle;" ng-show="!showAttPanel && selectedDependent != '' && selectedControl != ''" ng-click="editDependency();">Create</a>
                        </div>
                        <div style="height: 1.4rem;overflow:auto;position: relative;text-transform: uppercase;" ng-show="showAttPanel">
                            <div style="color: #54698d;padding: 5px 2px 4px 5px;display:inline;margin-left:2.4rem;font-weight:bold;">
                                <span ng-bind="allFilters[selectedDependent]"/>
                            </div>
                            <div style="color: #54698d;padding: 1px 2px 4px 5px;display:inline;margin-right: 13%;font-weight:bold;float: right;width: 50%;">
                                <span ng-bind="allFilters[selectedControl]"/>
                            </div>
                        </div>
                        <div id="matrix" style="width: 58.7em;margin-top: 2px;overflow-x: scroll;margin-left: 28rem;border-left: 1px solid #ededed;border-right: 1px solid #ededed;" ng-show="showAttPanel" when-scrolled="getMoreData();">
                            <table  id="dataTable" class="detailList classictable">            
                                <tr >
                                    <th scope="col" class="classicTableHeaderCell headcol">
                                        <div>{!$Label.Values}</div>
                                    </th>
                                    <th scope="col" class="classicTableHeaderCell headcol2 helpButtonOn">
                                        <div >{!$Label.All_Values}</div>
                                        <div class="helpOrb tooltipClassic" style="right: 0px;top: 7px;">
                                            <span style="font-size: 0.75rem;">{!$Label.Warning_Info}</span>
                                        </div>
                                    </th>
                                    <th scope="col" class="classicTableHeaderCell" ng-repeat="entry in attributeDependencyList">
                                        <div align="center">{{entry.name}}</div>
                                    </th>
                                </tr>
                                <tr ng-repeat="(attId, attName) in attributeMap | mapLimitTo : showMoreLimit" class="dataRow" style="border-left-width: 0;line-height: 20px;border-right: 1px solid #ededed;">
                                    <td class="headcol classicTablebodyCell" style="border-left: 1px solid #ededed;">
                                        <div title="{{attName}}" style="white-space: nowrap;overflow: hidden;text-overflow: ellipsis;">{{attName}}</div>
                                    </td>
                                    <td class="headcol2 classicTablebodyCell" style="border-right: 1px solid #ededed;">
                                        <div align="center">
                                            <span class="slds-icon_container slds-icon-utility-warning">
                                                <svg class="slds-icon slds-icon_xx-small warningIcon" aria-hidden="true" ng-hide="visibleList.indexOf(attId) != -1">
                                                    <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#warning')}"/>
                                                </svg>
                                            </span>
                                        </div>
                                    </td>
                                    <td style="text-align: center;" class="dataCol classicTablebodyCell" ng-repeat="entry in attributeDependencyList">
                                        <input type="checkbox" align="center" ng-disabled="isView" ng-checked="entry.dependentWrapperList.indexOf(attId) != -1" ng-click="valueUnchecked(attId,entry)"/>
                                    </td>              
                                </tr>
                            </table>
                        </div>
                        <a class="btn" ng-if="showAttPanel && showMore" style="margin-left: 2rem;padding: 4px 3px!important;" ng-click="getMoreDataControlling();">ShowMore</a>
                        <span ng-if="showMore && showAttPanel" style="left: calc(2rem + 110px);">Showing {{showMoreLimit}} of {{depSize}} Records</span>
                        <div ng-show="showConfirmDelete" ng-cloak="true">
                            <section role="dialog" tabindex="-1" class="classicModal" style="margin-left: -20%; width: 40%; top: 35vh;">
                                <div>
                                    <div class="classicModalContent">
                                        {{confirmDeleteMsg}}
                                    </div>
                                    <footer class="classicModalFooter">
                                        <a class="btn" ng-click="deleteEntry(true)">{!$Label.Yes}</a>
                                        <a class="btn" ng-click="deleteEntry(false)">{!$Label.Cancel}</a>
                                    </footer>
                                </div>
                            </section>
                            <div class="classicModalbackdrop"></div>
                        </div>
                        <div ng-show="showEditConfirmation" ng-cloak="true">
                            <section role="dialog" tabindex="-1" class="classicModal" style="margin-left: -20%; width: 40%; top: 35vh;">
                                <div>
                                    <div class="classicModalContent">
                                        {{unsavedChanges}}
                                    </div>
                                    <footer class="classicModalFooter">
                                        <a class="btn" ng-click="editDependency(tempCurrentRecord,false);">{!$Label.Yes}</a>
                                        <a class="btn" ng-click="showEditConfirmation = false;">{!$Label.Cancel}</a>
                                    </footer>
                                </div>
                            </section>
                            <div class="classicModalbackdrop"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </html>
</apex:page>