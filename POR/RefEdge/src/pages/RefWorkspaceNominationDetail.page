<!-- 
 * ReferenceEdge
 * 
 * Point of Reference, Inc. - Copyright 2014 All rights reserved.
 *
 * @company : Point of Reference, Inc.
 * @website : www.point-of-reference.com
 *
 * Disclaimer: THIS SOFTWARE IS PROVIDED "AS-IS" BY POINT OF REFERENCE ("POR"), 
 * WITH NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE SOFTWARE, 
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. 
 * POR SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES. POR IS NOT LIABLE FOR, 
 * AND MAKES NO REPRESENTATIONS OR WARRANTIES REGARDING, THE ACTIONS OR OMISSIONS OF 
 * ANY THIRD PARTIES (OR THE PRODUCTS OR SERVICES OFFERED BY ANY THIRD PARTIES) INCLUDING, 
 * WITHOUT LIMIATION, SALESFORCE.COM. COPY, USE OR DISTRIBUTION PROHIBITED WITHOUT EXPRESS 
 * WRITTEN CONSENT FROM COMPANY.
 -->
 <apex:page StandardController="Nomination__c"
            extensions="RefWorkspaceNominationDetailController" 
            showHeader="true"
            tabStyle="Nomination__c" 
            sidebar="false"
            doctype="html-5.0" 
            id="pgId">
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <head>
            <script src="{!URLFOR($Resource.ckeditor,'ckeditor/ckeditor.js')}"></script>
            <script src="{!URLFOR($Resource.AngularMaterialRepo, 'angular.min.js')}"></script>
            <apex:stylesheet value="{!URLFOR($Resource[selectedTheme], followUp)}" />     
            <script src="{!URLFOR($Resource.AngularDateTimePickerJS)}"></script>
            <apex:stylesheet value="{!URLFOR($Resource.AngularDateTimePickerCSS)}" />
            <c:LookupPicklistSLDS id="picklistId"/>  
            <apex:stylesheet value="{!URLFOR($Resource.AngularMultiSelectCSS)}" />
			<script src="{!URLFOR($Resource.AngularMultiSelectJS)}"></script>
            <apex:includeScript value="{!URLFOR($Resource.JqueryFiles, 'jquery-1.8.3.js')}"/>
            <apex:stylesheet value="{!URLFOR($Resource.Font, 'font-awesome-4.5.0/css/font-awesome.min.css')}" />
            <apex:stylesheet value="{!URLFOR($Resource.ListViewDirective, 'css/ListViewFilter.css')}" />
            <script src="{!URLFOR($Resource.ListViewDirective, 'js/ListViewFilter.js')}"></script>
            <apex:includeScript value="/support/console/44.0/integration.js" />

			<script> 
                var isSLDS = false; 
                $(document).ready(function() {
                    $('#phHeader td.left div').css({"width": "19vw", "height": "auto"});
                });
                jQuery(window).load(function() {
                    var elm = document.getElementById('AppBodyHeader');
                    
                    if (elm != null) {
                        isSLDS = false;
                    } else {
                        isSLDS = true;
                    }
                    initialFunction();
                });
                function initialFunction() {
                    var index;
                    var scope = angular.element(document.getElementById('angularPanel')).scope();
                    scope.$apply (function() {
                        scope.isSLDS = isSLDS || scope.isSLDS;
                    });
                    var length = document.getElementsByClassName("isSLDSSet").length;
                    for (index  = 0 ; index < length ; index++) {
                        var itemId = document.getElementsByClassName("isSLDSSet")[0].id;
                        document.getElementById(itemId).className = 'isSLDSSetClassic'
                    }
                }
                var lookUpWindowOpen = false;
                var newWin = null;
                var popupflag = false;
                
                function showLookup(currentPageName) {
                
                    if (!lookUpWindowOpen) {
                        lookUpWindowOpen = true;
                        popupflag = true;
                        var sel = 'div[ng-controller="controller"]';
                        var scope = angular.element(sel).scope();
                        var srcParam = scope.userName == null ? '' : scope.userName;
                        newWin = window.open(encodeURI('{!$Page.CustomLookup}?strText=' + srcParam + '&obj=User'), 'Popup', 'height=500,width=700,left=100,top=100,resizable=no,scrollbars=yes,toolbar=no,status=no');
                        lookUpWindowOpen = false;
                    }
                }
                
                function closePopup(Id, Name) {
                
                    if (null != newWin) {
                        newWin.close();
                
                        if (typeof Name != 'undefined') {
                
                            if (popupflag) {
                                var sel = 'div[ng-controller="controller"]';
                                var scope = angular.element(sel).scope();
                                var srcParam = scope.userName;
                                popupflag = false;
                                scope.userName = Name;
                                scope.nomination[scope.namespace + 'Manager__c'] = Id;
                                scope.$apply();
                                
                            }
                        }
                    }
                }
            </script>
            <style>
                #multi .slds-form-element {
                	width: 9rem !important;
                }
                #multi .slds-form-element select {
                    width: 9rem !important;
                }
                hr {
                    margin : 0;
                }
                .editIcon {
                    fill: #e0e5ee;
                }
                .editableFormElement:HOVER .editIcon {
                    fill: #444444;
                }
                .isSLDSSet {
                    visibility:hidden;
                }
                .isSLDSSetClassic {
                    visibility:visible;
                }
                #error-block {
                    background-color: #B60202;
                    color: WHITE;
                    font-size: 15px;
                    border-radius: 5px;
                }
                .required {
                    color:red;
                    display: inline;
                    font-weight:bold;
                }
                
                .slds-tabs_default__item {
                    padding: 0 1.25rem;
                }
                .classicTableHeaderCell {
                    background: #f2f3f3;
                    border-width: 0 0 1px 1px;
                    border-color: #e0e3e5;
                    color: #000;
                    font-size: 1.2em;
                    color: #54698d;
                    padding: 5px 2px 4px 5px;
                    border: 1px solid #ededed;
                }
                .tooltip:hover .tooltipHelpShow {
                    display : inline;
                    bottom: 61px;
                    position: absolute;
                }
                .tooltipHelpShow {
                    display : none;
                    bottom: 61px;
                    line-height: 0.95rem;
                    position: absolute;
                }
                div.tooltipClassic {
                    opacity:0.35;
                    width: 20px;
                    float: right;
                    margin-right: 1px;
                    display:inline;
                }
                .noteValueDiv * {
                    padding-bottom: 0.5rem;
                    width: 100% !important;
                }
                div.tooltipClassic:hover {
                    opacity:1;
                    width: 20px;
                    float: right;
                    margin-right: 1px;
                    display:inline;
                }
                div.tooltipClassic span {
                    display: none;
                    font-weight:normal;
                    text-align:left;
                    padding: 3px 5px;
                    margin-left: 8px;
                    width: 250px;
                }
                div.tooltipClassic:hover span {
                    display: inline;
                    position: absolute;
                    border: 1px solid orange;
                    width: 15em;
                    z-index: 1;
                    background-color: #fefdb9;
                    padding: 2px 5px;
                    border: 1px solid orange;
                    text-align: left;
                    right: 25px;
                    top: 25px;
                    white-space: normal;
                    font-weight: normal;
                    color: #000;
                }
                .activity-div:after {
                    content: "";
                    position: absolute;
                    right: -4px;
                    top: 30px;
                    width: 1px;
                    bottom: 0;
                    background: #ccc;
                }
                .required {
                    color:red;
                    display: inline;
                    font-weight:bold;
                }
                .slds {
                    background: white !important;
                }
                @media only screen and (max-width: 500px) {
                    .toast-msg {
                        position: fixed;
                        top: 10px;
                        left: 0;
                        right: 0;
                        //width: 90%;
                        max-width: 380px;
                        margin: 0 auto;
                        z-index: 1100000;
                    }
                    .buttonStyle {
                        width: 160px;
                        margin: 10px auto 0 auto;
                    }
                    #loading-image {
                        position: fixed;
                        top: 40%;
                        left: 42%;
                        width:15%;
                    }
                }
                @media only screen and (min-width: 501px) {
                    .toast-msg {
                        position: fixed;
                        top: 10px;
                        left: 0;
                        right: 0;
                        width: 50%;
                        margin: 0 auto;
                        z-index: 1100000;
                    }
                    .buttonStyle {
                        float: right;
                    }
                    #loading-image {
                        position: fixed;
                        top: 40%;
                        left: 47%;
                        width:4%;
                    }
                }
                .slds-notify--toast {
                    min-width: auto !important;
                    padding: 15px 12px;
                }  
                #loading { 
                    width: 100%;
                    height: 100%;
                    top: 0px;
                    left: 0px;
                    position: absolute;
                    display: block;
                    opacity: 0.7;
                    filter: alpha(opacity = 50);
                    -moz-opacity: 0.7;
                    background-color: #fff;
                    text-align: center;
                    z-index: 19005;
                }
                .remove-flex{
                    flex: none !important;
                    -webkit-flex: none !important;
                }
                .container {
                    position: fixed;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    overflow-x: hidden;
                    overflow-y: scroll;
                }
                #adp-time {
                    display: none !important;
                }
                .pbTitle {
                    font-size: 0.8em !important;
                    font-weight: bold !important;
                    padding: 12px !important;
                }
                #classicDiv .tertiaryPalette {
                    background: #79b4cd;
                    border-color: #79b4cd;
                    margin-bottom: 0.5rem;
                }
                #classicDiv .tertiaryPalette h3 {
                    font-size: 1.1em !important;
                }
                .classicSpinner {
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    margin-left: -30px;
                }
                .classicSpinnerBackground {
                    top: 0;
                    height: 70vh;
                    left: 0;
                    right: 0;
                    background-color: WHITE;
                    opacity: 0.7;
                    z-index: 9999;
                }
                .pageHeader {
                    background-color: #F4F6F9;
                }
                .classicRequiredDiv {
                    background-color: #C00;
                    display: inline-block;
                    position: absolute;
                    left: -5px;
                    height: 95%;
                }
                .classicModal {
                    background-color: #f8f8f8;
                    box-shadow: 0 0 20px #6D6D6D;
                    position: fixed;
                    left: 50%;
                    z-index: 999;
                }
                .classicModalHeader {
                    background-color: #03a7e5;
                    border-radius: 3px;
                    margin: 2px;
                    padding: 0.3rem 0.3rem 0.3rem 1.2rem;
                }
                .classicModalHeader a {
                    float: right;
                    line-height: 1.5em;
                    color: #f8f8f8;
                    border-radius: 3px;
                    padding: 0 0.28rem;
                    cursor: pointer;
                }
                .classicModalHeader a:HOVER {
                    background-color: #f8f8f8;
                    color: #ff6a00;
                }
                .classicModalHeader span {
                    color: #f8f8f8;
                    font-weight: bold;
                    line-height: 150%;
                }
                .classicModalContent {
                    padding: 0.5rem 1rem;
                    max-height: 20rem;
                    overflow-y: auto;
                }
                .classicModalFooter {
                    padding: 0.6rem 1.6rem;
                    text-align: right;
                    background-color: #eeeeee;
                    border-top: 1px solid lightgray;
                }
                .classicModalFooter a {
                    line-height: 220%;
                    text-decoration: none !important;
                    color: black;
                    padding: 4px 3px;
                }
                .classicModalbackdrop {
                    background-color: black;
                    opacity: 0.20;
                    filter: alpha(opacity = 20);
                    position: absolute;
                    width: 100%;
                    height: 100%;
                    top: 0;
                    left: 0;
                    z-index: 99;
                }
                .modalErrorMsg {
                    border-radius: 4px;
                    background-color: #ffc;
                    border-style: solid;
                    border-width: 1px;
                    color: #000;
                    padding: 6px 8px 6px 6px;
                    margin: 4px 4px 10px 4px;
                    float: left;
                    width: 98%;
                    display: block;
                }
                .errorPageMsgDiv {
                    border-radius: 4px;
                    background-color: #ffc;
                    border-style: solid;
                    border-width: 1px;
                    color: #000;
                    padding: 6px 8px 6px 6px;
                    margin: 4px 20px;
                }
                .successImg {
                    background-image: url(/img/msg_icons/info32.png);
                    background-position: 0 0;
                    width: 32px;
                    height: 32px;
                    background-size: 32px;
                }
                .errorImg {
                    background-image: url(/img/msg_icons/error24.png);
                    background-position: 0 0;
                    width: 32px;
                    height: 32px;
                    background-size: 32px;
                }    
            </style>
            <script>
                var myapp = angular.module('myapp',  ['angularjs-datetime-picker','angularMultiSelectList','lookupPicklistApp']);
                var htmlFilter = myapp.filter('renderHtml',
                function($sce) {
                        return function(stringToParse) {
                            return $sce.trustAsHtml(stringToParse);
                        }
                    }
                );
                myapp.controller('controller', function ($scope, $q, $window, $filter, $location) {
                    $scope.isLoading = true;
                    $scope.isEdit = false;
                    $scope.isNominationError = false;
                    $scope.isCommentRequired = false;
                    $scope.dateFormat = 'yyyy-MM-dd';
                    $scope.dateFormat = '{!JSENCODE(dateFormat)}';
                    $scope.todayDate = '{!JSENCODE(todayDate)}';
                    $scope.showAttributeEditMenu = false;
                    $scope.showAttributeEditModal = false;
                    $scope.allFilterIds = [];
                    $scope.allFilter = [];
                    $scope.refTypes = [];
                    $scope.isSLDS = isSLDS || {!isSLDS};
                    $scope.showRefEditMenu = false;
                    $scope.showRefEditModal = false;
                    $scope.showEditNominationModal = false;
                    $scope.showConfirmationForMember = false;
                    $scope.showConfirmationForCopy = false;
                    $scope.forwardToCopyPage = false;
                    $scope.selectedRefTypes = [];
                    $scope.availableRefTypes = [];
                    $scope.referencibility = [];
                    $scope.availableMultiOptions = [];
                    $scope.selectedMultiOptions = [];
                    $scope.tempInfo = {};
                    $scope.showSection = {'details' : true, 'attributes' : true, 'referenceability' : true, 'addInfo' : true}
                    $scope.initialFunction =  function(firstCall) {
                        var url_string = $window.location.href;
                        var url = new URL(url_string);
                        var id = url.searchParams.get("Id");
                        var isFromWorkspace = JSON.parse(url.searchParams.get("isFromWorkspace"));
                        var isFromChatter = JSON.parse(url.searchParams.get("isFromChatter"));
                        var entityName = '';
                        $scope.isFromWorkspace = isFromWorkspace;
                        $scope.addInfoShow = true;
                        $scope.isFromChatter = isFromChatter == null ? true : isFromChatter;
                        $scope.isModalFilterError = false;
                        $scope.isEdit = false;
                        $scope.isNominationError = false;
                        $scope.isCommentRequired = false;
                        $scope.showAttributeEditMenu = false;
                        $scope.showAttributeEditModal = false;
                        $scope.allFilterIds = [];
                        $scope.allFilter = [];
                        $scope.refTypes = [];
                        $scope.showRefEditMenu = false;
                        $scope.showRefEditModal = false;
                        $scope.showEditNominationModal = false;
                        $scope.forwardToCopyPage = false;
                        $scope.selectedRefTypes = [];
                        $scope.availableRefTypes = [];
                        $scope.referencibility = []
                        $scope.tempInfo = {};
                        $scope.filterAttMap = {};
                        $scope.filterIsVisible = {};
                        $scope.isForAccount = false;
                        $scope.getDefaults(id).then( function(result) {
                            
                            result = $scope.parseResult(result);
                            result = JSON.parse(result); 
                            $scope.cs = JSON.parse(result[0]);
                            $scope.namespace = JSON.parse(result[1]);
                            $scope.additionalFields = JSON.parse(result[2]);
                            $scope.isReferenceable = JSON.parse(result[3]);
                            $scope.nomination = JSON.parse(result[4]);
                            $scope.userName = $scope.nomination['Manager__r.Name'];
                            $scope.createdDate = $filter('date')($scope.nomination.CreatedDate, $scope.dateFormat);
                            $scope.filters = JSON.parse(result[5]);

                            angular.forEach($scope.filters, function(value) {
                                
                                if ($scope.filterIsVisible[value[$scope.namespace + 'Label__c']] == null) {
                                    $scope.filterIsVisible[value[$scope.namespace + 'Label__c']] = true;
                                }
                            }); 
                            $scope.attributes = JSON.parse(result[6]);
                            $scope.referencibility = JSON.parse(result[7]);
                            $scope.dispositionPickListValues = JSON.parse(result[8]);
                            $scope.statusPickListValues = JSON.parse(result[9]);
                            $scope.contactList = JSON.parse(result[10]);
                            $scope.availableMultiOptions = JSON.parse(result[11]);
                    		$scope.selectedMultiOptions = JSON.parse(result[12]);  
                             
                            for(var i=0; i<$scope.additionalFields.length; i++) {
                                var field = $scope.additionalFields[i];
                    			if(field.Type == 'MULTIPICKLIST' && $scope.selectedMultiOptions 
                    				&& $scope.selectedMultiOptions.hasOwnProperty(field.Name)) {
                    				   
                    				var multiSelectValueString = '';
                    				for(var j=0; j<$scope.selectedMultiOptions[field.Name].length; j++) {
                    					multiSelectValueString += $scope.selectedMultiOptions[field.Name][j].name + ',';
                    				}
                    				multiSelectValueString = multiSelectValueString.replace(/,\s*$/, "");
                    				$scope.nomination[field.Name] = multiSelectValueString;
                    			}
                    		}
                            
                            angular.forEach($scope.contactList, function(entry) {
                                if (entry.id == '') {
                                    entry.id = null;
                                }
                            });
                            angular.forEach($scope.dispositionPickListValues, function(entry) {
                                if (entry.id == '') {
                                    entry.id = null;
                                }
                            });
                            var url = new URL(window.location.href);
							var select = url.searchParams.get("selection");
                            $scope.selection = select;
                            $scope.isForAccount = ($scope.nomination[$scope.namespace + 'Contact__c'] == null || $scope.nomination[$scope.namespace + 'Contact__c'] == '') ? true : false;
                            entityName = ($scope.isForAccount) ? $scope.nomination['Account__r.Name'] : 'Contact' ;
                            $scope.makeMemberMsg = '{!$Label.Make_Member_from_Nomination}'.replace('@@@', entityName);
                            $scope.copyNominationMsg = '{!$Label.Only_copy_details_from_Nomination}'.replace('@@@', entityName);
                            angular.forEach($scope.additionalFields, function(value, key) {
                                
                                if (value.Type == 'DATE' || value.Type == 'DATETIME') {
                                    $scope.nomination[value.Name] = $filter('date')($scope.nomination[value.Name], $scope.dateFormat);
                                }
                            });
                            if ($scope.isSLDS) {
                                $scope.getRelatedNotes($scope.nomination.Id).then(function(result) {
                                    $scope.notesList = result;
                                });
                            }
                            $scope.getRef().then(function(result) {
                                $scope.refTypes = result;
                                
                                if (result != null) {
                                    angular.forEach($scope.refTypes, function(refValue,refKey) {
                                        angular.forEach($scope.referencibility, function(nomValue,nomKey) {
                                            if (refValue.id == nomValue[$scope.namespace + 'Referenceability_Type__c']) {
                                                refValue.isSelected = true;
                                            } 
                                        });
                                    });
                                    angular.forEach($scope.refTypes, function(refValue,refKey) {
                                        refValue.visible = false;
                                        if ((refValue.avaliableForAccount && refValue.avaliableForContact) || ($scope.isForAccount && refValue.avaliableForAccount) || (!$scope.isForAccount && refValue.avaliableForContact)) {
                                            refValue.visible = true;
                                            if (refValue.isSelected) {
                                                $scope.selectedRefTypes.push(refValue);
                                            } else {
                                                $scope.availableRefTypes.push(refValue);
                                            }
                                        }
                                    });
                                    if ($scope.allFilter == null || $scope.allFilter.length == 0 ) {
                                        $scope.allFilterIds = [];
                                        $scope.allFilter = [];
                                        $scope.getFilters().then(function(result) {
                                            
                                            if (result != null) {  
                                                var tempFilters = result;
                                                
                                                angular.forEach(tempFilters, function(filter) {
                                                    
                                                    if ((filter.avaliableForAccount && filter.avaliableForContact) || ($scope.isForAccount && filter.avaliableForAccount) || (!$scope.isForAccount && filter.avaliableForContact)) {
                                                        filter.isShow = true;
                                                    }
                                                    $scope.filterIsVisible[filter.id] = filter.isShow;
                                                    $scope.allFilterIds.push(filter.id);
                                                    $scope.allFilter.push(filter);
                                                });
                                                $scope.getAllFilterAttributes().then(function(filterAttResult) {
                                        
                                                    if (filterAttResult != null && filterAttResult != '') {
                                                        $scope.filterAttMap = angular.copy(filterAttResult);
                                                        
                                                        angular.forEach($scope.attributes, function(value,filterKey) {
                                                            angular.forEach(value, function(value1, key) {
                                                                angular.forEach($scope.filterAttMap[filterKey], function(allValue,allKey) {
                                                                    
                                                                    if (allValue.id == value1.attributeId) {
                                                                        allValue.isSelected = true;
                                                                    }
                                                                });
                                                            });
                                                        });
                                                        $scope.tempInfo.filterAttMap = angular.copy($scope.filterAttMap);
                                                        $scope.isLoading = false;
                                                    }
                                                });
                                                $scope.tempInfo.allFilter = angular.copy($scope.allFilter);
                                                $scope.tempInfo.filterIsVisible = angular.copy($scope.filterIsVisible);
                                                        
                                            }
                                        });
                                    }
                                    $scope.isLoading = false;
                                    $scope.tempInfo.nomination = angular.copy($scope.nomination);
                                    $scope.tempInfo.filters = angular.copy($scope.filters);
                                    $scope.tempInfo.attributes = angular.copy($scope.attributes);
                                }

                                if (!$scope.isFromChatter && firstCall) {
                                    $scope.editEnabled();
                                }
                            });
                        });
                    }
                    $scope.checkDate = function (day, month, year) {
                        var returnval = true;
                          if (day == null || day.trim() == '' || month == null || month.trim() == '' || year == null || year.trim() == '' ||
                            day.length > 2 || month.length > 2 || year.length > 4 || 
                            parseInt(day) == NaN || parseInt(month) == NaN || parseInt(year) == NaN) {
                            returnval = false;
                        } else {
                          day = parseInt(day);
                          month = parseInt(month);
                          year = parseInt(year);
                        }
                        returnval = (month < 1 || month > 12 || day < 1) ? false : returnval;
                        var days = (month == 2) ? ((year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) ? 29 : 28) 
                                : (month == 4 || month == 6 || month == 9 || month == 11) ? 30 : 31 ;
                        returnval = (day > days) ? false : returnval;
                        return returnval;
                    }
                    $scope.convertToDate = function (date) {
                        date = (date == null) ? '' : date;
                        var regEx = /^[0-9]{4}\-(0[1-9]|1[012]|[1-9])\-([1-9]|0[1-9]|[12][0-9]|3[01])/;
                        
                        if (date == null || date == '') {
                            return '';
                        }
                        
                        if (date.match(regEx))  { 
                            tempDF = date.split('-');
                            if (tempDF.length < 3 || !$scope.checkDate(tempDF[2], tempDF[1], tempDF[0])) {
                              return null;
                            }
                            return date; 
                        }
                        
                        try {
                            var tempDF = $scope.dateFormat;
                            var tempDate = date + '';
                            tempDF = tempDF.split(/[./-]/g);
                            tempDate = tempDate.split(/[./-]/g);
                            var month = (tempDF.indexOf('MM') == -1) ? tempDate[tempDF.indexOf('M')] :tempDate[tempDF.indexOf('MM')];
                            var day = (tempDF.indexOf('dd') == -1) ? tempDate[tempDF.indexOf('d')] :tempDate[tempDF.indexOf('dd')];
                            var modDate = new Date(tempDate[tempDF.indexOf('yyyy')], month - 1, day);
                            var dateString = modDate.getFullYear() + '-' + (modDate.getMonth() + 1) + '-' + modDate.getDate();
                            
                            if (modDate != 'Invalid Date' && dateString.indexOf('NaN') == -1 ) {
                              
                                if (month.length > 2 || day.length > 2 || tempDate[tempDF.indexOf('yyyy')].length != 4 || !$scope.checkDate(day, month, tempDate[tempDF.indexOf('yyyy')])) {
                                  return null;
                                }
                                return dateString;
                            } else {
                                return null;
                            }
                        } catch (e) {
                            return null;
                        }
                    }

                    $scope.changeContact = function(optionName) {
                        if ((($scope.nomination[$scope.namespace + 'Contact__c'] == null || $scope.nomination[$scope.namespace + 'Contact__c'] == '') && !$scope.isForAccount) || ($scope.nomination[$scope.namespace + 'Contact__c'] != null && $scope.nomination[$scope.namespace + 'Contact__c'] != '' && $scope.isForAccount)) {
                            $scope.showContactChangeModal = true;
                            $scope.nomination['Contact__r.Name'] = optionName;
                            $scope.modalMsg = '{!$Label.Add_Remove_Contact}';
                            $scope.showEditNominationModal = false;
                        }
                    }

                    $scope.changeValue = function(isChange) {
                        $scope.showContactChangeModal = false;
                        var isFilterShow = {};
                        if (isChange) {
                            $scope.selectedRefTypes = [];
                            $scope.availableRefTypes = [];
                            $scope.isForAccount = $scope.nomination[$scope.namespace + 'Contact__c'] == null || $scope.nomination[$scope.namespace + 'Contact__c'] == '';
                            entityName = ($scope.isForAccount) ? $scope.nomination['Account__r.Name'] : 'Contact' ;
                            $scope.makeMemberMsg = '{!$Label.Make_Member_from_Nomination}'.replace('@@@', entityName);
                            $scope.copyNominationMsg = '{!$Label.Only_copy_details_from_Nomination}'.replace('@@@', entityName);
                            
                            angular.forEach($scope.refTypes, function(refValue,refKey) {
                                refValue.visible = false;
                                
                                if ((refValue.avaliableForAccount && refValue.avaliableForContact) || ($scope.isForAccount && refValue.avaliableForAccount) || (!$scope.isForAccount && refValue.avaliableForContact)) {
                                    refValue.visible = true;
                                } else {
                                    refValue.isSelected = false;
                                }
                            }); 

                            angular.forEach($scope.allFilter, function(filter) {
                                filter.isShow = false;
                                
                                if ((filter.avaliableForAccount && filter.avaliableForContact) || ($scope.isForAccount && filter.avaliableForAccount) || (!$scope.isForAccount && filter.avaliableForContact)) {
                                    filter.isShow = true;
                                }
                                $scope.filterIsVisible[filter.id] = filter.isShow;
                            });
                            
                            if (!$scope.isSLDS) {
                                var filters = {};
                                angular.forEach($scope.filterAttMap, function(value,filterKey) {
                                    
                                    if ($scope.attributes[filterKey] != null) {
                                        $scope.attributes[filterKey] = [];
                                        
                                        angular.forEach(value, function(attObj) {
                                            if (attObj.isSelected) {
                                                var arrayEntry = {};
                                                arrayEntry.attributeId = attObj.id;
                                                arrayEntry.attributeName = attObj.name;
                                                $scope.attributes[filterKey].push(arrayEntry);
                                            }
                                        });
                                        
                                        if ($scope.attributes[filterKey].length == 0) {
                                            delete $scope.attributes[filterKey];
                                            
                                            angular.forEach($scope.filters, function(filterItem) {
                                                
                                                if (filterItem[$scope.namespace + 'Label__c'] == filterKey) {
                                                $scope.filters.splice($scope.filters.indexOf(filterItem), 1);
                                                }
                                            });
                                        }
                                    } else {
                                        var isAttSelected = false 
                                        
                                        angular.forEach(value, function(attObj) {
                                            
                                            if (attObj.isSelected) {
                                                if (!isAttSelected) {
                                                    isAttSelected = true;
                                                    $scope.attributes[filterKey] = [];
                                                }
                                                var arrayEntry = {};
                                                arrayEntry.attributeId = attObj.id;
                                                arrayEntry.attributeName = attObj.name;
                                                $scope.attributes[filterKey].push(arrayEntry);
                                                filters[filterKey] = [];
                                            }
                                        });
                                    }
                                });

                                if (filters != null && filters != {} ) {
                                    
                                    angular.forEach($scope.allFilter, function(value) {
                                        if (filters[value.id] != null) {
                                            var filterEntry = {};
                                            var required = $scope.namespace + 'Required__c';
                                            filterEntry[$scope.namespace + 'Label__c'] = value.id;
                                            filterEntry[$scope.namespace + 'Label__r'] = {'Name' : value.name , required : value.required};
                                            $scope.filters.push(filterEntry);
                                        }
                                    });
                                }
                            } else {
                                $scope.showEditNominationModal = true;
                            }
                        } else {
                            $scope.nomination[$scope.namespace + 'Contact__c'] = $scope.tempInfo.nomination[$scope.namespace + 'Contact__c'];
                            $scope.nomination['Contact__r.Name'] = $scope.tempInfo.nomination['Contact__r.Name'];
                            
                            if ($scope.isSLDS) {
                                $scope.showEditNominationModal = true;
                            }
                        }
                    }

                    $scope.editEnabled = function() {
                        
                        if ($scope.isSLDS) {
                            $scope.showEditNominationModal = true;
                        } else {
                            $scope.isEdit = true;
                        }
                        $scope.tempInfo = {};
                        $scope.tempInfo.nomination = angular.copy($scope.nomination);
                        $scope.tempInfo.filterAttMap = angular.copy($scope.filterAttMap);
                        $scope.tempInfo.filters = angular.copy($scope.filters);
                        $scope.tempInfo.attributes = angular.copy($scope.attributes);
                        $scope.tempInfo.allFilter = angular.copy($scope.allFilter);
                        $scope.tempInfo.filterIsVisible = angular.copy($scope.filterIsVisible);
                    }

                    $scope.resetRefTypes = function () {
                        $scope.isForAccount = $scope.nomination[$scope.namespace + 'Contact__c'] == null || $scope.nomination[$scope.namespace + 'Contact__c'] == '';
                        entityName = ($scope.isForAccount) ? $scope.nomination['Account__r.Name'] : 'Contact' ;
                        $scope.makeMemberMsg = '{!$Label.Make_Member_from_Nomination}'.replace('@@@', entityName);
                        $scope.copyNominationMsg = '{!$Label.Only_copy_details_from_Nomination}'.replace('@@@', entityName);
                            
                        angular.forEach($scope.refTypes, function(refValue,refKey) {
                            refValue.visible = false;
                            
                            if ((refValue.avaliableForAccount && refValue.avaliableForContact) || ($scope.isForAccount && refValue.avaliableForAccount) || (!$scope.isForAccount && refValue.avaliableForContact)) {
                                refValue.visible = true;
                            }         
                            refValue.isSelected = false;
                        });
                        angular.forEach($scope.refTypes, function(refValue,refKey) {
                            angular.forEach($scope.referencibility, function(nomValue,nomKey) {
                                if (refValue.id == nomValue[$scope.namespace + 'Referenceability_Type__c']) {
                                    refValue.isSelected = true;
                                } 
                            });
                        });
                    }

                    $scope.editDisabled = function() {
                        $scope.nomination = angular.copy($scope.tempInfo.nomination);
                        $scope.filterAttMap = angular.copy($scope.tempInfo.filterAttMap);
                        $scope.filters = angular.copy($scope.tempInfo.filters);
                        $scope.attributes = angular.copy($scope.tempInfo.attributes);
                        $scope.referenceability = angular.copy($scope.tempInfo.referenceability);
                        $scope.filterIsVisible = angular.copy($scope.tempInfo.filterIsVisible);
                        $scope.allFilter = angular.copy($scope.tempInfo.allFilter);
                        $scope.isNominationError = false;
                        $scope.isCommentRequired = $scope.nomination[$scope.namespace + 'Disposition__c'] == 'Declined';
                        if ($scope.isSLDS) {
                            $scope.showEditNominationModal = false;
                            $scope.resetRefTypes();
                        } else {
                            $scope.resetRefTypes();
                            $scope.isEdit = false;
                        }
                    }

                    $scope.getEditTabId = function() {
                        sforce.console.getEnclosingTabId($scope.closeEditTab);
                    }

                    $scope.closeEditTab = function(result) {
                        sforce.console.closeTab(result.id);
                    }

                    $scope.saveNomination = function() {
                        $scope.isNominationError = false;

                        if (($scope.nomination[$scope.namespace + 'Status__c'] == 'Completed' && ($scope.nomination[$scope.namespace + 'Disposition__c'] == null || $scope.nomination[$scope.namespace + 'Disposition__c'].trim() == ''))) {
                            $scope.isNominationError = true;
                            $scope.nominationErrorMessage = '{!$Label.ERROR_NOMINATION_COMPLETED_DISPOSITION }';
                        } else if ($scope.isCommentRequired && ($scope.nomination[$scope.namespace + 'Note__c'] == null || $scope.nomination[$scope.namespace + 'Note__c'] == '' || $scope.nomination[$scope.namespace + 'Note__c'].trim() == '')) {
                            $scope.isNominationError = true;
                            $scope.nominationErrorMessage = '{!$Label.ERROR_NOMINATION_REJECTION_NOTE}';
                            //ERROR_NOMINATION_COMPLETED_DISPOSITION 
                        } else {
                            angular.forEach($scope.additionalFields, function(value, key) {
                                if (!$scope.isNominationError && value.required == 'true' && ($scope.nomination[value.Name] == null || $scope.nomination[value.Name] == '' )) {
                                    $scope.isNominationError = true;
                                    $scope.nominationErrorMessage = '{!$Label.ERROR_SELECT_REQUIRED_VALUE}'
                                } else {
                                    
                                    if (value.Type == 'DATE' || value.Type == 'DATETIME') {
                                        var dateString = $scope.convertToDate($scope.nomination[value.Name]);
                    
                                        if (dateString == null) {
                                            $scope.isNominationError = true;
                                            $scope.nominationErrorMessage = '{!$Label.Date_Invalid}' + $scope.nomination[value.Name];
                                        } else {
                                            $scope.nomination[value.Name] = dateString;
                                        }
                                    }
                                }
                            }); 
                            if (!$scope.isNominationError && !$scope.isSLDS) {
                                var ifFilterAtt = {};
                                angular.forEach($scope.allFilter, function(filter) {
                                    if (filter.required && filter.isShow) {
                                        ifFilterAtt[filter.id] = false;
                                        angular.forEach($scope.filterAttMap[filter.id], function(att) {
                                            if (att.isSelected) {
                                                ifFilterAtt[filter.id] = true;
                                            }
                                        });
                                    }
                                });
                                angular.forEach(ifFilterAtt, function(isSelected,fiterId) {
                                    if (!isSelected) {
                                        $scope.isNominationError = true;
                                        $scope.nominationErrorMessage = '{!$Label.ERROR_SELECT_REQUIRED_VALUE}'
                                    }
                                });
                                
                                if (!$scope.isNominationError) {
                                    angular.forEach($scope.filterAttMap, function(value,filterKey) {
                                        if ($scope.filterIsVisible[filterKey] == false) {
                                            angular.forEach(value, function(attObj) {
                                                attObj.isSelected = false;
                                            });
                                        }
                                    })
                                }
                            } else if (!$scope.isNominationError && $scope.isSLDS) {
                                $scope.isForAccount = $scope.nomination[$scope.namespace + 'Contact__c'] == null || $scope.nomination[$scope.namespace + 'Contact__c'] == '';
                                entityName = ($scope.isForAccount) ? $scope.nomination['Account__r.Name'] : 'Contact' ;
                                $scope.makeMemberMsg = '{!$Label.Make_Member_from_Nomination}'.replace('@@@', entityName);
                                $scope.copyNominationMsg = '{!$Label.Only_copy_details_from_Nomination}'.replace('@@@', entityName);
                                
                                angular.forEach($scope.filterAttMap, function(value,filterKey) {
                                    if ($scope.filterIsVisible[filterKey] == false) {
                                        angular.forEach(value, function(attObj) {
                                            attObj.isSelected = false;
                                        });
                                    }
                                })
                                $scope.selectedRefTypes = [];
                                $scope.availableRefTypes = [];
                                
                                angular.forEach($scope.refTypes, function(refValue,refKey) {
                                    refValue.visible = false;
                                    
                                    if ((refValue.avaliableForAccount && refValue.avaliableForContact) || ($scope.isForAccount && refValue.avaliableForAccount) || (!$scope.isForAccount && refValue.avaliableForContact)) {
                                        refValue.visible = true;
                                        
                                        if (refValue.isSelected) {
                                            $scope.selectedRefTypes.push(refValue); 
                                        } else {
                                            $scope.availableRefTypes.push(refValue);
                                        }
                                    } else {
                                        refValue.isSelected = false;
                                        $scope.availableRefTypes.push(refValue);
                                    }
                                }); 
                            } 
                        }
                        
                        if (!$scope.isNominationError) {
                            angular.forEach($scope.nomination, function(val,key) {
                                angular.forEach($scope.selectedMultiOptions, function(mulVal,mulKey) {

                                    if (key == mulKey) {
                                        var fmult = '', start = true;

                                        for (var i=0;i<mulVal.length;i++) {

                                            if(start){
                                                fmult = mulVal[i].name;
                                                start = false;
                                            } else {
                                                fmult += ";" + mulVal[i].name;
                                            }
                                        }
                                        $scope.nomination[key] = fmult;
                                    } 
                                });
                            });
                            $scope.isLoading = true;
                            
                            if (!$scope.isSLDS && ($scope.userName == '' || $scope.userName == null)) {
                                $scope.nomination[$scope.namespace + 'Manager__c'] = null;
                            } else if($scope.isSLDS && $scope.nomination[$scope.namespace + 'Manager__c'] == '') {
                                $scope.nomination[$scope.namespace + 'Manager__c'] = null;
                                $scope.nomination['Manager__r.Name'] = '';
                            }
                            $scope.updateNomination().then(function(result) {
                          
                                if (result != null) {  
                                    if (result.indexOf(':') != -1) {
                                        $scope.isNominationError = true;
                                        $scope.nominationErrorMessage = result.split(':')[1];
                                        $scope.nomination[$scope.namespace + 'Disposition__c'] = $scope.tempInfo.nomination[$scope.namespace + 'Disposition__c']
                                        $scope.isCommentRequired = $scope.nomination[$scope.namespace + 'Disposition__c'] == 'Declined';
                                    } else {
                                        if ($scope.nomination[$scope.namespace + 'Disposition__c'] != $scope.tempInfo.nomination[$scope.namespace + 'Disposition__c']) {
                                            
                                            if ($scope.nomination[$scope.namespace + 'Disposition__c'] == 'Approved') {
                                        
                                                if ($scope.isReferenceable) {
                                                    $scope.showConfirmationForCopy = true;
                                                } else {
                                                    $scope.showConfirmationForMember = true;
                                                }
                                            } 
                                        }

                                        angular.forEach($scope.additionalFields, function(value, key) {
                                        
                                            if (value.Type == 'DATE' || value.Type == 'DATETIME') {
                                                if ($scope.nomination[value.Name] != null && $scope.nomination[value.Name] != '') {
                                                    var date = new Date($scope.nomination[value.Name])
                                                    $scope.nomination[value.Name] = $filter('date')(date, $scope.dateFormat);
                                                }
                                            }
                                        });
                                        $scope.saveRefEditModal(false).then(function(response) {
                                            $scope.saveAttributes().then(function(result) {
                                                if ($scope.nomination[$scope.namespace + 'Disposition__c'] != $scope.tempInfo.nomination[$scope.namespace + 'Disposition__c'] && $scope.nomination[$scope.namespace + 'Disposition__c'] == 'Declined') {
                                                    $scope.redirectToWorkspace();
                                                } else if (result != null && !$scope.showConfirmationForCopy && !$scope.showConfirmationForMember) { 
                                                
                                                    if ($scope.nomination[$scope.namespace + 'Disposition__c'] == $scope.tempInfo.nomination[$scope.namespace + 'Disposition__c']) {
                                                        $scope.initialFunction(false);
                                                    } 
                                                }
                                                $scope.isEdit = false;
                                                $scope.showEditNominationModal = false;
                                            });
                                        });
                                    }
                                }
                                $scope.isLoading = false;
                            });
                            
                        }
                    }

                    $scope.openNewNoteModal = function(oldNote) {
                        $scope.showNewNoteModal = true;
                        $scope.newRefNote = {};
                        var tempDate = angular.copy($scope.todayDate);
                        tempDate = tempDate.split('-');
                        var tempDateFormat = angular.copy($scope.dateFormat);
                        tempDateFormat = tempDateFormat.replace('yyyy', tempDate[0]);

                        if (tempDateFormat.indexOf('MM') >= 0) {
                            tempDateFormat = tempDateFormat.replace('MM', tempDate[1]);
                        } else {
                            tempDateFormat = tempDateFormat.replace('M', tempDate[1]);
                        }

                        if (tempDateFormat.indexOf('dd') >= 0) {
                            tempDateFormat = tempDateFormat.replace('dd', tempDate[2]);
                        } else {
                            tempDateFormat = tempDateFormat.replace('d', tempDate[2]);
                        }
                        $scope.newRefNote['nomId'] = $scope.nomination.Id;

                        if (oldNote != null && ('refNoteId' in oldNote) && oldNote['refNoteId'] != null && oldNote['refNoteId'] != '') {
                            $scope.newRefNote['refNoteId'] = oldNote['refNoteId'];
                            $scope.newRefNote['noteDate'] = oldNote['noteDate'];
                            //$scope.newRefNote['noteValue'] = oldNote['noteValue'];
                            CKEDITOR.instances['newRefNoteTxt'].setData(oldNote['noteValue']);
                        } else {
                            $scope.newRefNote['refNoteId'] = '';
                            $scope.newRefNote['noteDate'] = tempDateFormat;
                            //$scope.newRefNote['noteValue'] = '';
                            CKEDITOR.instances['newRefNoteTxt'].setData('');
                        }
                    }

                    $scope.cancelNewNote = function() {
                        $scope.showNewNoteModal = false;
                        $scope.newRefNote = {};
                    }

                    $scope.saveNewNote = function() {
                        var tempNoteDateString = $scope.convertToDate($scope.newRefNote['noteDate']);
                        $scope.showNewNoteError = false;
                        $scope.newNoteErrorMsg = '';

                        if (typeof CKEDITOR.instances['newRefNoteTxt'] != 'undefined') {
                            $scope.newRefNote['noteValue'] = CKEDITOR.instances['newRefNoteTxt'].getData();
                        }

                        if ($scope.newRefNote['noteDate'] == null || $scope.newRefNote['noteDate'] == ''
                                || $scope.newRefNote['noteValue'] == null || $scope.newRefNote['noteValue'] == '') {
                            $scope.showNewNoteError = true;
                            $scope.newNoteErrorMsg = '{!$Label.ERROR_SELECT_REQUIRED_VALUE}';
                        }

                        if (tempNoteDateString == null) {
                            $scope.showNewNoteError = true;
                            $scope.newNoteErrorMsg = '{!$Label.Date_Invalid}' + ' ' + $scope.newRefNote['noteDate'];
                        }
                        
                        if (!$scope.showNewNoteError) {
                            $scope.isLoading = true;
                            $scope.newRefNote['noteDate'] = tempNoteDateString;

                            $scope.createNote().then(function(result) {
                                
                                if (result == 'success') {
                                    $scope.showNewNoteModal = false;
                                    $scope.getRelatedNotes($scope.nomination.Id).then(function(result) {
                                        $scope.notesList = result;
                                        $scope.isLoading = false;
                                    });
                                    $scope.newRefNote = {};
                                } else {
                                    $scope.showNewNoteError = true;
                                    $scope.newNoteErrorMsg = result.split('---')[1];
                                    $scope.isLoading = false;
                                }
                            });
                        }
                    }

                    $scope.openDeleteConfirmation = function(noteId) {
                        $scope.showDeleteNoteModal = true;
                        $scope.noteIdToDelete = noteId;
                    }

                    $scope.cancelDelete = function() {
                        $scope.showDeleteNoteModal = false;
                        $scope.noteIdToDelete = '';
                    }

                    $scope.confirmDelete = function() {
                        $scope.isLoading = true;

                        $scope.deleteRefNote().then(function(result) {

                            if (result != 'success') {
                                $scope.isError = true;
                                $scope.errorMsg = result;
                            } else {
                                var index = -1;
                                
                                angular.forEach(
                                    $scope.notesList,
                                    function(note) {
                                        
                                        if (note['refNoteId'] == $scope.noteIdToDelete) {
                                            index = $scope.notesList.indexOf(note);
                                        }
                                    }
                                );

                                if (index != -1) {
                                    $scope.notesList.splice(index, 1);
                                }
                                $scope.showDeleteNoteModal = false;
                                $scope.noteIdToDelete = '';
                            }
                            $scope.isLoading = false;
                        });
                    }

                    $scope.viewAllRefNotes = function() {
                        $scope.showAllNotesModal = true;
                    }

                    $scope.closeAllNotesModal = function() {
                        $scope.showAllNotesModal = false;
                    }

                    $scope.openRefEditModal = function() {
                        $scope.showRefEditModal = true;
                        $scope.showRefEditMenu = false;
                        $scope.selectedRefTypes = [];
                        $scope.availableRefTypes = [];
                        $scope.isLoading = true;
                        $scope.getRef().then(function(result) {
                            $scope.refTypes = result;
                            
                            if (result != null) {
                                angular.forEach($scope.refTypes, function(refValue,refKey) {
                                    angular.forEach($scope.referencibility, function(nomValue,nomKey) {
                                        if (refValue.id == nomValue[$scope.namespace + 'Referenceability_Type__c']) {
                                            refValue.isSelected = true;
                                        } 
                                    });
                                });
                                angular.forEach($scope.refTypes, function(refValue,refKey) {
                                    refValue.visible = false;
                                    if ((refValue.avaliableForAccount && refValue.avaliableForContact) || ($scope.isForAccount && refValue.avaliableForAccount) || (!$scope.isForAccount && refValue.avaliableForContact)) {
                                        refValue.visible = true;
                                        if (refValue.isSelected) {
                                            $scope.selectedRefTypes.push(refValue);
                                        } else {
                                            $scope.availableRefTypes.push(refValue);
                                        }
                                    }
                                });
                                $scope.isLoading = false;
                            }
                        });
                    }

                    $scope.saveRefEditModal = function(toRefresh) {
                        var deferred = $q.defer();
                        
                        if (!$scope.isSLDS) {
                            $scope.selectedRefTypes = [];
                            $scope.availableRefTypes = [];
                        
                            angular.forEach($scope.refTypes, function(refValue,refKey) {
                                    
                                if ((refValue.avaliableForAccount && refValue.avaliableForContact) || ($scope.isForAccount && refValue.avaliableForAccount) || (!$scope.isForAccount && refValue.avaliableForContact)) {
                                    
                                    if (refValue.isSelected) {
                                        $scope.selectedRefTypes.push(refValue);
                                    } else {
                                        $scope.availableRefTypes.push(refValue);
                                    }
                                } else {
                                    $scope.availableRefTypes.push(refValue);
                                }
                            });
                        }
                        $scope.isLoading = true;
                        $scope.allRefs = [];
                        angular.forEach($scope.selectedRefTypes, function(refType) {
                            refType.isSelected = true;
                            $scope.allRefs.push(refType);
                        });
                        angular.forEach($scope.availableRefTypes, function(refType) {
                            refType.isSelected = false;
                            $scope.allRefs.push(refType);
                        });
                        $scope.saveRef().then(function(result) {
                            if (result != null) {  
                                $scope.showRefEditModal = false;
                                $scope.isLoading = false;
                                deferred.resolve(result);
                                if (toRefresh) {
                                    $scope.initialFunction(false);
                                }
                            }
                        });
                        return deferred.promise;    
                    }

                    $scope.cancelRefEditModal = function() {
                        $scope.showRefEditModal = false;
                    }

                    $scope.openAttributeEditModal = function() {
                        $scope.showAttributeEditModal = true;
                        $scope.showAttributeEditMenu = false;
                        $scope.tempInfo.filterAttMap = angular.copy($scope.filterAttMap);
                    }

                    $scope.cancelAttributeEditModal = function() {
                    //debugger modal cancel no more value visible
                        $scope.showAttributeEditModal = false;
                        $scope.filterAttMap = angular.copy($scope.tempInfo.filterAttMap);
                    }

                    $scope.saveAttributeEditModal = function(isRefresh) {
                        
                        if ($scope.isSLDS) {
                            $scope.isLoading = true;
                            $scope.showAttributeEditModal = false;
                            $scope.saveAttributes().then(function(result) {
                            
                                if (result != null && isRefresh) {  
                                    $scope.initialFunction(false);
                                }
                            });
                        } else {
                            $scope.isModalFilterError = false;
                            var ifFilterAtt = {};
                            angular.forEach($scope.allFilter, function(filter) {
                                if (filter.required && filter.isShow) {
                                    ifFilterAtt[filter.id] = false;
                                    angular.forEach($scope.filterAttMap[filter.id], function(att) {
                                        if (att.isSelected) {
                                            ifFilterAtt[filter.id] = true;
                                        }
                                    });
                                }
                            });
                            angular.forEach(ifFilterAtt, function(isSelected,fiterId) {
                                if (!isSelected) {
                                    $scope.isModalFilterError = true;
                                    $scope.modalFilterErrorMessage = '{!$Label.ERROR_SELECT_REQUIRED_VALUE}'
                                }
                            });
                            if (!$scope.isModalFilterError) {
                                var filters = {};
                                angular.forEach($scope.filterAttMap, function(value,filterKey) {
                                    
                                    if ($scope.attributes[filterKey] != null) {
                                        $scope.attributes[filterKey] = [];
                                        
                                        angular.forEach(value, function(attObj) {
                                            if (attObj.isSelected) {
                                                var arrayEntry = {};
                                                arrayEntry.attributeId = attObj.id;
                                                arrayEntry.attributeName = attObj.name;
                                                $scope.attributes[filterKey].push(arrayEntry);
                                            }
                                        });
                                        
                                        if ($scope.attributes[filterKey].length == 0) {
                                            delete $scope.attributes[filterKey];
                                            
                                            angular.forEach($scope.filters, function(filterItem) {
                                                
                                                if (filterItem[$scope.namespace + 'Label__c'] == filterKey) {
                                                $scope.filters.splice($scope.filters.indexOf(filterItem), 1);
                                                }
                                            });
                                        }
                                    } else {
                                        var isAttSelected = false 
                                        
                                        angular.forEach(value, function(attObj) {
                                            
                                            if (attObj.isSelected) {
                                                if (!isAttSelected) {
                                                    isAttSelected = true;
                                                    $scope.attributes[filterKey] = [];
                                                }
                                                var arrayEntry = {};
                                                arrayEntry.attributeId = attObj.id;
                                                arrayEntry.attributeName = attObj.name;
                                                $scope.attributes[filterKey].push(arrayEntry);
                                                filters[filterKey] = [];
                                            }
                                        });
                                    }
                                });

                                if (filters != null && filters != {} ) {
                                    
                                    angular.forEach($scope.allFilter, function(value) {
                                        if (filters[value.id] != null) {
                                            var filterEntry = {};
                                            var required = $scope.namespace + 'Required__c';
                                            filterEntry[$scope.namespace + 'Label__c'] = value.id;
                                            filterEntry[$scope.namespace + 'Label__r'] = {'Name' : value.name , required : value.required};
                                            $scope.filters.push(filterEntry);
                                        }
                                    });
                                }
                                $scope.showAttributeEditModal = false;
                            }
                        }
                    }

                    $scope.deleteRecord = function(response) {
                        if (response) {
                            $scope.isLoading = true;
                            $scope.deleteNominationRecord().then(function(result) {
                                if (result != null) {  
                                    result = $scope.parseResult(result);
                                    result = JSON.parse(result);
                                    
                                    if (result.success) {

                                        if ($scope.isFromWorkspace) {
                                            
                                            if ((typeof sforce != 'undefined') && sforce != null && sforce.console.isInConsole()) {
                                                sforce.console.openPrimaryTab(null, '/' + $scope.nomination.Id, true, null, $scope.getEditTabId, null);
                                            } else if ((typeof sforce != 'undefined') && sforce != null && $scope.isSLDS) {
                                                
                                                if (Object.keys(sforce)[0] == 'console' && Object.keys(sforce).length == 1) {
                                                    window.location.href = '{!URLFOR($Page.ReferenceWorkSpace)}'+ '?activeTab=nomiTab';
                                                } else {
                                                    sforce.one.navigateToURL('{!URLFOR($Page.ReferenceWorkspaceSLDS)}&selection=' + $scope.selection, true);
                                                }
                                            } else {
                                                window.location.href = '{!URLFOR($Page.ReferenceWorkSpace)}'+ '?activeTab=nomiTab';
                                            }
                                        } else {
                                            
                                            if ((typeof sforce != 'undefined') && sforce != null && sforce.console.isInConsole()) {
                                                sforce.console.getEnclosingTabId($scope.closeEditTab);
                                            } else if ((typeof sforce != 'undefined') && sforce != null && $scope.isSLDS) {
                                                
                                                if (Object.keys(sforce)[0] == 'console' && Object.keys(sforce).length == 1) {
                                                    window.location.href = '/' + $scope.nomination.Id.substring(0, 3);
                                                } else {
                                                    sforce.one.navigateToURL('/' + $scope.nomination.Id.substring(0, 3), true);
                                                }
                                            } else {
                                                window.location.href = '/' + $scope.nomination.Id.substring(0, 3);
                                            }
                                        }
                                    } 
                                }
                            });
                        } else {
                            $scope.showConfirmationForDelete = false;
                        }
                    }

                    $scope.redirectToDetail = function(id) {
                        window.open('/' + id);  
                    }

                    $scope.closeSubTab = function(result) {
                        sforce.console.closeTab(result.id);
                    }

                    $scope.focusWorkspaceTab = function(result) {

                        if (result.ids != null && result.ids.length > 2) {
                            sforce.console.focusSubtabById(result.ids[0]);
                        }
                        sforce.console.getEnclosingTabId($scope.closeSubTab);
                    }

                    $scope.redirectToWorkspace = function() {
                        if ($scope.isFromWorkspace) {
                            
                            if ((typeof sforce != 'undefined') && sforce != null && sforce.console.isInConsole()) {
                                sforce.console.getSubtabIds(null, $scope.focusWorkspaceTab);
                            } else if ((typeof sforce != 'undefined') && sforce != null && $scope.isSLDS) {
                                
                                if (Object.keys(sforce)[0] == 'console' && Object.keys(sforce).length == 1) {
                                    window.location.href = '{!URLFOR($Page.ReferenceWorkspaceSLDS)}&selection=' + $scope.selection;
                                } else {
                                    sforce.one.navigateToURL('{!URLFOR($Page.ReferenceWorkspaceSLDS)}&selection=' + $scope.selection, true);
                                }
                            } else {
                                window.location.href = '{!URLFOR($Page.ReferenceWorkSpace)}' + '?activeTab=nomiTab';
                            }
                        } else if (!$scope.isFromChatter) {
                            
                            if ((typeof sforce != 'undefined') && sforce != null && sforce.console.isInConsole()) {
                                sforce.console.openPrimaryTab(null, '/' + $scope.nomination.Id, true, null, $scope.getEditTabId, null);
                            } else if ((typeof sforce != 'undefined') && sforce != null && $scope.isSLDS) {

                                if (Object.keys(sforce)[0] == 'console' && Object.keys(sforce).length == 1) {
                                    window.location.href = '/' + $scope.nomination.Id;
                                } else {
                                    sforce.one.navigateToURL('/' + $scope.nomination.Id, true);
                                }
                            } else {
                                window.location.href = '/' + $scope.nomination.Id;
                            }
                        }
                    }

                    $scope.saveConfirmation = function(response) {  
                        
                        if (!response) {
                            $scope.redirectToWorkspace();
                        } else {
                            var url;
                            var copyurl = '{!URLFOR($Page.CopyNominationDetails)}';
                            if (copyurl.indexOf('?') >= 0 ) {
                                copyurl = copyurl.substring(0, copyurl.indexOf('?'));
                            }
                            if ((typeof sforce != 'undefined') && sforce != null && sforce.console.isInConsole()) {
                                url = copyurl + '?id=' + $scope.nomination.Id + '&isFromWorkspace=' + $scope.isFromWorkspace + '&selection=' + $scope.selection + '&isSLDS=' + $scope.isSLDS;
                                sforce.console.openPrimaryTab(null, url, true, null, $scope.getEditTabId, null);
                            } else if ((typeof sforce != 'undefined') && sforce != null && $scope.isSLDS) {
                                url = copyurl + '?id=' + $scope.nomination.Id + '&isFromWorkspace=' + $scope.isFromWorkspace + '&selection=' + $scope.selection + '&isSLDS=' + $scope.isSLDS;
                                
                                if (Object.keys(sforce)[0] == 'console' && Object.keys(sforce).length == 1) {
                                    window.location.href = url;
                                } else {
                                    sforce.one.navigateToURL(url, true);
                                }
                            } else {
                                window.location.href = copyurl + '?id=' + $scope.nomination.Id + '&isFromWorkspace=' + $scope.isFromWorkspace;
                            }
                        }
                        $scope.showConfirmationForCopy = false;
                        $scope.showConfirmationForMember = false;
                    }

                    $scope.parseResult = function(result) {
                        if (result != null) {
                            result = result.replace(/&quot/gi, '"');
                            result = result.replace(/&amp/g, '&');
                            result = result.replace(/&lt/g, '<');
                            result = result.replace(/&gt/g, '>');
                            result = result.replace(/;/g, '');
                            result = result.replace(/&#39/g, '\'');
                            return result;
                        }
                    }

                    $scope.createNote = function() {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefWorkspaceNominationDetailController.createNote}',
                            angular.toJson($scope.newRefNote),
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    //remoteAction call
                    $scope.saveRef = function() {
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefWorkspaceNominationDetailController.saveRef}' ,
                            $scope.nomination.Id,
                            $scope.nomination[$scope.namespace + 'Manager__c'], 
                            JSON.stringify($scope.isSLDS),
                            JSON.stringify($scope.allRefs),
                            JSON.stringify($scope.referencibility),
                            function(result, event) {  
                                deferred.resolve(result);     
                            }
                        );
                      return deferred.promise;    
                    }

                    $scope.getRelatedNotes = function(id) {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefWorkspaceNominationDetailController.getRelatedNotes}',
                            id,
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(JSON.parse(result));
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.deleteRefNote = function() {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefWorkspaceNominationDetailController.deleteRefNote}',
                            $scope.noteIdToDelete,
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    //remoteAction call
                    $scope.deleteNominationRecord = function() {
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefWorkspaceNominationDetailController.deleteNominationRecord}' ,
                            $scope.nomination.Id,
                            function(result, event) {  
                                deferred.resolve(result);     
                            }
                        );
                      return deferred.promise;    
                    }

                    //remoteAction call
                    $scope.saveAttributes = function() {
                        var deferred = $q.defer();
                        $scope.filters = angular.copy($scope.tempInfo.filters);
                        $scope.attributes = angular.copy($scope.tempInfo.attributes);
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefWorkspaceNominationDetailController.saveAttributes}' ,
                            $scope.nomination.Id,
                            $scope.nomination[$scope.namespace + 'Manager__c'], 
                            JSON.stringify($scope.isSLDS),
                            JSON.stringify($scope.filterAttMap),
                            JSON.stringify($scope.filters),
                            JSON.stringify($scope.attributes),
                            function(result, event) {  
                                deferred.resolve(result);     
                            }
                        );
                      return deferred.promise;    
                    }

                    //remoteAction call
                    $scope.updateNomination = function() {
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefWorkspaceNominationDetailController.updateNomination}' ,
                            JSON.stringify($scope.nomination),
                            function(result, event) {  
                                deferred.resolve(result);     
                            }
                        );
                      return deferred.promise;    
                    }

                    //remoteAction call
                    $scope.getRef = function() { 
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefWorkspaceNominationDetailController.getRef}' ,
                            function(result, event) { 
                                if (result != null) {
                                    result = JSON.parse($scope.parseResult(JSON.stringify(result))); 
                                }
                                deferred.resolve(result);     
                            }
                        );
                      return deferred.promise;    
                    }

                    //remoteAction call
                    $scope.getDefaults = function(id) { 
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefWorkspaceNominationDetailController.getDefaults}' ,
                            id,
                            function(result, event) {  
                                deferred.resolve(result);     
                            }
                        );
                      return deferred.promise;    
                    }

                    //remoteAction call
                    $scope.getAllFilterAttributes = function() {
                        var deferred = $q.defer();
                        var filterIdsJSON = angular.toJson($scope.allFilterIds);
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefWorkspaceNominationDetailController.getAllFilterAttributes}',filterIdsJSON,
                            function(result, event) {
                                if (result != null) {
                                    result = JSON.parse($scope.parseResult(JSON.stringify(result))); 
                                }
                                deferred.resolve(result);
                            },
                            {escape: true}
                        );
                        return deferred.promise;
                    }
                    //remoteAction call
                    $scope.getFilters = function() {
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefWorkspaceNominationDetailController.getFilters}',
                            function(result, event) {
                                if (result != null) {
                                    result = JSON.parse($scope.parseResult(JSON.stringify(result))); 
                                }
                                deferred.resolve(result);
                            },
                            {escape: true}
                        );
                        return deferred.promise;
                    }
                });
            
            </script>
        </head>
        <div  class="isSLDSSet" id="angularPanel" align="left" ng-app="myapp" ng-controller="controller">
        <div ng-init="initialFunction(true);">
            <div ng-show="isSLDS" id="lightningDiv" class="container slds" style="font-size:1.2em; font-family:'Salesforce Sans',Arial,sans-serif !important;">
                <div role="status" ng-show="isLoading" class="slds-spinner slds-spinner_medium slds-spinner_brand">
                    <span class="slds-assistive-text">Loading</span>
                    <div class="slds-spinner__dot-a"></div>
                    <div class="slds-spinner__dot-b"></div>
                </div>
                <div class="slds-page-header" ng-show="!isLoading" style="font-family:'Salesforce Sans',Arial,sans-serif !important;">
                    <div class="slds-grid slds-wrap">
                        <div class="slds-col">
                            <div class="slds-media slds-media_center"  style="font-family:'Salesforce Sans',Arial,sans-serif !important;">
                                <div class="slds-media__figure" style="margin-bottom: 0.5rem">
                                    <span class="slds-icon_container">
                                        <img alt="refedge logo" src="{!URLFOR($Resource.RefEdge_Square_Icon, 'icon-small.png')}" class="slds-icon slds-icon-text-default slds-icon_large" style="height: 2.5rem; width: 2.5rem" />
                                    </span>
                                </div>
                                <div class="slds-media__body"  style="font-family:'Salesforce Sans',Arial,sans-serif !important;">
                                    <p class="slds-text-title_caps slds-line-height_reset">{!$Label.Nomination}</p>
                                    <h1 class="slds-page-header__title slds-truncate">
                                        <span class="slds-grid slds-has-flexi-truncate slds-grid_vertical-align-center">
                                            <span class="slds-truncate" style="font-family:'Salesforce Sans',Arial,sans-serif !important;">{{nomination['Account__r.Name']}}</span>
                                        </span>
                                    </h1>
                                </div>
                            </div>
                        </div>
                        <div class="slds-col slds-no-flex slds-grid slds-align-top">
                            <div class="slds-grid slds-wrap">
                                <div class="slds-size_1-of-1">
                                    <a ng-click="showConfirmationForDelete = true" style="float: right;margin: 0;" class="slds-button slds-button_neutral">{!$Label.DeleteFull}</a>
                                    <a ng-click="editEnabled()" style="float: right;margin: 0;" class="slds-button slds-button_neutral">{!$Label.Edit}</a>
                                    <a ng-show="isFromWorkspace" ng-click="redirectToWorkspace();" style="float: right;margin: 0;cursor: pointer;" class="slds-button slds-button_neutral">{!$Label.Back_To_Workspace}</a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div style="display: inline-block;margin-top: 3vh; margin-right: 10vw;font-family:'Salesforce Sans',Arial,sans-serif !important;">
                        <p class="slds-text-title_caps slds-line-height_reset">{!$Label.Nomination}</p>
                        <h1 class="slds-truncate">
                            <span class="slds-grid slds-has-flexi-truncate slds-grid_vertical-align-center">
                                <span class="slds-truncate" style="font-family:'Salesforce Sans',Arial,sans-serif !important;">{{nomination.Name}}</span>
                            </span>
                        </h1>
                    </div>
                    <div style="display: inline-block;margin-top: 3vh;margin-right: 10vw;font-family:'Salesforce Sans',Arial,sans-serif !important;">
                        <p class="slds-text-title_caps slds-line-height_reset">{!$Label.Owner}</p>
                        <h1 class="slds-truncate">
                            <a aria-haspopup="true" ng-click="redirectToDetail(nomination.OwnerId)">
                                <span class="slds-grid slds-has-flexi-truncate slds-grid_vertical-align-center">
                                    <span class="slds-truncate" style="font-family:'Salesforce Sans',Arial,sans-serif !important;">{{nomination['Owner.Name']}}</span>
                                </span>
                            </a>
                        </h1>
                    </div>
                </div>
                <div ng-if="showConfirmationForDelete" ng-cloak="true">
                    <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open slds-modal_small">
                        <div class="slds-modal__container">
                            <header class="slds-modal__header" style="text-align:center">
                                <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">Delete Nomination</h2>
                            </header>
                            <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">
                                <div class="slds-form-element">
                                    <div class="slds-form-element__control">
                                        {!$Label.Delete_Ref_Note_Confirmation}
                                    </div>
                                </div>
                            </div> 
                            <footer class="slds-modal__footer">
                                <a class="slds-button slds-button_brand" ng-click="deleteRecord(true);">{!$Label.yes}</a>
                                <a class="slds-button slds-button_neutral" ng-click="deleteRecord(false);">{!$Label.No}</a>
                            </footer>
                        </div>
                    </section>
                    <div class="slds-backdrop slds-backdrop_open"></div>
                </div>
                <div ng-show="showConfirmationForCopy" style="text-align:center" ng-cloak="true">
                    <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open slds-modal_small">
                        <div class="slds-modal__container" style="width:40%">
                            <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">
                                <div class="slds-form-element">
                                    <div class="slds-form-element__control">
                                        {{copyNominationMsg}}
                                    </div>
                                </div>
                            </div> 
                            <footer class="slds-modal__footer">
                                <a class="slds-button slds-button_brand" ng-click="saveConfirmation(true)">{!$Label.yes}</a>
                                <a class="slds-button slds-button_neutral" ng-click="saveConfirmation(false)">{!$Label.No}</a>
                            </footer>
                        </div>
                    </section>
                    <div class="slds-backdrop slds-backdrop_open"></div>
                </div>
                <div ng-show="showConfirmationForMember" style="text-align:center" ng-cloak="true">
                    <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open slds-modal_small">
                        <div class="slds-modal__container">
                            <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">
                                <div class="slds-form-element">
                                    <div class="slds-form-element__control">
                                        {{makeMemberMsg}}
                                    </div>
                                </div>
                            </div> 
                            <footer class="slds-modal__footer">
                                <a class="slds-button slds-button_brand" ng-click="saveConfirmation(true)">{!$Label.yes}</a>
                                <a class="slds-button slds-button_neutral" ng-click="saveConfirmation(false)">{!$Label.No}</a>
                            </footer>
                        </div>
                    </section>
                    <div class="slds-backdrop slds-backdrop_open"></div>
                </div>
                <div ng-show="showAttributeEditModal" ng-cloak="true">
                    <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open slds-modal_large">
                        <div class="slds-modal__container" style="width: 65%;max-width: none;">
                            <header class="slds-modal__header">
                                <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelAttributeEditModal();">
                                    <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                    </svg>
                                    <span class="slds-assistive-text">Close</span>
                                </a>
                                <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.RF_Filters}</h2>
                            </header>
                            <div class="slds-modal__content slds-p-around--medium slds-scrollable--y">
                                <div ng-repeat="filter in allFilter" style="padding:10px;" ng-show="filter.isShow">
                                    <div> 
                                        <div style="width:100%;">
                                            <div style="display: inline !important;" class="slds-badge slds-theme--shade" >{{parseResult(filter.name)}}<div ng-show="filter.required"  class="required">*</div></div>
                                        </div>
                                        <div class="slds-grid slds-wrap" style="margin:2% 0 2% 2%;">
                                            <div style="cursor: pointer;" ng-repeat="attribute in filterAttMap[filter.id]" class="slds-size--1-of-1 slds-medium-size--1-of-3 slds-large-size--1-of-3 remove-flex">
                                                <img src="{!$Resource.GreenCheck}" style="width:15px !important;float:left;margin:1%;" ng-show="attribute.isSelected == true"/>
                                                <div style="margin-left:25px;" ng-click="attribute.isSelected = !attribute.isSelected">
                                                    {{attribute.name}}
                                                </div>
                                            </div>
                                        </div>
                                        <hr />
                                    </div>
                                </div>
                            </div>
                            <footer class="slds-modal__footer">
                                <a class="slds-button slds-button_neutral" ng-click="cancelAttributeEditModal();">{!$Label.Cancel}</a>
                                <a class="slds-button slds-button_brand" ng-click="saveAttributeEditModal(true);">{!$Label.Save}</a>
                            </footer>
                        </div>
                    </section>
                    <div class="slds-backdrop slds-backdrop--open"></div>
                </div>
                <div ng-show="showRefEditModal" ng-cloak="true">
                    <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open slds-modal_large">
                        <div class="slds-modal__container" style="width: 65%;max-width: none;">
                            <header class="slds-modal__header">
                                <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelRefEditModal();">
                                    <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                    </svg>
                                    <span class="slds-assistive-text">Close</span>
                                </a>
                                <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.Referenceability}</h2>
                            </header>
                            <div class="slds-modal__content slds-p-around--medium">
                                <div class="slds-form-element">
                                    <div class="slds-form-element">
                                        <div class="slds-col top-padding" style="padding:0.75rem">
                                            <label class="slds-form-element__label">
                                                {!$ObjectType.Nomination__c.fields.Account__c.Label}
                                            </label>
                                            <div style="padding: 1vh;">
                                                <a aria-haspopup="true" style="flex:1" ng-click="redirectToDetail(nomination[namespace + 'Account__c'])">
                                                    <p ng-bind="nomination['Account__r.Name']"/>
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="slds-form-element">
                                        <div class="slds-col top-padding" style="padding:0.75rem">
                                            <label class="slds-form-element__label">
                                                {!$ObjectType.Nomination__c.fields.Contact__c.Label}
                                            </label>
                                            <div style="padding: 1vh;">
                                                <span aria-haspopup="true" style="flex:1">
                                                    <p ng-bind="nomination['Contact__r.Name']"/>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div style="padding:0.75rem">
                                        <label style="line-height: 150% !important" class="slds-form-element__label form-element-label" >{!$Label.Referenceability_Type}</label>
                                        <div class="slds-form-element__control slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3" style="padding:0.75rem">
                                            <multi-select ng-model="selectedRefTypes"
                                                            available="availableRefTypes"
                                                            selected-label="{!$Label.Selected_Reference_Types}"
                                                            available-label="{!$Label.Available_Reference_Types}"
                                                            display-attr="name"
                                                            is-slds="isSLDS">
                                            </multi-select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <footer class="slds-modal__footer">
                                <a class="slds-button slds-button_neutral" ng-click="cancelRefEditModal();">{!$Label.Cancel}</a>
                                <a class="slds-button slds-button_brand" ng-click="saveRefEditModal(true);">{!$Label.Save}</a>
                            </footer>
                        </div>
                    </section>
                    <div class="slds-backdrop slds-backdrop--open"></div>
                </div>
                <div ng-show="showEditNominationModal" ng-cloak="true">
                    <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open slds-modal_large">
                            <div class="slds-modal__container" style="width:60vw;!important">
                            <header class="slds-modal__header">
                                <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="editDisabled()">
                                    <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                    </svg>
                                    <span class="slds-assistive-text">Close</span>
                                </a>
                                <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.Edit} {!$Label.Nomination}</h2>
                            </header>
                            <div id="error-block" ng-show="isNominationError" class="slds-p-around--small">
                                <strong>
                                    {!$Label.Please_review_the_following_errors}
                                </strong>
                                <p>
                                    {{nominationErrorMessage}}
                                </p>
                            </div>
                            <div class="slds-modal__content slds-p-around_medium">
                                <div style="display:flex">
                                <div class="slds-form-element" style="flex:1">
                                    <div class="slds-col top-padding" style="padding:0.75rem">
                                        <label class="slds-form-element__label">
                                            {!$ObjectType.Nomination__c.fields.Account__c.Label}
                                        </label>
                                        <div style="padding: 1vh;display:flex;">
                                            <a aria-haspopup="true" style="flex:1" ng-click="redirectToDetail(nomination[namespace + 'Account__c'])">
                                                <p ng-bind="nomination['Account__r.Name']"/>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                                <div class="slds-form-element" style="flex:1">
                                    <div class="slds-col top-padding" style="padding:0.75rem">
                                        <label class="slds-form-element__label">
                                            {!$ObjectType.Nomination__c.fields.Name.Label}
                                        </label>
                                        <div style="padding: 1vh;display:flex;">
                                            <span aria-haspopup="true" style="flex:1">
                                                <p ng-bind="nomination.Name"/>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div style="display:flex">
                                <div class="slds-form-element" style="flex:1">
                                    <div class="slds-col top-padding" style="padding:0.75rem">
                                        <label class="slds-form-element__label">
                                            {!$ObjectType.Nomination__c.fields.Contact__c.Label}
                                        </label>
                                        <a class="slds-form-element" ng-show="tempInfo.nomination[namespace + 'Disposition__c'] != '' && tempInfo.nomination[namespace + 'Disposition__c'] != '--None--' && tempInfo.nomination[namespace + 'Disposition__c'] != null" href="/{{nomination[namespace + 'Contact__c']}}">
                                            {{nomination['Contact__r.Name']}}
                                        </a>
                                        <div style="padding: 1vh;display:flex;" ng-show="tempInfo.nomination[namespace + 'Disposition__c'] == '' || tempInfo.nomination[namespace + 'Disposition__c'] == '--None--' || tempInfo.nomination[namespace + 'Disposition__c'] == null">
                                            <div class="slds-form-element" style="width:100%;">  
                                                <div class="slds-form-element__control" style="width:100%;"> 
                                                    <div class="slds-select_container" style="width:100%;">
                                                        <select id="contact" class="slds-select" style="width:100%;" ng-options="item.id as item.name for item in contactList" ng-model="nomination[namespace + 'Contact__c']" ng-change="changeContact(option.name)"></select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="slds-form-element" style="flex:1">
                                    <div class="slds-col top-padding" style="padding:0.75rem">
                                        <label class="slds-form-element__label">
                                            {!$ObjectType.Nomination__c.fields.Manager__c.Label}
                                        </label>
                                        
                                        <div style="padding: 1vh;display:flex;">
                                            <a class="slds-form-element" ng-show="tempInfo.nomination[namespace + 'Disposition__c'] != '' && tempInfo.nomination[namespace + 'Disposition__c'] != '--None--' && tempInfo.nomination[namespace + 'Disposition__c'] != null" href="/{{nomination[namespace + 'Manager__c']}}">
                                                {{nomination['Manager__r.Name']}}
                                            </a>
                                            <lookup-picklist ng-show="tempInfo.nomination[namespace + 'Disposition__c'] == '' || tempInfo.nomination[namespace + 'Disposition__c'] == '--None--' || tempInfo.nomination[namespace + 'Disposition__c'] == null" object-Name="'User'" object-Api-Name="'User'" selected-Id="nomination[namespace +'Manager__c']" selected-Name="nomination['Manager__r.Name']"></lookup-picklist>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="classicTableHeaderCell">
                                <p>{!$Label.Nomination} {!$ObjectType.Nomination__c.fields.Status__c.Label}</p>
                            </div>
                            <div>
                                <div style="display:flex;">
                                    <div class="slds-form-element" style="width:50%;">
                                        <div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-1 remove-flex top-padding" style="padding:0.75rem">
                                            <label class="slds-form-element__label" for="disposition">
                                                {!$ObjectType.Nomination__c.fields.Disposition__c.Label}
                                            </label>
                                            <div class="slds-form-element">  
                                                <div class="slds-form-element__control"> 
                                                    <div class="slds-select_container">
                                                        <select id="disposition" class="slds-select" ng-options="item.id as item.name for item in dispositionPickListValues" ng-model="nomination[namespace + 'Disposition__c']" ng-change="isCommentRequired = (nomination[namespace + 'Disposition__c'] == 'Declined')"></select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="slds-form-element" style="width:50%;">
                                        <div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-1 remove-flex top-padding" style="padding:0.75rem">
                                            <label class="slds-form-element__label" for="status">
                                                {!$ObjectType.Nomination__c.fields.Status__c.Label}
                                            </label>
                                            <div class="slds-form-element">  
                                                <div class="slds-form-element__control"> 
                                                    <div class="slds-select_container">
                                                        <select id="status" class="slds-select" ng-options="item.id as item.name for item in statusPickListValues" ng-model="nomination[namespace + 'Status__c']"></select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div style="padding:0.75rem">
                                    <label class="slds-form-element__label">
                                        {!$ObjectType.Nomination__c.fields.Note__c.Label}<div class="required" style="display: inline-block;" ng-show="isCommentRequired">*</div>
                                    </label>
                                    <div class="slds-form-element__control">
                                        <textarea rows="3" style="border: 1px solid;width: 100%;border-color:rgb(216, 221, 230);margin-top: 0.01rem; " ng-model="nomination[namespace + 'Note__c']" />
                                    </div>
                                </div>
                            </div>
                            <div class="classicTableHeaderCell">
                                <p>{!SUBSTITUTE($Label.Additional_Information, '@@@', '')}</p>
                            </div>
                            <div>
                                <div ng-repeat="item in additionalFields" style="width:50%;float:left;padding:0.75rem">
                                    <div class="slds-form-element">
                                        <div class="slds-col top-padding"> 
                                            <div>
                                                <div ng-if="item.Type == 'PICKLIST'">
                                                    <label class="slds-form-element__label">
                                                        {{item.Label}}
                                                    </label><div class="required" style="display: inline-block;" ng-show="item.required == 'true'">*</div>
                                                    <div class="slds-form-element">  
                                                        <div class="slds-form-element__control"> 
                                                            <div class="slds-select_container">
                                                                <select class="slds-select" ng-options="h as h for h in item.Values" ng-model="nomination[item.Name]" ng-blur="hideEdit();">                                              
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="slds-form-element">
                                        <div class="slds-col top-padding"> 
                                            <div>
                                                <div ng-if="item.Type == 'MULTIPICKLIST'">
                                                    <label class="slds-form-element__label">
                                                        {{item.Label}}
                                                    </label><div class="required" style="display: inline-block;" ng-show="item.required == 'true'">*</div>
                                                    <div class="slds-form-element">  
                                                        <div id="multi" class="slds-form-element__control"> 
                                                            <multi-select ng-model="selectedMultiOptions[item.Name]"
                                                                            available="availableMultiOptions[item.Name]"
                                                                            selected-label="SELECTED"
                                                                            available-label="AVAILABLE"
                                                                            display-attr="name">
                                                            </multi-select>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div>
                                        <div ng-if="item.Type == 'EMAIL' || item.Type == 'URL' || item.Type == 'CURRENCY' || item.Type == 'PHONE' || item.Type == 'STRING'">
                                            <label class="slds-form-element__label">
                                                {{item.Label}}
                                            </label><div class="required" style="display: inline-block;" ng-show="item.required == 'true'">*</div>
                                            <div class="slds-form-element__control">
                                                <input type="text" id="text-input-id-1" class="slds-input" ng-model="nomination[item.Name]" ng-blur="hideEdit();"/>
                                            </div>
                                        </div>
                                    </div>
                                    <div>
                                        <div ng-if="item.Type == 'TEXTAREA'">
                                            <label class="slds-form-element__label">
                                                {{item.Label}}
                                            </label><div class="required" style="display: inline-block;" ng-show="item.required == 'true'">*</div>
                                            <div class="slds-form-element__control">
                                                <textarea rows="2" style="border: 1px solid;width:99.8%;border-color: rgb(216, 221, 230);" ng-model="nomination[item.Name]"/>
                                            </div>
                                        </div>
                                    </div>
                                    <div>
                                        <div ng-if="item.Type == 'BOOLEAN'">
                                            <label class="slds-form-element__label">
                                                {{item.Label}}
                                            </label>
                                            <div class="slds-form-element">
                                                <div class="slds-form-element__control">
                                                    <span class="slds-checkbox">
                                                        <input type="checkbox" name="options" id="'checkbox' + item.Name" value="on" ng-model="nomination[item.Name]"/>
                                                        <label class="slds-checkbox__label" for="'checkbox' + item.Name">
                                                            <span class="slds-checkbox_faux"></span>
                                                        </label>
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div>
                                        <div ng-if="item.Type == 'DATE' || item.Type == 'DATETIME'">
                                            <label class="slds-form-element__label">
                                                {{item.Label}}
                                            </label><div class="required" style="display: inline-block;" ng-show="item.required == 'true'">*</div>
                                            <div class="slds-form-element__control slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-1" > 
                                                <input class="slds-input" ng-model="nomination[item.Name]" placeholder="{{dateFormat.toLowerCase()}}" date-format="{{dateFormat}}"  datetime-picker="datetime-picker" />
                                            </div>    
                                        </div>
                                    </div>
                                </div>
                            </div>
                            </div>
                            <footer class="slds-modal__footer">
                                <a class="slds-button slds-button_neutral" ng-click="editDisabled()">{!$Label.Cancel}</a>
                                <a class="slds-button slds-button_brand" ng-click="saveNomination()">{!$Label.Save}</a>
                            </footer>
                        </div>
                    </section>
                    <div class="slds-backdrop slds-backdrop_open"></div>
                </div>
                <div ng-show="showContactChangeModal" ng-cloak="true">
                    <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open slds-modal_large">
                        <div class="slds-modal__container" style="width: 40%;!important">
                            <div class="slds-modal__content slds-p-around_medium">
                                <div class="slds-form-element">
                                    <div class="slds-col top-padding">
                                        {{modalMsg}}
                                    </div>
                                </div>
                            </div>
                            <footer class="slds-modal__footer">
                                <a class="slds-button slds-button_brand" ng-click="changeValue(true)">{!$Label.Yes}</a>
                                <a class="slds-button slds-button_neutral" ng-click="changeValue(false)">{!$Label.No}</a>
                            </footer>
                        </div>
                    </section>
                    <div class="slds-backdrop slds-backdrop--open"></div>
                </div>
                <!-- delete reference note confirmation modal -->
                <div ng-if="showDeleteNoteModal" ng-cloak="true">
                    <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                        <div class="slds-modal__container">
                            <header class="slds-modal__header">
                                <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelDelete()">
                                    <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                    </svg>
                                </a>
                                <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">
                                    {!$Label.DeleteFull}&nbsp;{!$Label.Approval_Decline_Notes}
                                </h2>
                            </header>
                            <div class="slds-modal__content slds-p-around_medium">
                                {!$Label.Delete_Ref_Note_Confirmation}
                            </div>
                            <footer class="slds-modal__footer">
                                <a class="slds-button slds-button_neutral" ng-click="cancelDelete()">{!$Label.Cancel}</a>
                                <a class="slds-button slds-button_brand" ng-click="confirmDelete()">{!$Label.Ok}</a>
                            </footer>
                        </div>
                    </section>
                    <div class="slds-backdrop slds-backdrop_open"></div>
                </div>
                <!-- view all ref notes modal -->
                <div ng-if="showAllNotesModal" ng-cloak="true">
                    <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                        <div class="slds-modal__container">
                            <header class="slds-modal__header">
                                <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="closeAllNotesModal()">
                                    <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                    </svg>
                                    <span class="slds-assistive-text">Close</span>
                                </a>
                                <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.View_Reference_Notes}</h2>
                            </header>
                            <div class="slds-modal__content slds-p-around_medium">
                                <div ng-repeat="note in notesList">
                                    <div class="slds-grid slds-wrap">
                                        <div class="slds-size_1-of-1 slds-form-element slds-p-around_xx-small">
                                            <span class="slds-form-element__label">{!$Label.Note}</span>
                                            <div class="slds-form-element__control">
                                                <span class="slds-form-element__static">
                                                    <div class="noteValueDiv" ng-bind-html="note['noteValue'] | renderHtml"></div>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_xx-small">
                                            <span class="slds-form-element__label">{!$ObjectType.Reference_Note__c.fields.Note_Date__c.Label}</span>
                                            <div class="slds-form-element__control">
                                                <span class="slds-form-element__static">
                                                    {{note['noteDate']}}
                                                </span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_xx-small">
                                            <span class="slds-form-element__label">{!$ObjectType.Reference_Note__c.fields.CreatedDate.Label}</span>
                                            <div class="slds-form-element__control">
                                                <span class="slds-form-element__static">
                                                    {{note['createdDate']}}
                                                </span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_xx-small">
                                            <span class="slds-form-element__label">{!$ObjectType.Reference_Note__c.fields.LastModifiedDate.Label}</span>
                                            <div class="slds-form-element__control">
                                                <span class="slds-form-element__static">
                                                    {{note['lastModDate']}}
                                                </span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_xx-small">
                                            <span class="slds-form-element__label">{!$Label.Last_Modified_By}</span>
                                            <div class="slds-form-element__control">
                                                <span class="slds-form-element__static">
                                                    <a href="/{{note['lastModById']}}" target="_blank">
                                                        {{note['lastModBy']}}
                                                    </a>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                    <hr ng-hide="$last" style="margin: 1rem 0" />
                                </div>
                            </div>
                            <footer class="slds-modal__footer">
                                <a class="slds-button slds-button_neutral" ng-click="closeAllNotesModal()">{!$Label.Close}</a>
                            </footer>
                        </div>
                    </section>
                    <div class="slds-backdrop slds-backdrop_open"></div>
                </div>

                <div ng-show="showNewNoteModal" ng-cloak="true">
                    <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                        <div class="slds-modal__container">
                            <header class="slds-modal__header">
                                <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelNewNote()">
                                    <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                    </svg>
                                </a>
                                <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.T_New_Reference_Note}</h2>
                            </header>
                            <div class="slds-modal__content slds-p-around_medium">
                                <div ng-show="showNewNoteError" class="slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_error" style="border-radius: 3px; margin-bottom: 0.5rem" role="alert">
                                    <h2>{{newNoteErrorMsg}}</h2>
                                </div>
                                <div class="slds-grid slds-wrap">
                                    <div class="slds-size_1-of-1 slds-text-heading_small slds-p-bottom_small">
                                        Nomination Information
                                    </div>
                                    <div class="slds-size_1-of-2 slds-form-element slds-p-horizontal_x-small slds-p-bottom_small">
                                        <span class="slds-form-element__label">
                                            {!$ObjectType.Nomination__c.Label}
                                        </span>
                                        <div class="slds-form-element__control slds-border_bottom">
                                            <span class="slds-form-element__static">
                                                <a href="/{{selectedRequestItem['accRequestId']}}" target="_blank">
                                                    {{nomination.Name}}
                                                </a>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="slds-size_1-of-1 slds-text-heading_small slds-p-vertical_small">
                                        {!$Label.Details}
                                    </div>
                                    <div class="slds-size_1-of-1 slds-form-element slds-p-bottom_small">
                                        <span class="slds-form-element__label">
                                            {!$ObjectType.Reference_Note__c.fields.Note_Date__c.Label}<span style="color: #c23934">*</span>
                                        </span>
                                        <div class="slds-form-element__control">
                                            <input class="slds-input" ng-model="newRefNote['noteDate']" placeholder="{{dateFormat.toLowerCase()}}"
                                                date-format="{{dateFormat}}" datetime-picker="datetime-picker" style="width: 20%" />
                                        </div>
                                    </div>
                                    <div class="slds-size_1-of-1 slds-form-element">
                                        <span class="slds-form-element__label">
                                            {!$Label.Approval_Decline_Notes}<span style="color: #c23934">*</span>
                                        </span>
                                        <div class="slds-form-element__control" style="width: 100%">
                                            <textarea rows="6" class="ckeditor" id="newRefNoteTxt"></textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <footer class="slds-modal__footer">
                                <a class="slds-button slds-button_neutral" ng-click="cancelNewNote()">{!$Label.Cancel}</a>
                                <a class="slds-button slds-button_brand" ng-click="saveNewNote()">{!$Label.Save}</a>
                            </footer>
                        </div>
                    </section>
                    <div class="slds-backdrop slds-backdrop_open"></div>
                </div>
                <div style="display:flex" ng-show="!isLoading">
                    <div class="slds-tabs_default" style="padding: 2vw;flex:1.5;">
                        <ul class="slds-tabs_default__nav" role="tablist">
                            <li class="slds-tabs_default__item slds-is-active slds-has-focus" style="margin-left: 0;" title="Item One" role="presentation">
                                <a class="slds-tabs_default__link" style="text-transform: uppercase; letter-spacing: .0625rem;" role="tab" tabindex="0" aria-selected="true" aria-controls="tab-default-1" id="tab-default-1__item">
                                    {!$Label.Details}
                                </a>
                            </li>
                        </ul>
                        <div class="slds-tabs_default__content slds-show">
                            <div>
                                <div style="display:flex">
                                    <div class="slds-form-element" style="flex:1">
                                        <div class="slds-col top-padding" style="padding:0.75rem">
                                            <label class="slds-form-element__label" style="margin-right: 0;">
                                                {!$ObjectType.Nomination__c.fields.Status__c.Label}
                                            </label>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Nomination__c.fields.Status__c.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" style="bottom:73px!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.Status__c.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" style="bottom:73px!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.Status__c.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div style="padding: 1vh;display:flex;" class="editableFormElement">
                                                <p ng-bind="nomination[namespace + 'Status__c']" style="flex:1"/>
                                                <button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small" style="flex:0.1" ng-click="editEnabled();">
                                                    <span class="slds-icon_container slds-icon-utility-edit">
                                                        <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"/>
                                                        </svg>
                                                    </span>
                                                    <span class="slds-assistive-text">Edit</span>
                                                </button>
                                            </div>
                                            <hr/>
                                        </div>
                                    </div>
                                    <div class="slds-form-element" style="flex:1">
                                        <div class="slds-col top-padding" style="padding:0.75rem">
                                            <label class="slds-form-element__label" style="margin-right: 0;">
                                                {!$ObjectType.Nomination__c.fields.Account__c.Label}
                                            </label>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Nomination__c.fields.Account__c.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" style="bottom:73px!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.Account__c.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" style="bottom:73px!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.Account__c.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div style="padding: 1vh;display:flex;" class="editableFormElement">
                                                <a aria-haspopup="true" style="flex:1" ng-click="redirectToDetail(nomination[namespace + 'Account__c'])">
                                                    <p ng-bind="nomination['Account__r.Name']"/>
                                                </a>
                                                <button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small" style="flex:0.1" ng-click="editEnabled();">
                                                    <span class="slds-icon_container slds-icon-utility-edit">
                                                        <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"/>
                                                        </svg>
                                                    </span>
                                                    <span class="slds-assistive-text">Edit</span>
                                                </button>
                                            </div>
                                            <hr/>
                                        </div>
                                    </div>
                                </div>
                                <div style="display:flex">
                                    <div class="slds-form-element" style="flex:1">
                                        <div class="slds-col top-padding" style="padding:0.75rem">
                                            <label class="slds-form-element__label" style="margin-right: 0;">
                                                {!$ObjectType.Nomination__c.fields.CreatedDate.Label}
                                            </label>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Nomination__c.fields.CreatedDate.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" style="bottom:73px!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.CreatedDate.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" rstyle="bottom:73px!important;" ole="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.CreatedDate.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div style="padding: 1vh;display:flex;" class="editableFormElement">
                                                <p ng-bind="createdDate" style="flex:1"/>
                                                <button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small" style="flex:0.1" ng-click="editEnabled();">
                                                    <span class="slds-icon_container slds-icon-utility-edit">
                                                        <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"/>
                                                        </svg>
                                                    </span>
                                                    <span class="slds-assistive-text">Edit</span>
                                                </button>
                                            </div>
                                            <hr/>
                                        </div>
                                    </div>
                                    <div class="slds-form-element" style="flex:1">
                                        <div class="slds-col top-padding" style="padding:0.75rem">
                                            <label class="slds-form-element__label" style="margin-right: 0;">
                                                {!$ObjectType.Nomination__c.fields.Contact__c.Label}
                                            </label>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Nomination__c.fields.Contact__c.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" style="bottom:73px!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.Contact__c.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" style="bottom:73px!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.Contact__c.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div style="padding: 1vh;display:flex;" class="editableFormElement">
                                                <a ng-if="nomination['Contact__r.Name'] != null && nomination['Contact__r.Name'] != ''" aria-haspopup="true" style="flex:1" ng-click="redirectToDetail(nomination[namespace + 'Contact__c'])">
                                                    <p ng-bind="nomination['Contact__r.Name']"/>
                                                </a>
                                                <p ng-if="nomination['Contact__r.Name'] == null || nomination['Contact__r.Name'] == ''" aria-haspopup="true" style="flex:1">
                                                </p>
                                                <button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small" style="flex:0.1" ng-click="editEnabled();">
                                                    <span class="slds-icon_container slds-icon-utility-edit">
                                                        <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"/>
                                                        </svg>
                                                    </span>
                                                    <span class="slds-assistive-text">Edit</span>
                                                </button>
                                            </div>
                                            <hr/>
                                        </div>
                                    </div>
                                </div>
                                <div style="display:flex">
                                    <div class="slds-form-element" style="flex:1">
                                        <div class="slds-col top-padding" style="padding:0.75rem">
                                            <label class="slds-form-element__label" style="margin-right: 0;">
                                                {!$ObjectType.Nomination__c.fields.Disposition__c.Label}
                                            </label>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Nomination__c.fields.Disposition__c.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" style="bottom:73px!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.Disposition__c.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" style="bottom:73px!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.Disposition__c.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div style="padding: 1vh;display:flex;" class="editableFormElement">
                                                <p ng-bind="nomination[namespace + 'Disposition__c']" style="flex:1"/>
                                                <button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small" style="flex:0.1" ng-click="editEnabled();">
                                                    <span class="slds-icon_container slds-icon-utility-edit">
                                                        <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"/>
                                                        </svg>
                                                    </span>
                                                    <span class="slds-assistive-text">Edit</span>
                                                </button>
                                            </div>
                                            <hr/>
                                        </div>
                                    </div>
                                    <div class="slds-form-element" style="flex:1">
                                        <div class="slds-col top-padding" style="padding:0.75rem">
                                            <label class="slds-form-element__label" style="margin-right: 0;">
                                                {!$ObjectType.Nomination__c.fields.Manager__c.Label}
                                            </label>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Nomination__c.fields.Manager__c.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" style="bottom:73px!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.Manager__c.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" style="bottom:73px!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.Manager__c.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div style="padding: 1vh;display:flex;" class="editableFormElement">
                                                <a ng-if="nomination['Manager__r.Name'] != null &&  nomination['Manager__r.Name'] != ''" aria-haspopup="true" style="flex:1" ng-click="redirectToDetail(nomination[namespace + 'Manager__c'])">
                                                    <p ng-bind="nomination['Manager__r.Name']" style="flex:1"/>
                                                </a>
                                                <p ng-if="nomination['Manager__r.Name'] == null || nomination['Manager__r.Name'] == ''" aria-haspopup="true" style="flex:1">
                                                </p>
                                                <button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small" style="flex:0.1" ng-click="editEnabled();">
                                                    <span class="slds-icon_container slds-icon-utility-edit">
                                                        <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"/>
                                                        </svg>
                                                    </span>
                                                    <span class="slds-assistive-text">Edit</span>
                                                </button>
                                            </div>
                                            <hr/>
                                        </div>
                                    </div>
                                </div>
                                <div style="display:flex">
                                    <div class="slds-form-element" style="flex:1">
                                        <div class="slds-col top-padding" style="padding:0.75rem">
                                            <label class="slds-form-element__label" style="margin-right: 0;">
                                                {!$ObjectType.Nomination__c.fields.Note__c.Label}
                                            </label>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Nomination__c.fields.Note__c.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" style="bottom:93%!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.Note__c.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" style="bottom:93%!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.Note__c.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div style="padding: 1vh;display:flex;" class="editableFormElement">
                                                <p ng-bind="nomination[namespace + 'Note__c']" style="flex:1"/>
                                                <button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small" style="flex:0.05" ng-click="editEnabled();">
                                                    <span class="slds-icon_container slds-icon-utility-edit">
                                                        <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"/>
                                                        </svg>
                                                    </span>
                                                    <span class="slds-assistive-text">Edit</span>
                                                </button>
                                            </div>
                                            <hr/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="slds-section" ng-class="{'slds-is-open' : addInfoShow}">
                                <a class="slds-button slds-section__title-action" ng-click="addInfoShow = !addInfoShow">
                                    <svg class="slds-section__title-action-icon slds-button__icon slds-button__icon_left" aria-hidden="true">
                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#switch')}"></use>
                                    </svg>
                                    <span>{!SUBSTITUTE($Label.Additional_Information, '@@@', '')}</span>
                                </a>
                            </div>
                            <div ng-show="addInfoShow">
                                <div ng-repeat="item in additionalFields" style="width:50%;float:left;padding:0.75rem">
                                    <div style="display:flex">
                                        <div class="slds-form-element" style="flex:1">
                                            <div class="slds-col top-padding">
                                                <label class="slds-form-element__label" style="margin-right: 0;">
                                                    {{item.Label}}
                                                </label>
                                                <div style="display: inline-flex;" class="tooltip" ng-show="item.inlineHelpText != null && item.inlineHelpText != ''">
                                                    <div class="slds-form-element ">
                                                        <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                            <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                                <svg class="slds-button__icon" aria-hidden="true">
                                                                    <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                                </svg>
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" role="tooltip" id="help">
                                                        <div class="slds-popover__body" style="padding: 0.5rem;">{{item.inlineHelpText}}</div>
                                                    </div>
                                                    <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" role="tooltip" id="help">
                                                        <div class="slds-popover__body" style="padding: 0.5rem;">{{item.inlineHelpText}}</div>
                                                    </div>
                                                </div>
                                                <div style="padding: 1vh;display:flex;" class="editableFormElement">
                                                    <p ng-bind="nomination[item.Name]" style="flex:1" ng-if="item.Type != 'BOOLEAN'"/>
                                                    <div class="slds-form-element" ng-if="item.Type == 'BOOLEAN'" style="flex:1">
                                                        <div class="slds-form-element__control">
                                                            <span>
                                                                <input type="checkbox" name="options" value="on" ng-model="nomination[item.Name]" ng-disabled="true"/>
                                                            </span>
                                                        </div>
                                                    </div>
                                                    <button class="slds-button slds-button_icon slds-cell-edit__button slds-m-left_x-small" style="flex:0.05" ng-click="editEnabled();">
                                                        <span class="slds-icon_container slds-icon-utility-edit">
                                                            <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                                <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"/>
                                                            </svg>
                                                        </span>
                                                        <span class="slds-assistive-text">Edit</span>
                                                    </button>
                                                </div>
                                                <hr/>
                                            </div>
                                        </div>
                                    </div> 
                                </div> 
                            </div>
                            <div ng-show="addInfoShow && nomination[namespace + 'Other_Info__c'] != null && nomination[namespace + 'Other_Info__c'] != ''" style="width:100%;display: inline-block;float: left;padding:0.75rem;">
                                <div>
                                    <label class="slds-form-element__label" style="margin-right: 0;">
                                        {!$ObjectType.Nomination__c.fields.Other_Info__c.Label}
                                    </label>
                                    <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Nomination__c.fields.Other_Info__c.inlineHelpText}' != ''">
                                        <div class="slds-form-element ">
                                            <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                    <svg class="slds-button__icon" aria-hidden="true">
                                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                    </svg>
                                                </p>
                                            </div>
                                        </div>
                                        <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" style="bottom:93%!important;" role="tooltip" id="help">
                                            <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.Other_Info__c.inlineHelpText}</div>
                                        </div>
                                        <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" style="bottom:93%!important;" role="tooltip" id="help">
                                            <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Nomination__c.fields.Other_Info__c.inlineHelpText}</div>
                                        </div>
                                    </div>
                                    <div style="padding: 1vh;" class="editableFormElement">
                                        <p ng-bind="nomination[namespace + 'Other_Info__c']"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div style="border-left:1px solid #d8dde6;margin-top: 2vw;"></div>
                    <div class="slds-tabs_default" style="padding: 2vw;flex:1;">
                        <ul class="slds-tabs_default__nav" role="tablist">
                            <li id="relatedTab" class="slds-tabs_default__item" ng-class="{'slds-is-active' : !notesTabSelected}" role="presentation" style="padding-right: 3vw;margin-left: 0;">
                                <a class="slds-tabs_default__link" ng-click="notesTabSelected = false;" role="tab" style="text-transform: uppercase; letter-spacing: .0625rem;">
                                    Related      
                                </a>
                            </li>
                            <li class="slds-tabs_default__item" ng-class="{'slds-is-active' : notesTabSelected}" role="presentation" style="padding-right: 3vw;margin-left: 0;">
                                <a class="slds-tabs_default__link" ng-click="notesTabSelected = true;" role="tab" style="text-transform: uppercase; letter-spacing: .0625rem;">
                                    {!$Label.Notes}
                                </a>
                            </li>
                        </ul>
                        <div class="slds-tabs_default__content slds-show" role="tabpanel" aria-labelledby="tab-default-3__item">
                            <div id="relatedDiv" ng-show="!notesTabSelected">
                                <div style="display: flex; margin-top: 3vh;margin-bottom: 3vh;">
                                    <h1 class="slds-page-header__title slds-truncate" style="flex: 2;font-family: 'Salesforce Sans',Arial,sans-serif !important;">
                                        <span class="slds-grid slds-has-flexi-truncate slds-grid_vertical-align-center">
                                        <span class="slds-truncate" style="color: #54698d;">{!$Label.Attributes}</span>
                                        </span>
                                    </h1>
                                    <div class="slds-dropdown-trigger slds-dropdown-trigger_click slds-is-open slds-align-bottom" style="display: inline-block;float:right">
                                        <button class="slds-button slds-button_icon slds-button_icon-border-filled" ng-click="showAttributeEditMenu = !showAttributeEditMenu" ng-show="tempInfo.nomination[namespace + 'Disposition__c'] == '' || tempInfo.nomination[namespace + 'Disposition__c'] == '--None--' || tempInfo.nomination[namespace + 'Disposition__c'] == null">
                                            <svg class="slds-button__icon">
                                                <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}" />
                                            </svg>
                                            <span class="slds-assistive-text">Option</span>
                                        </button>
                                        <div class="slds-dropdown slds-dropdown_right" ng-show="showAttributeEditMenu">
                                            <ul class="slds-dropdown__list" role="menu">
                                                <li class="slds-dropdown__item" role="presentation">
                                                    <a role="menuitem" ng-click="openAttributeEditModal();">
                                                        <span class="slds-truncate" title="Menu Item One">{!$Label.Edit}</span>
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                <table style="margin-left: 1vw;">
                                    <thead>
                                        <tr class="slds-line-height_reset">
                                            <th>
                                            </th>
                                            <th>
                                            </th>
                                        </tr>
                                        </thead>
                                    <tbody>
                                        <tr id="attribute" ng-repeat="item in filters" ng-show="filterIsVisible[item[namespace + 'Label__c']]">
                                            <td aria-selected="true" class="slds-cell-wrap" role="gridcell" style="word-wrap:break-word;width: 25%;">
                                                <label class="slds-form-element__label" for="text-input-id-1" style="font-family: 'Salesforce Sans',Arial,sans-serif;">
                                                    {{item[namespace + 'Label__r'].Name}}:
                                                    <span class="slds-assistive-text">{{item[namespace + 'Label__r'].Name}}</span>
                                                    </label>
                                                </td>
                                            <td class="slds-grid slds-wrap">
                                                
                                                <div ng-repeat="(key,value) in attributes[item[namespace + 'Label__c']]" style="font-family: 'Salesforce Sans',Arial,sans-serif !important;color: #16325c;">
                                                    {{value.attributeName}} {{$last ? ' ' :', '}}  
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <div style="display: flex; margin-top: 3vh;margin-bottom: 3vh;">
                                    <h1 class="slds-page-header__title slds-truncate" style="flex: 2;font-family: 'Salesforce Sans',Arial,sans-serif !important;">
                                        <span class="slds-grid slds-has-flexi-truncate slds-grid_vertical-align-center">
                                        <span class="slds-truncate" style="color: #54698d;">{!$Label.Referenceability}</span>
                                        </span>
                                    </h1>
                                    <div class="slds-dropdown-trigger slds-dropdown-trigger_click slds-is-open slds-align-bottom" style="display: inline-block;float:right">
                                        <button class="slds-button slds-button_icon slds-button_icon-border-filled" ng-click="showRefEditMenu = !showRefEditMenu; showAttributeEditMenu = false;" ng-show="tempInfo.nomination[namespace + 'Disposition__c'] == '' || tempInfo.nomination[namespace + 'Disposition__c'] == '--None--' || tempInfo.nomination[namespace + 'Disposition__c'] == null">
                                            <svg class="slds-button__icon">
                                                <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}" />
                                            </svg>
                                            <span class="slds-assistive-text">Option</span>
                                        </button>
                                        <div class="slds-dropdown slds-dropdown_right" ng-show="showRefEditMenu">
                                            <ul class="slds-dropdown__list" role="menu">
                                                <li class="slds-dropdown__item" role="presentation">
                                                    <a role="menuitem" ng-click="openRefEditModal();">
                                                        <span class="slds-truncate" title="Menu Item One">{!$Label.Edit}</span>
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                <div id="referencibility" style="margin-left: 1vw;" class="slds-grid slds-wrap">
                                <span ng-repeat="item in referencibility" style="font-family: 'Salesforce Sans',Arial,sans-serif !important;color: #16325c;">
                                    {{item[namespace + 'Referenceability_Type__r'].Name}}{{$last ? ' ' : ' , '}}
                                </span>
                                </div>
                            </div>
                            <div class="slds-tabs_default__content" ng-show="notesTabSelected" role="tabpanel">
                                <div>
                                    <div class="slds-text-heading_medium" style="margin-bottom: 1rem">
                                        {!$Label.Reference_Notes}
                                        <div class="slds-dropdown-trigger slds-is-open" style="float: right">
                                            <a class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-small" aria-haspopup="true" style="line-height: 1.75">
                                                <svg class="slds-button__icon" aria-hidden="true">
                                                    <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                                </svg>
                                            </a>
                                            <div class="slds-dropdown slds-dropdown_right" style="width: max-content">
                                                <ul class="slds-dropdown__list" role="menu">
                                                    <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                        <a ng-click="openNewNoteModal()" role="menuitemcheckbox">{!$Label.New}</a>
                                                    </li>
                                                    <li class="slds-dropdown__item" style="margin-left: 0" role="presentation" ng-show="notesList.length > 0">
                                                        <a ng-click="viewAllRefNotes()" role="menuitemcheckbox">{!$Label.View_All}</a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                    <article class="slds-tile slds-hint-parent slds-p-left_small slds-p-bottom_small" ng-repeat="note in notesList">
                                        <div class="slds-grid slds-grid_align-spread slds-has-flexi-truncate">
                                            <div class="noteValueDiv" ng-bind-html="note['noteValue'] | renderHtml"></div>
                                            <div class="slds-shrink-none">
                                                <div class="slds-dropdown-trigger slds-is-open">
                                                    <a class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small" aria-haspopup="true" style="line-height: 1.3">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                                        </svg>
                                                    </a>
                                                    <div class="slds-dropdown slds-dropdown_right" style="width: max-content">
                                                        <ul class="slds-dropdown__list" role="menu">
                                                            <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                <a ng-click="openNewNoteModal(note)" role="menuitemcheckbox">{!$Label.Edit}</a>
                                                            </li>
                                                            <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                <a ng-click="openDeleteConfirmation(note['refNoteId'])" role="menuitemcheckbox">{!$Label.DeleteFull}</a>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="slds-tile__detail slds-text-body_small">
                                            <dl class="slds-list_horizontal slds-wrap">
                                                <dt class="slds-form-element__label slds-text-color_weak slds-truncate" style="width: 20%; font-weight: normal">{!$Label.Created_By}:</dt>
                                                <dd class="slds-item_detail slds-truncate">{{note['createdBy']}}</dd>
                                                <dt class="slds-form-element__label slds-text-color_weak slds-truncate" style="width: 20%; font-weight: normal">{!$ObjectType.Reference_Note__c.fields.Note_Date__c.Label}:</dt>
                                                <dd class="slds-item_detail slds-truncate">{{note['noteDate']}}</dd>
                                            </dl>
                                        </div>
                                    </article>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div ng-show="!isSLDS" id="classicDiv" >
                <div class="classicSpinnerBackground" ng-show="isLoading">
                    <apex:image styleClass="classicSpinner" id="theImage" value="{!$Resource.LoaderSpinner}" width="60" height="60" />
                </div>
                <div ng-show="!isLoading">
                    <div class="errorPageMsgDiv" style="border-color: #c00 !important; position: relative" ng-show="showPermissionsMsg || isError">
                        <img class="errorImg" src="/s.gif" />
                        <span style="position: absolute; padding-top: 0.2rem; padding-left: 0.4rem">
                            <span style="display: block; font-weight: bold; color: #cc0000">Error:</span>
                            <span ng-show="showPermissionsMsg">{{permissionsMsg}}</span>
                            <span ng-show="isError">{{errorMsg}}</span>
                        </span>
                    </div>
                    <div class="errorPageMsgDiv" style="border-color: #c00 !important; position: relative" ng-show="isNominationError">
                        <img class="errorImg" src="/s.gif" />
                        <span style="position: absolute; padding-top: 0.2rem; padding-left: 0.4rem">
                            <span style="display: block; font-weight: bold; color: #cc0000">{!$Label.Please_review_the_following_errors}</span>
                            <span>{{nominationErrorMessage}}</span>
                        </span>
                    </div>
                    <div>
                        <div style="width: 100%; margin-bottom: 0.75rem">
                            <img alt="refedge logo" src="{!URLFOR($Resource.RefEdge_Square_Icon, 'icon-small.png')}" style="margin-right: 10px; height: 2.5rem" />
                            <div style="display: inline-block">
                                <span style="font-size: 1.2em;">
                                    {!$Label.Nomination}
                                </span>
                                <div style="font-size: 2em">
                                    {{nomination['Account__r.Name']}}
                                </div>
                            </div>
                        </div>
                        <a ng-show="isFromWorkspace" style="cursor: pointer;" ng-click="redirectToWorkspace();">{!$Label.Back_To_Ref_Workspace}</a>
                        <apex:pageBlock mode="Edit">
                            <apex:pageBlockButtons >
                                <a class="btn" style="text-decoration: none; color: black; padding: 4px 3px;" ng-show="!isEdit" ng-click="editEnabled()">{!$Label.Edit}</a>
                                <a class="btn" style="text-decoration: none; color: black; padding: 4px 3px;" ng-show="isEdit" ng-click="saveNomination()">{!$Label.Save}</a>
                                <a class="btn" style="text-decoration: none; color: black; padding: 4px 3px;" ng-show="isEdit" ng-click="editDisabled()">{!$Label.Cancel}</a>
                            </apex:pageBlockButtons>
                            <table class="detailList" border="0" cellpadding="0" cellspacing="0">
                                <tbody>
                                    <th class="labelCol vfLabelColTextWrap" scope="row">
                                        {!$Label.Nomination}
                                    </th>
                                    <td class="dataCol">
                                        {{nomination.Name}}
                                    </td>
                                    <th class="labelCol vfLabelColTextWrap" scope="row">
                                    </th>
                                    <td class="dataCol">
                                    </td>
                                </tbody>
                            </table>
                            <div class="pbSubheader brandTertiaryBgr first tertiaryPalette" style="width:95%; margin-left:1%;color: white !important;">
                                <span class="pbSubExtra" style="float: left">
                                    <img ng-show="showSection.details" src="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}" alt="Hide Section - Details" class="hideListButton" ng-click="showSection.details = false;" style="cursor:pointer;" tabindex="0" title="Hide Section - Details"/>
                                    <img ng-show="!showSection.details" src="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#right')}" alt="Show Section - Details" class="showListButton" ng-click="showSection.details = true;" style="cursor:pointer;" tabindex="0" title="show Section - Details"/>
                                    <h3>{!$Label.Details}</h3>
                                </span>
                            </div>
                            <div class="pbSubsection" ng-show="showSection.details">
                                <table class="detailList" border="0" cellpadding="0" cellspacing="0">
                                    <tbody>
                                        <tr>
                                            <th class="labelCol vfLabelColTextWrap first helpButtonOn" scope="row">
                                               <label>{!$Label.Status}</label>
                                                <div class="helpOrb tooltipClassic" style="right: -9px;top:5px" ng-show="'{!$ObjectType.Nomination__c.fields.Status__c.inlineHelpText}' != ''">
                                                    <span>
                                                    {!$ObjectType.Nomination__c.fields.Status__c.inlineHelpText}
                                                    </span>
                                                </div>
                                            </th>
                                            <td class="dataCol  first">
                                                <span ng-show="!isEdit">
                                                    {{nomination[namespace + 'Status__c']}}
                                                </span>
                                                <select ng-model="nomination[namespace + 'Status__c']" ng-show="isEdit">
                                                    <option ng-repeat="option in statusPickListValues" value="{{option.id}}">{{option.name}}</option>
                                                </select>
                                            </td>
                                            <th class="labelCol vfLabelColTextWrap first helpButtonOn" scope="row">
                                               <label>{!$Label.Account}</label>
                                                <div class="helpOrb tooltipClassic" style="right: -9px;top:5px" ng-show="'{!$ObjectType.Nomination__c.fields.Account__c.inlineHelpText}' != ''">
                                                    <span>
                                                    {!$ObjectType.Nomination__c.fields.Account__c.inlineHelpText}
                                                    </span>
                                                </div>
                                            </th>
                                            <td class="dataCol  first ">
                                                <a href="/{{nomination[namespace + 'Account__c']}}" target="_blank" style="cursor: pointer; text-decoration: underline;">
                                                    {{nomination['Account__r.Name']}}
                                                </a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <th class="labelCol vfLabelColTextWrap" scope="row">
                                                {!$ObjectType.Nomination__c.fields.CreatedDate.Label}
                                            </th>
                                            <td class="dataCol">
                                                <span>
                                                    {{createdDate}}
                                                </span>
                                            </td>
                                            <th class="labelCol vfLabelColTextWrap helpButtonOn" scope="row">
                                               <label>{!$Label.Contact}</label>
                                                <div class="helpOrb tooltipClassic" style="right: -9px;top:5px" ng-show="'{!$ObjectType.Nomination__c.fields.Contact__c.inlineHelpText}' != ''">
                                                    <span>
                                                    {!$ObjectType.Nomination__c.fields.Contact__c.inlineHelpText}
                                                    </span>
                                                </div>
                                            </th>
                                            <td class="dataCol">
                                                <a ng-show="!isEdit || (tempInfo.nomination[namespace + 'Disposition__c'] != '' && tempInfo.nomination[namespace + 'Disposition__c'] != '--None--' && tempInfo.nomination[namespace + 'Disposition__c'] != null)" href="/{{nomination[namespace + 'Contact__c']}}" target="_blank" style="cursor: pointer; text-decoration: underline;">
                                                    {{nomination['Contact__r.Name']}}
                                                </a>
                                                <select ng-model="nomination[namespace + 'Contact__c']" ng-show="isEdit && (tempInfo.nomination[namespace + 'Disposition__c'] == '' || tempInfo.nomination[namespace + 'Disposition__c'] == '--None--' || tempInfo.nomination[namespace + 'Disposition__c'] == null)" ng-change="changeContact(option.name)">
                                                    <option ng-repeat="option in contactList" value="{{option.id}}" >{{parseResult(option.name)}}</option>
                                                </select>
                                            </td>
                                        </tr>
                                        <tr>
                                            <th class="labelCol vfLabelColTextWrap first helpButtonOn" scope="row">
                                               <label>{!$ObjectType.Nomination__c.fields.Disposition__c.Label}</label>
                                                <div class="helpOrb tooltipClassic" style="right: -9px;top:5px" ng-show="'{!$ObjectType.Nomination__c.fields.Disposition__c.inlineHelpText}' != ''">
                                                    <span>
                                                    {!$ObjectType.Nomination__c.fields.Disposition__c.inlineHelpText}
                                                    </span>
                                                </div>
                                            </th>
                                            <td class="dataCol  first">
                                                <span ng-show="!isEdit" >
                                                    {{nomination[namespace + 'Disposition__c']}}
                                                </span>
                                                <select ng-show="isEdit" ng-model="nomination[namespace + 'Disposition__c']" ng-change="isCommentRequired = (nomination[namespace + 'Disposition__c'] == 'Declined')">
                                                    <option ng-repeat="option in dispositionPickListValues" value="{{option.id}}">{{option.name}}</option>
                                                </select>
                                            </td>
                                            <th class="labelCol vfLabelColTextWrap first helpButtonOn" scope="row">
                                               <label>{!$Label.Owner}</label>
                                                <div class="helpOrb tooltipClassic" style="right: -9px;top:5px" ng-show="'{!$ObjectType.Nomination__c.fields.OwnerId.inlineHelpText}' != ''">
                                                    <span>
                                                    {!$ObjectType.Nomination__c.fields.OwnerId.inlineHelpText}
                                                    </span>
                                                </div>
                                            </th>
                                            <td class="dataCol">
                                                <a href="/{{nomination[OwnerId]}}" target="_blank" style="cursor: pointer; text-decoration: underline;">
                                                    {{nomination['Owner.Name']}}
                                                </a>
                                            </td>
                                        </tr>
                                        <tr>
                                            <th class="labelCol vfLabelColTextWrap first helpButtonOn" scope="row">
                                                <label>{!$ObjectType.Nomination__c.fields.Note__c.Label}
                                                <span ng-show="isCommentRequired" style="color: #CC0000;">|</span></label>
                                                <div class="helpOrb tooltipClassic" style="right: -9px;top:5px" ng-show="'{!$ObjectType.Nomination__c.fields.Note__c.inlineHelpText}' != ''">
                                                    <span>
                                                    {!$ObjectType.Nomination__c.fields.Note__c.inlineHelpText}
                                                    </span>
                                                </div>
                                            </th>
                                            <td class="dataCol last ">
                                                <span ng-show="!isEdit">
                                                    {{nomination[namespace + 'Note__c']}}
                                                </span>
                                                <textarea ng-show="isEdit" rows="3" style="border: 1px solid;width: 100%;border-color:rgb(216, 221, 230);margin-top: 0.01rem; " ng-model="nomination[namespace + 'Note__c']" />
                                            </td>
                                            <th class="labelCol vfLabelColTextWrap helpButtonOn" scope="row">
                                               <label>{!$ObjectType.Nomination__c.fields.Manager__c.Label}</label>
                                                <div class="helpOrb tooltipClassic" style="right: -9px;top:5px" ng-show="'{!$ObjectType.Nomination__c.fields.Contact__c.inlineHelpText}' != ''">
                                                    <span>
                                                    {!$ObjectType.Nomination__c.fields.Manager__c.inlineHelpText}
                                                    </span>
                                                </div>
                                            </th>
                                            <td class="dataCol">
                                                <a target="_blank" ng-show="!isEdit || (tempInfo.nomination[namespace + 'Disposition__c'] != '' && tempInfo.nomination[namespace + 'Disposition__c'] != '--None--' && tempInfo.nomination[namespace + 'Disposition__c'] != null)" style="cursor: pointer; text-decoration: underline;" href="/{{nomination[namespace + 'Manager__c']}}">
                                                    {{nomination['Manager__r.Name']}}
                                                </a>
                                                <div ng-show="isEdit && (tempInfo.nomination[namespace + 'Disposition__c'] == '' || tempInfo.nomination[namespace + 'Disposition__c'] == '--None--' || tempInfo.nomination[namespace + 'Disposition__c'] == null)" >
                                                    <input ng-model="userName" style="float:left;margin-left:0px;width:200px;"/>
                                                    &nbsp;
                                                    <div style="float:left">
                                                        <img id="theImage" src="{!$Resource.lookupIconImage}" height="16px" width="16px" style="cursor:pointer;" onclick="showLookup();"/>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div>
                                <div class="pbSubheader brandTertiaryBgr first tertiaryPalette" style="width:95%; margin-left:1%;color: white !important;">
                                    <span class="pbSubExtra" style="float: left">
                                        <img ng-show="showSection.attributes" src="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}" alt="Hide Section - Attributes" class="hideListButton" ng-click="showSection.attributes = false;" style="cursor:pointer;" tabindex="0" title="Hide Section - Attributes"/>
                                        <img ng-show="!showSection.attributes" src="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#right')}" alt="Show Section - Attributes" class="showListButton" ng-click="showSection.attributes = true;" style="cursor:pointer;" tabindex="0" title="Show Section - Attributes"/>
                                        <h3>{!$Label.Attributes}</h3>
                                    </span>
                                </div>
                                <table class="detailList" ng-show="showSection.attributes && (filters.length != 0 || isEdit)" border="0" cellpadding="0" cellspacing="0">
                                    <tbody>
                                        <tr ng-show="isEdit && (tempInfo.nomination[namespace + 'Disposition__c'] == '' || tempInfo.nomination[namespace + 'Disposition__c'] == '--None--' || tempInfo.nomination[namespace + 'Disposition__c'] == null)">
                                            <th class="labelCol vfLabelColTextWrap  first " scope="row">
                                                <label>&nbsp;</label>
                                            </th>
                                            <td class="data2Col  first ">
                                                <a style="color:#1797C0; cursor: pointer"  ng-click="openAttributeEditModal()">Edit Values</a>
                                            </td>
                                        </tr>
                                        <tr ng-repeat="item in filters" ng-show="filterIsVisible[item[namespace + 'Label__c']]">
                                            <th class="labelCol vfLabelColTextWrap " scope="row">
                                                <label>
                                                    {{item[namespace + 'Label__r'].Name}}
                                                    <span ng-show="item[namespace + 'Label__r'][namespace + 'Required__c']" style="color: #CC0000;">|</span>
                                                </label>
                                            </th>
                                            <td class="data2Col ">
                                                <span ng-repeat="(key,value) in attributes[item[namespace + 'Label__c']]">
                                                    {{value.attributeName}} {{$last ? ' ' :', '}}  
                                                </span>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <div ng-show="filters.length == 0 && !isEdit" class="labelCol vfLabelColTextWrap  first " style="width:95%;margin-left: 2%;text-align: left;">No Attributes found</div>
                                
                            </div>
                            <div>
                                <div class="pbSubheader brandTertiaryBgr first tertiaryPalette" style="width:95%; margin-left:1%;color: white !important;">
                                    <span class="pbSubExtra" style="float: left">
                                        <img ng-show="showSection.referenceability" src="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}" alt="Hide Section - Referenceability" class="hideListButton" ng-click="showSection.referenceability = false;" style="cursor:pointer;" tabindex="0" title="Hide Section - Referenceability"/>
                                        <img ng-show="!showSection.referenceability" src="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#right')}" alt="Show Section - Referenceability" class="showListButton" ng-click="showSection.referenceability = true;" style="cursor:pointer;" tabindex="0" title="Show Section - Referenceability"/>
                                        <h3>{!$Label.Referenceability}</h3>
                                    </span>
                                </div>
                                <div ng-show="showSection.referenceability" class="slds-grid slds-wrap" style="margin-top: 7px; padding: 0 12px;">
                                    <div ng-repeat="ref in refTypes"  style="padding: 3px 10px; width: 30%; display: inline-block" ng-show="ref.visible">
                                        <input ng-disabled="!isEdit || (tempInfo.nomination[namespace + 'Disposition__c'] != '' && tempInfo.nomination[namespace + 'Disposition__c'] != '--None--' && tempInfo.nomination[namespace + 'Disposition__c'] != null)" type="checkbox" id="{{'cb' + $index}}" name="{{'cb' + $index}}" ng-model="ref.isSelected" />
                                        <label for="{{'cb' + $index}}">{{parseResult(ref.name)}}</label>
                                    </div>
                                </div>
                            </div>

                            <div ng-show="additionalFields.length > 0 || (nomination[namespace + 'Other_Info__c'] != null && nomination[namespace + 'Other_Info__c'] != '')">
                                <div class="pbSubheader brandTertiaryBgr first tertiaryPalette" style="width:95%; margin-left:1%;color: white !important;">
                                    <span class="pbSubExtra" style="float: left">
                                        <img ng-show="showSection.addInfo" src="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}" alt="Hide Section - addInfo" class="hideListButton" ng-click="showSection.addInfo = false;" style="cursor:pointer;" tabindex="0" title="Hide Section - addInfo"/>
                                        <img ng-show="!showSection.addInfo" src="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#right')}" alt="Show Section - addInfo" class="showListButton" ng-click="showSection.addInfo = true;" style="cursor:pointer;" tabindex="0" title="show Section - addInfo"/>
                                        <h3>{!SUBSTITUTE($Label.Additional_Information, '@@@', '')}</h3>
                                    </span>
                                </div>
                                <table class="detailList" border="0" cellpadding="0" cellspacing="0" ng-show="showSection.addInfo" col="2">
                                    <tbody>
                                        <tr ng-repeat="field in additionalFields">
                                            <th class="labelCol vfLabelColTextWrap first helpButtonOn" scope="row">
                                                <label>
                                                    {{parseResult(field.Label)}}<span ng-show="field.required == 'true'" style="color: #c00; padding-left: 3px; font-weight: bold">|</span>
                                                </label>
                                                <div class="helpOrb tooltipClassic" style="right: -9px;top:5px" ng-show="field.inlineHelpText != null && field.inlineHelpText != ''">
                                                    <span>
                                                    {{field.inlineHelpText}}
                                                    </span>
                                                </div>
                                            </th>
                                            <td class="data2Col first">
                                                <div ng-show="!isEdit">
                                                    <span ng-show="field.Type != 'BOOLEAN'">{{nomination[field.Name]}}</span>
                                                    <input ng-show="field.Type == 'BOOLEAN'" type="checkbox" disabled="true" ng-model="nomination[field.Name]" />
                                                </div>
                                                <div style="position: relative" ng-show="isEdit">
                                                    <multi-select ng-show="field.Type == 'MULTIPICKLIST'"
                                                                  ng-model="selectedMultiOptions[field.Name]"
                                                                  available="availableMultiOptions[field.Name]"
                                                                  selected-label="SELECTED"
                                                                  available-label="AVAILABLE"
                                                                  is-slds="isSLDS"
                                                                  display-attr="name">
                                                    </multi-select> 
                                                    <input ng-model="nomination[field.Name]" ng-show="field.Type != 'DATE' && field.Type != 'MULTIPICKLIST' && field.Type != 'PICKLIST' && field.Type != 'TEXTAREA' && field.Type != 'BOOLEAN'" />
                                                    <input ng-model="nomination[field.Name]" ng-show="field.Type == 'DATE' || field.Type == 'DATETIME'" placeholder="{{dateFormat.toLowerCase()}}" date-format="{{dateFormat}}" datetime-picker="datetime-picker" />
                                                    <select ng-show="field.Type == 'PICKLIST'" ng-model="nomination[field.Name]">
                                                        <option ng-repeat="option in field.Values" value="{{option}}">{{parseResult(option)}}</option>
                                                    </select>
                                                    <textarea ng-model="nomination[field.Name]" ng-show="field.Type == 'TEXTAREA'" rows="3"></textarea>
                                                    <input ng-show="field.Type == 'BOOLEAN'" type="checkbox" id="{{'cf' + $index}}" name="{{'cf' + $index}}" ng-model="nomination[field.Name]" />
                                                </div>
                                            </td>
                                        </tr>
                                        <tr ng-show="nomination[namespace + 'Other_Info__c'] != null && nomination[namespace + 'Other_Info__c'] != ''">
                                            <th class="labelCol vfLabelColTextWrap first helpButtonOn" style="width: 7%;" scope="row" >
                                                <label>{!$ObjectType.Nomination__c.fields.Other_Info__c.Label}</label>
                                                <div class="helpOrb tooltipClassic" style="right: -9px;top:5px" ng-show="'{!$ObjectType.Nomination__c.fields.Other_Info__c.inlineHelpText}' != ''">
                                                    <span>
                                                    {!$ObjectType.Nomination__c.fields.Other_Info__c.inlineHelpText}
                                                    </span>
                                                </div>
                                            </th>
                                            <td class="dataCol last ">
                                                <span>
                                                    {{nomination[namespace + 'Other_Info__c']}}
                                                </span>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>

                            <div ng-show="showAttributeEditModal" ng-cloak="true">
                                <section role="dialog" tabindex="-1" class="classicModal" style="margin-left: -35%; width: 70%; top: 20vh;">
                                    <div>
                                        <header class="classicModalHeader">
                                            <a ng-click="cancelAttributeEditModal();" title="Close">
                                                <i class="fa fa-times" aria-hidden="true"></i>
                                            </a>
                                            <span>{!$Label.RF_Filters}</span>
                                        </header>
                                        <div class="classicModalContent">
                                            <div class="modalErrorMsg" style="border-color: #cc0000; position: relative" ng-show="isModalFilterError">
                                                <img class="errorImg" src="/s.gif" />
                                                <span style="position: absolute; padding-top: 0.2rem; padding-left: 0.4rem">
                                                    <span style="display: block; font-weight: bold; color: #cc0000">Error:</span>
                                                    <span>{{modalFilterErrorMessage}}</span>
                                                </span>
                                            </div>
                                            <div ng-repeat="filter in allFilter" style="padding-bottom: 0.75rem" ng-show="filter.isShow">
                                                <div style="font-size: 1.2rem">
                                                    {{parseResult(filter.name)}}
                                                    <span ng-show="filter.required" style="color: #c00; padding-left: 3px; font-weight: bold">|</span>
                                                </div>
                                                <div style="margin: 2% 0 2% 2%;">
                                                    <div style="cursor: pointer; width: 30%; display: inline-block" ng-repeat="attribute in filterAttMap[filter.id]">
                                                        <img src="{!$Resource.Tick}" style="width:15px !important; float:left" ng-show="attribute.isSelected" />
                                                        <div style="margin-left: 25px; margin-bottom: 5px" ng-click="attribute.isSelected = !attribute.isSelected">
                                                            {{parseResult(attribute.name)}}
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <footer class="classicModalFooter">
                                            <a class="btn" ng-click="saveAttributeEditModal(true)">{!$Label.Save}</a>
                                            <a class="btn" ng-click="cancelAttributeEditModal();">{!$Label.Cancel}</a>
                                        </footer>
                                    </div>
                                </section>
                                <div class="classicModalbackdrop"></div>
                            </div>

                            <div ng-show="showContactChangeModal" ng-cloak="true">
                                <section role="dialog" tabindex="-1" class="classicModal" style="margin-left: -20%; width: 40%; top: 35vh;">
                                    <div>
                                        <div class="classicModalContent">
                                            {{modalMsg}}
                                        </div>
                                        <footer class="classicModalFooter">
                                            <a class="btn" ng-click="changeValue(true)">{!$Label.Yes}</a>
                                            <a class="btn" ng-click="changeValue(false)">{!$Label.Cancel}</a>
                                        </footer>
                                    </div>
                                </section>
                                <div class="classicModalbackdrop"></div>
                            </div>
                            <div ng-show="showConfirmationForCopy" ng-cloak="true">
                                <section role="dialog" tabindex="-1" class="classicModal" style="margin-left: -20%; width: 40%; top: 35vh;">
                                    <div>
                                        <div class="classicModalContent">
                                            {{copyNominationMsg}}
                                        </div>
                                        <footer class="classicModalFooter">
                                            <a class="btn" ng-click="saveConfirmation(true)">{!$Label.Yes}</a>
                                            <a class="btn" ng-click="saveConfirmation(false)">{!$Label.No}</a>
                                        </footer>
                                    </div>
                                </section>
                                <div class="classicModalbackdrop"></div>
                            </div>
                            <div ng-show="showConfirmationForMember" ng-cloak="true">
                                <section role="dialog" tabindex="-1" class="classicModal" style="margin-left: -20%; width: 40%; top: 35vh;">
                                    <div>
                                        <div class="classicModalContent">
                                            {{makeMemberMsg}}
                                        </div>
                                        <footer class="classicModalFooter">
                                            <a class="btn" ng-click="saveConfirmation(true)">{!$Label.Yes}</a>
                                            <a class="btn" ng-click="saveConfirmation(false)">{!$Label.No}</a>
                                        </footer>
                                    </div>
                                </section>
                                <div class="classicModalbackdrop"></div>
                            </div>
                        </apex:pageBlock>
                    </div>
                    <div class="isSLDSSet" id="isSLDSSetNotes">
                        <apex:outputPanel id="Notes_ListId" >
                            <apex:relatedList list="Reference_Notes__r" />
                        </apex:outputPanel>
                    </div>
                </div> 
            </div>
        </div>
        </div>
    </html>
</apex:page>