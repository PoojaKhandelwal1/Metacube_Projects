<!--
 * ReferenceEdge
 * 
 * Point of Reference, Inc. - Copyright 2014 All rights reserved.
 *
 * @company : Point of Reference, Inc.
 * @website : www.point-of-reference.com
 *
 * Disclaimer: THIS SOFTWARE IS PROVIDED "AS-IS" BY POINT OF REFERENCE ("POR"), 
 * WITH NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE SOFTWARE, 
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. 
 * POR SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, 
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES. POR IS NOT LIABLE FOR, 
 * AND MAKES NO REPRESENTATIONS OR WARRANTIES REGARDING, THE ACTIONS OR OMISSIONS OF 
 * ANY THIRD PARTIES (OR THE PRODUCTS OR SERVICES OFFERED BY ANY THIRD PARTIES) INCLUDING, 
 * WITHOUT LIMIATION, SALESFORCE.COM. COPY, USE OR DISTRIBUTION PROHIBITED WITHOUT EXPRESS 
 * WRITTEN CONSENT FROM COMPANY.
 -->
<apex:page sidebar="false" controller="ReferenceProfileFormController" docType="html-5.0" standardStylesheets="false">
<script src="{!URLFOR($Resource.JqueryFiles, 'jquery-1.8.3.js')}"></script>
<script>
	$(document).ready(function() {
		$('#phHeader td.left div').css({"width": "19vw", "height": "auto"});
	});
</script>
<html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <head>
        <apex:stylesheet value="{!URLFOR($Resource.LightningCSS_2_3, 'assets/styles/salesforce-lightning-design-system.min.css')}" />
        <script src="{!URLFOR($Resource.AngularMaterialRepo, 'angular.min.js')}"></script>
        <apex:includeScript value="/support/console/44.0/integration.js" />
        
        <style>
            #lightningDiv * {
                font-family: "Salesforce Sans",Arial,sans-serif !important;
            }
            .container {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                overflow-x: hidden;
                overflow-y: scroll;
            }
            .classicSpinner {
                position: absolute;
                top: 50%;
                left: 50%;
                margin-left: -30px;
            }
            .classicSpinnerBackground {
                top: 0;
                height: 100vh;
                left: 0;
                right: 0;
                background-color: WHITE;
                opacity: 0.7;
                z-index: 9999;
            }
            .pageHeader {
                background-color: #F4F6F9;
            }
            @media screen and (max-width: 767px) {
                .desktopVisible {
                    display: none;
                }
                .mobileVisible {
                    display: block;
                }
                .horizontal-padding-large {
                    padding-right: 0.5rem;
                    padding-left: 0.5rem;
                }
                .customWidth {
                    width: 100%;
                }
                .slds-notify--toast, .slds-notify_toast {
	                min-width: 0rem !important;
                }
            }
            @media screen and (min-width: 768px) {
                .desktopVisible {
                    display: block;
                }
                .mobileVisible {
                    display: none;
                }
                .horizontal-padding-large {
                    padding-right: 1.5rem;
                    padding-left: 1.5rem;
                }
                .customWidth {
                    width: 70%;
                }
            }
            .menu-item {
                display: block;
                width: 100%;
                padding: 10px;
                text-decoration: none;
            }
            .menu-item:HOVER {
                background-color: #f4f6f9;
                text-decoration: none;
            }
            .green-check-icon {
                margin-right: 10px;
                width: 15px;
                float: right;
            }
            .pbTitle {
            	font-size: 0.8em !important;
			    font-weight: bold !important;
			    padding: 12px !important;
            }
            .homeTab .tertiaryPalette {
            	background-color: #79b4cd;
            	border-color: #79b4cd;
            	color: black !important;
            }
            .homeTab .tertiaryPalette h3 {
            	font-size: 1.1em !important;
            }
            .customPopup {
				padding: 10px;
	            background-color: white;
	            box-shadow: 0 0 20px #6D6D6D;
				border: 1px solid GRAY;
				border-radius: 5px;
				position: fixed;
				top: 20vh;
				left: 50%;
				margin-left: -40%;
				width: 80%;
				z-index: 10;
	        }
	        .popupBackground {
	            background-color: black;
	            opacity: 0.20;
	            filter: alpha(opacity = 20);
	            position: absolute;
	            width: 100%;
	            height: 100%;
	            top: 0;
	            left: 0;
	            z-index: 9;
	        }
	        .modalHeader {
	        	border-bottom: 1px solid lightgray;
	        	padding-bottom: 5px;
	        	text-align: center;
    			font-size: 1.5em;
	        }
	        .modalHeader a {
	        	float: right;
	        	text-decoration: none;
	        }
	        .modalContent {
        	    padding: 10px 0;
       	        max-height: 60vh;
   				overflow-y: auto;
	        }
	        .modalFooter {
	        	padding-top: 10px;
			    border-top: 1px solid lightgray;
			    text-align: end;
	        }
	        .custom-badge {
			    padding: 0.25rem 0.5rem;
			    border-radius: 15rem;
			    font-size: 0.625rem;
			    line-height: 1.25;
			    text-transform: uppercase;
			    letter-spacing: 0.0625em;
			    color: #16325c;
			    vertical-align: bottom;
			    white-space: nowrap;
			    float: left;
	        }
	        .errorPageMsgDiv {
            	border-radius: 4px;
            	border-color: #c00;
            	background-color: #ffc;
			    border-style: solid;
			    border-width: 1px;
			    color: #000;
			    padding: 6px 8px 6px 6px;
			    margin: 4px 20px;
            }
        </style>
        
        <script>
            var refProfileFormApp = angular.module('refProfileFormApp', []);
            var refProfileFormCtrl = refProfileFormApp.controller('refProfileFormCtrl',
                function($scope, $q) {
                    $scope.isFullLicenseAccessible = {!isFullLicenseAccessible};
                    $scope.isSLDS = {!isSLDS};
                    $scope.isLoading = false;
                    $scope.selectedAccountId = '{!JSENCODE(accountId)}';
                    $scope.selectedAccountName = '';
                    $scope.selectedContactId = '{!JSENCODE(contactId)}';
                    $scope.selectedContactName = '';
                    $scope.showMore = '{!JSENCODE(showMore)}';
                    $scope.userId = '{!JSENCODE(userId)}';
                    $scope.pageNo = '{!JSENCODE(pageNo)}';
                    $scope.isFromProfileUpdate = {!isFromProfileUpdate};
                    
                    $scope.headersList = [];
                    $scope.pageHeader = {};
                    $scope.pageSubHeader = {};
                    $scope.filterIds = [];
                    $scope.requiredFiltersMap = {};
                    $scope.refTypeIds = [];
                    $scope.filterAttributesMap = {};
                    $scope.showFiltersSection = false;
                    $scope.visibleFilterIds = [];
                    $scope.selectedFilterAttributeNames = {};
                    $scope.visibleFilterAttributesMap = {};
                    $scope.visibleRefTypes = [];
                    $scope.showFilterSelectionModal = false;
                    $scope.testObj = {};
                    $scope.testObj.comments = '';
                    $scope.showRequiredError = false;
                    $scope.showSaveError = false;
					$scope.saveErrorMessage = '';
					$scope.showSuccessToast = false;
					$scope.isSavedSuccessfully = false;
                    
                    $scope.initialFunction = function() {
                        $scope.isLoading = true;
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.ReferenceProfileFormController.getAccountContactDetails}',
                            $scope.selectedAccountId,
                            $scope.selectedContactId,
                            function(result, event) {
                            	result = $scope.parseResult(result);
                                result = result.split('@@@');
                                $scope.selectedAccountName = result[0];
                                $scope.selectedContactName = result[1];
                            }
                        );
                        
                        $scope.getDataMappingsList().then(function(result) {
                            
                            if (result.length > 0) {
                                
                                angular.forEach(
                                    result,
                                    function(dm) {
                                        
                                        if (dm['isHeader']) {
                                            $scope.headersList.push(dm);
                                            
                                            if (dm['orderNo'] == 1) {
                                                $scope.pageHeader = dm;
                                            } else if (dm['orderNo'] == 2) {
                                                $scope.pageSubHeader = dm;
                                            }
                                        } else if (dm['refTypeId'] != '' && dm['filterId'] == '') {
                                            $scope.refTypeIds.push(dm['refTypeId']);
                                        } else if (dm['filterId'] != '' && dm['refTypeId'] == '') {
                                            $scope.filterIds.push(dm['filterId']);
                                            
                                            if (dm['visible'] && dm['required']) {
                                                $scope.requiredFiltersMap[dm['filterId']] = true;
                                            } else {
                                                $scope.requiredFiltersMap[dm['filterId']] = false;
                                            }
                                        }
                                    }
                                );
                                $scope.headersList.splice($scope.headersList.indexOf($scope.pageHeader), 1);
                                $scope.headersList.splice($scope.headersList.indexOf($scope.pageSubHeader), 1);
                                
                                $scope.getFilterAttributesMap().then(function(result) {
                                    $scope.filterAttributesMap = result;
                                    
                                    if (Object.keys($scope.filterAttributesMap).length > 0) {
                                        $scope.showFiltersSection = true;
                                    } else {
                                        $scope.showFiltersSection = false;
                                    }
                                    $scope.setVisibleAttributes($scope.filterAttributesMap, false);
                                });
                                
                                $scope.getRefTypesList().then(function(result) {
                                    $scope.refTypesList = result;
                                    $scope.setVisibleRefTypes($scope.refTypesList);
                                });
                            } else {
                            	$scope.isLoading = false;
                            }
                        });
                        
                    }
                    
                    $scope.parseResult = function(result) {
                        result = result.replace(/&quot/gi, '"');
                        result = result.replace(/&amp/g, '&');
                        result = result.replace(/&lt/g, '<');
                        result = result.replace(/&gt/g, '>');
                        result = result.replace(/;/g, '');
                        result = result.replace(/&#39/g, '\'');
                        return result;
                    }
                    
                    $scope.getDataMappingsList = function() {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.ReferenceProfileFormController.getDataMappingsList}',
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(JSON.parse(result));
                            }
                        );
                        return deferred.promise;
                    }
                    
                    $scope.getFilterAttributesMap = function() {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.ReferenceProfileFormController.getFilterAttributesMap}',
                            angular.toJson($scope.filterIds),
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(JSON.parse(result));
                            }
                        );
                        return deferred.promise;
                    }
                    
                    $scope.setVisibleAttributes = function(filterAttributesMap) {
                        var tempFilterAttributesMap = {}
                        $scope.visibleFilterIds = [];
                        $scope.selectedFilterAttributeNames = {};
                        
                        if ($scope.selectedContactId == '' && $scope.selectedAccountId != '') {
                            
                            angular.forEach(
                                Object.keys(filterAttributesMap),
                                function(filterId) {
                                    
                                    if (filterAttributesMap[filterId][0]['filterLimitedTo'] == ''
                                                || filterAttributesMap[filterId][0]['filterLimitedTo'] == 'Account') {
                                        tempFilterAttributesMap[filterId] = [];
                                        
                                        for (var i = 0; i < filterAttributesMap[filterId].length; i++) {
                                            
                                            if ($scope.visibleFilterIds.indexOf(filterId) == -1) {
                                                $scope.visibleFilterIds.push(filterId);
                                                $scope.selectedFilterAttributeNames[filterId] = [];
                                            }
                                            
                                            if (filterAttributesMap[filterId][i]['attributeLimitedTo'] == ''
                                                    || filterAttributesMap[filterId][i]['attributeLimitedTo'] == 'Account') {
                                                
                                                if (filterAttributesMap[filterId][i]['isSelected']) {
                                                    $scope.selectedFilterAttributeNames[filterId].push(filterAttributesMap[filterId][i]['attributeId'] + '--' + filterAttributesMap[filterId][i]['attributeName']);
                                                }
                                                tempFilterAttributesMap[filterId].push(filterAttributesMap[filterId][i]);
                                            }
                                        }
                                    }
                                }
                            );
                        } else if ($scope.selectedContactId != '') {
                            
                            angular.forEach(
                                Object.keys(filterAttributesMap),
                                function(filterId) {
                                    
                                    if (filterAttributesMap[filterId][0]['filterLimitedTo'] == ''
                                                || filterAttributesMap[filterId][0]['filterLimitedTo'] == 'Contact') {
                                        tempFilterAttributesMap[filterId] = [];
                                        
                                        if ($scope.visibleFilterIds.indexOf(filterId) == -1) {
                                            $scope.visibleFilterIds.push(filterId);
                                            $scope.selectedFilterAttributeNames[filterId] = [];
                                        }
                                        
                                        for (var i = 0; i < filterAttributesMap[filterId].length; i++) {
                                            
                                            if (filterAttributesMap[filterId][i]['attributeLimitedTo'] == ''
                                                    || filterAttributesMap[filterId][i]['attributeLimitedTo'] == 'Contact') {
                                                
                                                if (filterAttributesMap[filterId][i]['isSelected']) {
                                                    $scope.selectedFilterAttributeNames[filterId].push(filterAttributesMap[filterId][i]['attributeId'] + '--' + filterAttributesMap[filterId][i]['attributeName']);
                                                }
                                                tempFilterAttributesMap[filterId].push(filterAttributesMap[filterId][i]);
                                            }
                                        }
                                    }
                                }
                            );
                        }
                        $scope.setAttributesLayout(tempFilterAttributesMap);
                    }
                    
                    $scope.setAttributesLayout = function(tempFilterAttributesMap1) {
                        $scope.visibleFilterAttributesMap = {};
                        
                        angular.forEach(
                            Object.keys(tempFilterAttributesMap1),
                            function(filterId) {
                                var size = tempFilterAttributesMap1[filterId].length;
                                var line = Math.floor(size / 3);
                                var mod = size % 3;
                                $scope.visibleFilterAttributesMap[filterId] = [];
                                
                                for (var i = 0; i <= line; i++) {
                                    
                                    if (mod == 0) {
                                        
                                        if (i != line) {
                                            $scope.visibleFilterAttributesMap[filterId].push(tempFilterAttributesMap1[filterId][i]);
                                            $scope.visibleFilterAttributesMap[filterId].push(tempFilterAttributesMap1[filterId][i + line]);
                                            $scope.visibleFilterAttributesMap[filterId].push(tempFilterAttributesMap1[filterId][i + line + line]);
                                        }
                                    } else if (mod == 1) {
                                        $scope.visibleFilterAttributesMap[filterId].push(tempFilterAttributesMap1[filterId][i]);
                                        
                                        if (i != line) {
                                            $scope.visibleFilterAttributesMap[filterId].push(tempFilterAttributesMap1[filterId][i + line + 1]);
                                            $scope.visibleFilterAttributesMap[filterId].push(tempFilterAttributesMap1[filterId][i + line + line + 1]);
                                        }
                                    } else if (mod == 2) {
                                        $scope.visibleFilterAttributesMap[filterId].push(tempFilterAttributesMap1[filterId][i]);
                                        $scope.visibleFilterAttributesMap[filterId].push(tempFilterAttributesMap1[filterId][i + line + 1]);
                                        
                                        if (i != line) {
                                            $scope.visibleFilterAttributesMap[filterId].push(tempFilterAttributesMap1[filterId][i + line + 1 + line + 1]);
                                        }
                                    }
                                }
                            }
                        );
                        
                        // removing those filter ids from the map which have no associated attributes
                        angular.forEach(
                            Object.keys($scope.visibleFilterAttributesMap),
                            function(filterId) {
                                
                                if ($scope.visibleFilterAttributesMap[filterId].length == 0) {
                                    delete $scope.visibleFilterAttributesMap[filterId];
                                    delete $scope.selectedFilterAttributeNames[filterId];
                                    var index = $scope.visibleFilterIds.indexOf(filterId);
                                    
                                    if (index != -1) {
                                        $scope.visibleFilterIds.splice(index, 1);
                                    }
                                }
                            }
                        );
                    }
                    
                    $scope.getRefTypesList = function() {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.ReferenceProfileFormController.getRefTypesList}',
                            angular.toJson($scope.refTypeIds),
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(JSON.parse(result));
                            }
                        );
                        return deferred.promise;
                    }
                    
                    $scope.setVisibleRefTypes = function(tempRefTypes) {
                        var tempRefTypes1 = [];
                        
                        angular.forEach(
                            tempRefTypes,
                            function(refType) {
                                
                                if (refType['refTypeLimitedTo'] == '') {
                                    tempRefTypes1.push(refType);
                                } else if ($scope.selectedContactId == '' && $scope.selectedAccountId != '' && refType['refTypeLimitedTo'] == 'Account') {
                                    refType['isSelected'] = false;
                                    tempRefTypes1.push(refType);
                                } else if ($scope.selectedContactId != '' && refType['refTypeLimitedTo'] == 'Contact') {
                                    refType['isSelected'] = false;
                                    tempRefTypes1.push(refType);
                                }
                            }
                        );
                        $scope.setRefTypesLayout(tempRefTypes1);
                    }
                    
                    $scope.setRefTypesLayout = function(tempRefTypesList) {
                        var size = tempRefTypesList.length;
                        var line = Math.floor(size / 3);
                        var mod = size % 3;
                        $scope.visibleRefTypes = [];
                        
                        for (var i = 0; i <= line; i++) {
                            
                            if (mod == 0) {
                                
                                if (i != line) {
                                    $scope.visibleRefTypes.push(tempRefTypesList[i]);
                                    $scope.visibleRefTypes.push(tempRefTypesList[i + line]);
                                    $scope.visibleRefTypes.push(tempRefTypesList[i + line + line]);
                                }
                            } else if (mod == 1) {
                                $scope.visibleRefTypes.push(tempRefTypesList[i]);
                                
                                if (i != line) {
                                    $scope.visibleRefTypes.push(tempRefTypesList[i + line + 1]);
                                    $scope.visibleRefTypes.push(tempRefTypesList[i + line + line + 1]);
                                }
                            } else if (mod == 2) {
                                $scope.visibleRefTypes.push(tempRefTypesList[i]);
                                $scope.visibleRefTypes.push(tempRefTypesList[i + line + 1]);
                                
                                if (i != line) {
                                    $scope.visibleRefTypes.push(tempRefTypesList[i + line + 1 + line + 1]);
                                }
                            }
                        }
                        $scope.isLoading = false;
                    }
                    
                    $scope.openFilterSelectionModal = function() {
                        $scope.showFilterSelectionModal = true;
                        $scope.tempVisibleFilterAttributesMap = angular.copy($scope.visibleFilterAttributesMap);
                        $scope.tempSelectedFilterAttributeNames = angular.copy($scope.selectedFilterAttributeNames);
                    }
                    
                    $scope.cancelFilterSelectionModal = function() {
                        $scope.visibleFilterAttributesMap = angular.copy($scope.tempVisibleFilterAttributesMap);
                        $scope.selectedFilterAttributeNames = angular.copy($scope.tempSelectedFilterAttributeNames);
                        $scope.showFilterSelectionModal = false;
                    }
                    
                    $scope.saveFilterSelectionModal = function() {
                        $scope.showFilterSelectionModal = false;
                    }
                    
                    $scope.selectDeselectAttribute = function(attWrapper) {
                        attWrapper['isSelected'] = !attWrapper['isSelected'];
                        var index = $scope.selectedFilterAttributeNames[attWrapper['filterId']].indexOf(attWrapper['attributeId'] + '--' + attWrapper['attributeName']);
                        
                        if (index == -1) {
                            $scope.selectedFilterAttributeNames[attWrapper['filterId']].push(attWrapper['attributeId'] + '--' + attWrapper['attributeName']);
                        } else {
                            $scope.selectedFilterAttributeNames[attWrapper['filterId']].splice(index, 1);
                        }
                    }
                    
                    $scope.getPTabId = function() {
                        sforce.console.getEnclosingPrimaryTabId($scope.closePTab);
                    }

                    $scope.closePTab = function(result) {
                        sforce.console.closeTab(result.id);
                    }
                    
                    $scope.cancel = function() {
                    	var redirectionURL = '';
                    	
                    	if ($scope.isFromProfileUpdate) {
                    		
                    		if ((typeof sforce != 'undefined') && sforce != null && sforce.console.isInConsole()) {
                                redirectionURL = '{!URLFOR($Page.ReferenceRefreshPageSLDS)}'
                                                    + '&accountId=' + $scope.selectedAccountId
                                                    + '&showmore=' + $scope.showMore
                                                    + '&pageno=' + $scope.pageNo
                                                    + '&userId=' + $scope.userId;
                                sforce.console.openPrimaryTab(null, redirectionURL, true, null, null, null);
                                sforce.console.fireEvent('closeTab', 'closeTab', $scope.getPTabId);
                            } else {
                                
                                if ($scope.isSLDS) {
                                    redirectionURL = '{!URLFOR($Page.ReferenceRefreshPageSLDS)}'
                                                        + '&accountId=' + $scope.selectedAccountId
                                                        + '&showmore=' + $scope.showMore
                                                        + '&pageno=' + $scope.pageNo
                                                        + '&userId=' + $scope.userId;
                                    sforce.one.navigateToURL(redirectionURL, true);
                                } else {
                                    redirectionURL = '{!URLFOR($Page.ReferenceRefreshPageSLDS)}'
                                                        + '?accountId=' + $scope.selectedAccountId
                                                        + '&showmore=' + $scope.showMore
                                                        + '&pageno=' + $scope.pageNo
                                                        + '&userId=' + $scope.userId;
                                    window.location = redirectionURL;
                                }
                            }
                    	}
                    }
                    
                    $scope.submit = function() {
                    	
                    	// checking if all required filters have any attribute selected or not
						angular.forEach(
							Object.keys($scope.selectedFilterAttributeNames),
							function(filterId) {
								
								if (filterId in $scope.requiredFiltersMap
											&& $scope.requiredFiltersMap[filterId]
											&& $scope.selectedFilterAttributeNames[filterId].length == 0) {
									$scope.showRequiredError = true;
								}
							}
						);
						
						// checking if the comments section is filled out if it is required
						angular.forEach(
							$scope.headersList,
							function(header) {
								
								if (header['dataMappingName'] == 'Section 6 – Free Form Text'
											&& header['required']
											&& $scope.testObj.comments == '') {
									$scope.showRequiredError = true;
								}
							}
						);
						
						if (!$scope.showRequiredError) {
							$scope.isLoading = true;
							var selectedRefTypeIds = [];
							var selectedFilterAttributesMap = {};
							
							angular.forEach(
								$scope.visibleRefTypes,
								function(refType) {
									
									if (refType['isSelected']) {
										selectedRefTypeIds.push(refType['refTypeId']);
									}
								}
							);
							
							angular.forEach(
								Object.keys($scope.visibleFilterAttributesMap),
								function(filterId) {
									
									angular.forEach(
										$scope.visibleFilterAttributesMap[filterId],
										function(attWrapper) {
											
											if (attWrapper['isSelected']) {
												
												if (!(attWrapper['filterName'] in selectedFilterAttributesMap)) {
													selectedFilterAttributesMap[attWrapper['filterName']] = [];
												}
												selectedFilterAttributesMap[attWrapper['filterName']].push(attWrapper['attributeId']);
											}
										}
									);
								}
							);
							
							Visualforce.remoting.Manager.invokeAction(
								'{!$RemoteAction.ReferenceProfileFormController.saveRefProfile}',
								$scope.selectedAccountId,
								$scope.selectedContactId,
								$scope.selectedAccountName,
								$scope.selectedContactName,
								angular.toJson(selectedFilterAttributesMap),
								angular.toJson(selectedRefTypeIds),
								$scope.testObj.comments,
								function(result, event) {
									
									if (!result.startsWith('success')) {
										$scope.showSaveError = true;
										$scope.saveErrorMessage = result;
										$scope.isLoading = false;
									} else {
										$scope.isLoading = false;
										$scope.showSuccessToast = true;
										$scope.isSavedSuccessfully = true;
									}
									$scope.$apply();
								}
							);
						}
                    }
                }
            );
        </script>
    </head>
    
    <body>
        <div ng-app="refProfileFormApp" ng-controller="refProfileFormCtrl" ng-cloak="ng-cloak">
            
            <div ng-show="!isFullLicenseAccessible" class="slds-m-around_large">
                <span class="slds-icon_container slds-icon-action-call" style="border-radius: 5px">
                    <svg class="slds-icon slds-icon_small" aria-hidden="true">
                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#warning')}"></use>
                    </svg>
                </span>
                {!$Label.User_License}
            </div>
            
            <div ng-show="isFullLicenseAccessible" ng-init="initialFunction()">
                
                <div ng-if="!isSLDS" id="classicDiv">
                    <div class="classicSpinnerBackground" ng-show="isLoading">
						<apex:image styleClass="classicSpinner" id="theImage" value="{!$Resource.LoaderSpinner}" width="60" height="60"/>
					</div>
					<div ng-show="!isLoading">
						<div class="errorPageMsgDiv" ng-show="showPermissionsMsg || showRequiredError">
							<span style="display: block; font-weight: bold; color: #cc0000">Error:</span>
							<span ng-show="showSaveError">{{saveErrorMessage}}</span>
							<span ng-show="showRequiredError">{!$Label.ERROR_SELECT_REQUIRED_VALUE}</span>
						</div>
						<div ng-show="showSuccessToast">
							<div class="errorPageMsgDiv" style="border-color: #39f !important;">
								<span>Reference Profile created successfully.</span>
							</div>
							<a ng-show="isSavedSuccessfully" class="btn"
								style="text-decoration: none;
										color: black;
										padding: 4px 3px;
										margin: 4px 20px;
										display: block;
										float: left;"
								ng-click="cancel()">{!$Label.Back_to_Profile_Update}</a>
						</div>
						<div class="slds-grid slds-wrap" ng-show="!isSavedSuccessfully">
                            <div class="slds-col slds-size_1-of-1">
                                <div class="slds-grid">
                                    <div>
                                        <img alt="refedge logo" src="{!URLFOR($Resource.RefEdge_Square_Icon, 'icon-small.png')}" class="slds-icon slds-icon-text-default slds-icon_medium" style="margin-right: 10px" />
                                    </div>
                                    <div>
                                        <div ng-show="pageHeader['visible']" style="font-size: 2em">
                                            {{pageHeader['fieldAPIName']}}
                                        </div>
                                        <span ng-show="pageHeader['visible']" style="font-size: 1.2em;">
                                            {{pageSubHeader['fieldAPIName']}}
                                        </span>
                                    </div>
                                </div>
                            </div>
	                    </div>
	                    
	                    <div ng-show="!isSavedSuccessfully">
		                    <apex:pageBlock mode="Edit">
			                    <apex:pageBlockButtons >
									<a ng-show="!isSavedSuccessfully" class="btn" style="text-decoration: none; color: black; padding: 4px 3px;" ng-click="cancel()">{!$Label.Cancel}</a>
	                                <a ng-show="!isSavedSuccessfully" class="btn" style="text-decoration: none; color: black; padding: 4px 3px;" ng-click="submit()">{!$Label.Submit}</a>
								</apex:pageBlockButtons>
			                    
			                    <div ng-show="!isSavedSuccessfully">
			                    	<!-- Account and Contact information section -->
	                    			<div class="pbSubheader brandTertiaryBgr first tertiaryPalette">
	                    				<span class="pbSubExtra" style="float: left">
	                    					<h3>{!$Label.Account_Contact_Information}</h3>
	                   					</span>
	           						</div>
		                    		
		                    		<div class="pbSubsection">
										<table class="detailList" border="0" cellpadding="0" cellspacing="0">
											<tbody>
												<tr>
													<th class="labelCol vfLabelColTextWrap  first  last " scope="row">{!$Label.Account}</th>
													<td class="dataCol  first  last ">
														<a href="/{{selectedAccountId}}" target="_blank" style="text-decoration: underline;">
	                                               			{{selectedAccountName}}
	                                       				</a>
		                                           	</td>
													<th class="labelCol vfLabelColTextWrap  first  last " scope="row">
														<label>{!$Label.Contact}</label>
													</th>
													<td class="dataCol  first  last ">
														<a ng-show="selectedContactId != ''" href="/{{selectedContactId}}" target="_blank" style="text-decoration: underline;">
	                                                        {{selectedContactName}}
	                                                    </a>
													</td>
												</tr>
											</tbody>
										</table>
									</div>
		                    		
		                    		<!-- Dynamic sections configured from the settings page -->
	                                <div ng-repeat="header in headersList" style="padding-top: 5px">
		                    			
		                    			<!-- Attributes Section -->
		                    			<div ng-show="showFiltersSection && header['visible'] && header['dataMappingName'] == 'Section 3 – Attributes'">
		                    				<div class="pbSubheader brandTertiaryBgr first tertiaryPalette">
			                    				<span class="pbSubExtra" style="float: left">
			                    					<h3>{{header['fieldAPIName']}}</h3>
			                   					</span>
			           						</div>
	                    					
	                    					<table class="detailList" border="0" cellpadding="0" cellspacing="0">
												<tbody>
			                    					<tr>
			                    						<th class="labelCol vfLabelColTextWrap  first " scope="row">
			                    							<label>&nbsp;</label>
			                   							</th>
			                   							<td class="data2Col  first ">
				                   							<a style="color:#1797C0" ng-click="openFilterSelectionModal()">{!$Label.Select_And_Edit}</a>
			                   							</td>
			               							</tr>
			               							
			               							<tr ng-repeat="filterId in visibleFilterIds">
			               								<th class="labelCol vfLabelColTextWrap " scope="row">
			               									<label>
			               										{{visibleFilterAttributesMap[filterId][0]['filterName']}}
		               											<span ng-show="requiredFiltersMap[filterId]" style="color : #CC0000;">|</span>
	               											</label>
		               									</th>
		               									<td class="data2Col " ng-show="selectedFilterAttributeNames[filterId].length > 0">
		               										<span ng-repeat="attName in selectedFilterAttributeNames[filterId]">
		               											{{attName.split('--')[1]}}
		               											<span ng-hide="$last">,&nbsp;</span>
	               											</span>
	               										</td>
	           										</tr>
												</tbody>
											</table>
			                    		</div>
				                    	
				                    	<!-- Referenceabilities Section -->
		                    			<div ng-show="visibleRefTypes.length > 0 && header['visible'] && header['dataMappingName'] == 'Section 5 – Reference Activities'">
		                    				<div class="pbSubheader brandTertiaryBgr first tertiaryPalette">
			                    				<span class="pbSubExtra" style="float: left">
			                    					<h3>{{header['fieldAPIName']}}</h3>
			                   					</span>
			           						</div>
	                    					
	                    					<div class="slds-grid slds-wrap slds-grid_vertical-align-center" style="margin-top: 7px; padding: 0 12px;">
	                                            <div ng-repeat="refType in visibleRefTypes" class="slds-size_1-of-3" style="padding: 3px 10px;">
	                                            	<input type="checkbox" id="{{'cb' + $index}}" name="refType" ng-model="refType['isSelected']" />
	                                                <label for="{{'cb' + $index}}">{{refType['refTypeName']}}</label>
	                                            </div>
	                                        </div>
			                    		</div>
				                    	
				                    	<!-- Free form text section -->
	                                    <div ng-show="header['visible'] && header['dataMappingName'] == 'Section 6 – Free Form Text'">
	                                        <div class="pbSubheader brandTertiaryBgr first tertiaryPalette">
			                    				<span class="pbSubExtra" style="float: left">
			                    					<h3>{{header['fieldAPIName']}}</h3>
			                   					</span>
			           						</div>
	                                        
	                                        <table class="detailList" border="0" cellpadding="0" cellspacing="0">
												<tbody>
													<tr>
				                                        <th class="labelCol vfLabelColTextWrap  first  last " scope="row">{!$Label.Comments}</th>
														<td class="data2Col  first  last ">
															<div class="requiredInput">
																<div ng-show="header['required']" class="requiredBlock" style="bottom: 6px;"></div>
																<textarea ng-model="testObj.comments" rows="4" cols="100"></textarea>
															</div>
				                                       	</td>
													</tr>
												</tbody>
											</table>
	                                    </div>
			                    	</div>
				                    
				                    <!-- Modals and Toasts -->
				                    <!-- Attributes selection modal -->             
			                        <div ng-show="showFilterSelectionModal">
			                        	<div class="customPopup">
				                        	<div class="modalHeader">
				                        		<a ng-click="cancelFilterSelectionModal()">
			                                        <svg class="slds-button__icon slds-button__icon_medium" aria-hidden="true">
			                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
			                                        </svg>
			                                        <span class="slds-assistive-text">Close</span>
			                                    </a>
			                                    <h2>{!$Label.RF_Filters}</h2>
				                        	</div>
				                        	<div class="modalContent">
				                        		<div style="margin: 10px" ng-repeat="filterId in visibleFilterIds">
				                        			<div style="font-weight: bold;">
		                                                {{visibleFilterAttributesMap[filterId][0]['filterName']}}<span ng-show="requiredFiltersMap[filterId]" style="color: #c23934">&nbsp;|</span>
		                                            </div>
		                                            <div class="slds-grid slds-wrap slds-grid_vertical-align-center" style="margin: 2% 0 2% 2%">
		                                                <div ng-repeat="att in visibleFilterAttributesMap[filterId]" class="slds-size_1-of-3">
		                                                    <div class="slds-grid slds-wrap slds-grid_vertical-align-center">
		                                                        <div class="slds-col slds-size_2-of-12">
		                                                            <img class="green-check-icon" src="{!$Resource.GreenCheck}" ng-show="att['isSelected']"/>
		                                                        </div>
		                                                        <div class="slds-col slds-size_10-of-12" ng-click="selectDeselectAttribute(att)" style="cursor: pointer; color: #16325c">
		                                                            {{att['attributeName']}}
		                                                        </div>
		                                                    </div>
		                                                </div>
		                                            </div>
		                                            <hr ng-hide="$last" />
				                        		</div>
				                        	</div>
				                        	<div class="modalFooter">
				                        		<a class="btn" style="text-decoration: none; color: black; padding: 4px 3px;" ng-click="cancelFilterSelectionModal()">{!$Label.Cancel}</a>
		                                        <a class="btn" style="text-decoration: none; color: black; padding: 4px 3px;" ng-click="saveFilterSelectionModal()">{!$Label.Save}</a>
				                        	</div>
			                        	</div>
			                            <div class="popupBackground"></div>
			                        </div>
			                    </div>
		                    </apex:pageBlock>
	                    </div>
                    </div>
                </div>
                
                <div ng-if="isSLDS" id="lightningDiv" class="container">
                    <div role="status" ng-show="isLoading" class="slds-spinner slds-spinner_medium slds-spinner_brand">
                        <span class="slds-assistive-text">Loading</span>
                        <div class="slds-spinner__dot-a"></div>
                        <div class="slds-spinner__dot-b"></div>
                    </div>
                    <div ng-show="!isLoading">
                        
                        <!-- Page header -->
                        <div class="pageHeader slds-grid slds-wrap slds-grid_vertical-align-center slds-p-horizontal_x-large slds-p-vertical_small">
                            <div class="slds-size_1-of-1 slds-medium-size_9-of-12 slds-large-size_9-of-12">
                                <div class="slds-grid slds-grid_vertical-align-center">
                                    <div>
                                        <img alt="refedge logo" src="{!URLFOR($Resource.RefEdge_Square_Icon, 'icon-small.png')}" class="slds-icon slds-icon-text-default slds-icon_large" style="margin-right: 10px" />
                                    </div>
                                    <div>
                                        <div class="slds-text-heading_medium" ng-show="pageHeader['visible']">
                                            {{pageHeader['fieldAPIName']}}
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="slds-size_1-of-1 slds-medium-size_3-of-12 slds-large-size_3-of-12" style="z-index: 100 !important;">
                                <div class="slds-grid slds-grid_align-end">
                                    <a ng-show="!isSavedSuccessfully" class="slds-button slds-button_neutral" ng-click="cancel()">{!$Label.Cancel}</a>
                                    <a ng-show="!isSavedSuccessfully" class="slds-button slds-button_brand" ng-click="submit()">{!$Label.Submit}</a>
                                    <a ng-show="isSavedSuccessfully" class="slds-button slds-button_brand" ng-click="cancel()">{!$Label.Back_to_Profile_Update}</a>
                                </div>
                            </div>
                        </div>
                        <div class="slds-grid slds-wrap slds-grid_vertical-align-center slds-p-horizontal_x-large slds-p-vertical_small" style="border-bottom: 1px solid #d8dde6">
                            <div class="slds-col slds-size_12-of-12">
                                <div class="slds-text-heading_small" ng-show="pageSubHeader['visible']" style="float: left">
                                    {{pageSubHeader['fieldAPIName']}}
                                </div>
                            </div>
                        </div>
                        
                        <div ng-show="!isSavedSuccessfully">
                        	<div class="slds-grid slds-wrap">
	                            <div class="customWidth horizontal-padding-large slds-m-vertical_large" style="border-right: 1px solid #d8dde6">
	                                
	                                <!-- Account and Contact information section -->
	                                <div class="slds-grid slds-wrap slds-grid_vertical-align-center slds-m-bottom_large">
	                                    <div class="slds-col slds-size_1-of-2">
	                                        <div class="slds-form-element slds-m-horizontal_small">
	                                            <span class="slds-form-element__label">
	                                                {!$Label.Account}
	                                            </span>
	                                            <div class="slds-form-element__control slds-border_bottom">
	                                                <span class="slds-form-element__static">
	                                                    <a href="/{{selectedAccountId}}" target="_blank" style="text-decoration: none">
	                                                        {{selectedAccountName}}
	                                                    </a>
	                                                </span>
	                                            </div>
	                                        </div>
	                                    </div>
	                                    <div class="slds-col slds-size_1-of-2">
	                                        <div class="slds-form-element slds-m-horizontal_small">
	                                            <span class="slds-form-element__label">{!$Label.Contact}</span>
	                                            <div class="slds-form-element__control slds-border_bottom">
	                                                <span class="slds-form-element__static">
	                                                    <a ng-show="selectedContactId != ''" href="/{{selectedContactId}}" target="_blank" style="text-decoration: none">
	                                                        {{selectedContactName}}
	                                                    </a>
	                                                </span>
	                                            </div>
	                                        </div>
	                                    </div>
	                                </div>
	                                
	                                <!-- Dynamic sections configured from the settings page -->
	                                <div ng-repeat="header in headersList" class="slds-m-bottom_large">
	                                    
	                                    <!-- Attributes Section -->
	                                    <div ng-show="showFiltersSection && header['visible'] && header['dataMappingName'] == 'Section 3 – Attributes'">
	                                        <div class="slds-text-heading_small slds-m-bottom_small">
	                                            {{header['fieldAPIName']}}
	                                            <div style="float: right">
	                                                <div class="slds-dropdown-trigger slds-is-open">
	                                                    <button class="slds-button slds-button_icon slds-button_icon-small slds-button_icon-border-filled" aria-haspopup="true" title="Show More">
	                                                        <svg class="slds-button__icon" aria-hidden="true">
	                                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
	                                                        </svg>
	                                                        <span class="slds-assistive-text">Show More</span>
	                                                    </button>
	                                                    <div class="slds-dropdown slds-dropdown_right">
	                                                        <a class="menu-item" ng-click="openFilterSelectionModal()" role="menuitem" tabindex="0">
	                                                            {!$Label.Edit}
	                                                        </a>
	                                                    </div>
	                                                </div>
	                                            </div>
	                                        </div>
	                                        <div class="slds-grid slds-wrap slds-grid_vertical-align-center">
	                                            <div ng-repeat="filterId in visibleFilterIds" class="slds-size_1-of-1 slds-m-bottom_x-small">
	                                                <div class="slds-grid slds-wrap slds-grid_vertical-align-center slds-m-horizontal_small">
	                                                    <div class="slds-size_1-of-1 slds-text-color_weak">
	                                                        {{visibleFilterAttributesMap[filterId][0]['filterName']}}<span ng-show="requiredFiltersMap[filterId]" style="color: #c23934">*</span>
	                                                    </div>
	                                                    <div class="slds-size_1-of-1" ng-show="selectedFilterAttributeNames[filterId].length > 0">
	                                                        <span ng-repeat="attName in selectedFilterAttributeNames[filterId]">{{attName.split('--')[1]}}<span ng-hide="$last">,&nbsp;</span></span>
	                                                    </div>
	                                                </div>
	                                            </div>
	                                        </div>
	                                    </div>
	                                    
	                                    <!-- Referenceabilities section -->
	                                    <div ng-show="visibleRefTypes.length > 0 && header['visible'] && header['dataMappingName'] == 'Section 5 – Reference Activities'">
	                                        <div class="slds-text-heading_small slds-m-bottom_small">{{header['fieldAPIName']}}</div>
	                                        <div class="slds-grid slds-wrap slds-grid_vertical-align-center">
	                                            <div ng-repeat="refType in visibleRefTypes" class="slds-size_1-of-1 slds-medium-size_1-of-3 slds-large-size_1-of-3">
	                                                <div class="slds-form-element slds-m-top_x-small slds-m-horizontal_small">
	                                                    <div class="slds-form-element__control">
	                                                        <span class="slds-checkbox">
	                                                            <input type="checkbox" id="{{'cb' + $index}}" name="refType" ng-model="refType['isSelected']" />
	                                                            <label class="slds-checkbox__label" for="{{'cb' + $index}}">
	                                                                <span class="slds-checkbox_faux"></span>
	                                                                <span class="slds-form-element__label">{{refType['refTypeName']}}</span>
	                                                            </label>
	                                                        </span>
	                                                    </div>
	                                                </div>
	                                            </div>
	                                        </div>
	                                    </div>
	                                    
	                                    <!-- Free form text section -->
	                                    <div ng-show="header['visible'] && header['dataMappingName'] == 'Section 6 – Free Form Text'">
	                                        <div class="slds-text-heading_small slds-m-bottom_small">{{header['fieldAPIName']}}</div>
	                                        <div class="slds-grid slds-wrap slds-grid_vertical-align-center">
	                                            <div class="slds-col slds-size_1-of-1">
	                                                <div class="slds-form-element slds-m-horizontal_x-large">
	                                                    <label class="slds-form-element__label">
	                                                        {!$Label.Comments}<span ng-show="header['required']" style="color: #c23934">*</span>
	                                                    </label>
	                                                    <div class="slds-form-element__control">
	                                                        <textarea class="slds-textarea" ng-model="testObj.comments"></textarea>
	                                                    </div>
	                                                </div>
	                                            </div>
	                                        </div>
	                                    </div>
	                                </div>
	                            </div>
	                        </div>
                        </div>
                        
                        <!-- Modals and toasts -->
						
						<!-- Success toast -->
						<div class="slds-notify_container" ng-show="showSuccessToast" style="z-index: 10 !important;">
						    <div class="slds-notify slds-notify_toast slds-theme_success" role="alert">
						        <span class="slds-assistive-text">Info</span>
						        <a class="slds-button slds-button_icon slds-notify__close slds-button_icon-inverse" title="Close" ng-click="showSuccessToast = false">
						            <svg aria-hidden="true" class="slds-button__icon slds-button__icon_large">
						                <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
						            </svg>
						            <span class="slds-assistive-text">Close</span>
						        </a>
						        <div class="slds-notify__content">
						            <h2 class="slds-text-heading_small" style="font-size: 16px; white-space: pre-line;">Reference Profile created successfully.</h2>
						        </div>
						    </div>
						</div>
						
						<!-- Required Error -->
                        <div class="slds-notify_container" ng-show="showRequiredError">
						    <div class="slds-notify slds-notify_toast slds-theme_error" role="alert">
						        <span class="slds-assistive-text">Info</span>
						        <a class="slds-button slds-button_icon slds-notify__close slds-button_icon-inverse" title="Close" ng-click="showRequiredError = false">
						            <svg aria-hidden="true" class="slds-button__icon slds-button__icon_large">
						                <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
						            </svg>
						            <span class="slds-assistive-text">Close</span>
						        </a>
						        <div class="slds-notify__content">
						            <h2 class="slds-text-heading_small" style="font-size: 16px; white-space: pre-line;">{!$Label.ERROR_SELECT_REQUIRED_VALUE}</h2>
						        </div>
						    </div>
						</div>
                        
                        <!-- Save Error -->
                        <div class="slds-notify_container" ng-show="showSaveError">
						    <div class="slds-notify slds-notify_toast slds-theme_error" role="alert">
						        <span class="slds-assistive-text">Info</span>
						        <a class="slds-button slds-button_icon slds-notify__close slds-button_icon-inverse" title="Close" ng-click="showSaveError = false">
						            <svg aria-hidden="true" class="slds-button__icon slds-button__icon_large">
						                <use xlink:href="{!URLFOR($Resource.LightningCSS,'/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
						            </svg>
						            <span class="slds-assistive-text">Close</span>
						        </a>
						        <div class="slds-notify__content">
						            <h2 class="slds-text-heading_small" style="font-size: 16px; white-space: pre-line;">{{saveErrorMessage}}</h2>
						        </div>
						    </div>
						</div>
                        
                        <!-- Attributes selection modal -->             
                        <div ng-show="showFilterSelectionModal">
                            <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open slds-modal_large">
                                <div class="slds-modal__container">
                                    <header class="slds-modal__header">
                                        <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" ng-click="cancelFilterSelectionModal()">
                                            <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                                <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                            </svg>
                                            <span class="slds-assistive-text">Close</span>
                                        </button>
                                        <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.RF_Filters}</h2>
                                    </header>
                                    <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">
                                        <div style="margin: 10px" ng-repeat="filterId in visibleFilterIds">
                                            <div class="slds-text-heading_small">
                                                <span class="slds-badge">
                                                    {{visibleFilterAttributesMap[filterId][0]['filterName']}}<span ng-show="requiredFiltersMap[filterId]" style="color: #c23934">*</span>
                                                </span>
                                            </div>
                                            <div class="slds-grid slds-wrap slds-grid_vertical-align-center" style="margin: 2% 0 2% 2%">
                                                <div ng-repeat="att in visibleFilterAttributesMap[filterId]" class="slds-size_1-of-1 slds-medium-size_1-of-3 slds-large-size_1-of-3">
                                                    <div class="slds-grid slds-wrap slds-grid_vertical-align-center">
                                                        <div class="slds-col slds-size_2-of-12">
                                                            <img class="green-check-icon" src="{!$Resource.GreenCheck}" ng-show="att['isSelected']"/>
                                                        </div>
                                                        <div class="slds-col slds-size_10-of-12" ng-click="selectDeselectAttribute(att)" style="cursor: pointer; color: #16325c">
                                                            {{att['attributeName']}}
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <hr ng-hide="$last" />
                                        </div>
                                    </div>
                                    <footer class="slds-modal__footer">
                                        <button class="slds-button slds-button_neutral" ng-click="cancelFilterSelectionModal()">{!$Label.Cancel}</button>
                                        <button class="slds-button slds-button_brand" ng-click="saveFilterSelectionModal()">{!$Label.Save}</button>
                                    </footer>
                                </div>
                            </section>
                            <div class="slds-backdrop slds-backdrop_open"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
</apex:page>