<!--
 * ReferenceEdge
 * 
 * Point of Reference, Inc. - Copyright 2014 All rights reserved.
 *
 * @company : Point of Reference, Inc.
 * @website : www.point-of-reference.com
 *
 * Disclaimer: THIS SOFTWARE IS PROVIDED "AS-IS" BY POINT OF REFERENCE ("POR"), 
 * WITH NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE SOFTWARE, 
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. 
 * POR SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, 
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES. POR IS NOT LIABLE FOR, 
 * AND MAKES NO REPRESENTATIONS OR WARRANTIES REGARDING, THE ACTIONS OR OMISSIONS OF 
 * ANY THIRD PARTIES (OR THE PRODUCTS OR SERVICES OFFERED BY ANY THIRD PARTIES) INCLUDING, 
 * WITHOUT LIMIATION, SALESFORCE.COM. COPY, USE OR DISTRIBUTION PROHIBITED WITHOUT EXPRESS 
 * WRITTEN CONSENT FROM COMPANY.
 -->
<apex:page controller="RefRequestProjectControllerSLDS" sidebar="false" docType="html-5.0" standardStylesheets="false">
<html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <head>
        <script src="{!URLFOR($Resource.ckeditor,'ckeditor/ckeditor.js')}"></script>
        <script src="{!URLFOR($Resource.AngularMaterialRepo, 'angular.min.js')}"></script>
		<apex:stylesheet value="{!URLFOR($Resource.LightningCSS_2_3, 'assets/styles/custom-slds.css')}" />
		<script src="{!URLFOR($Resource.JqueryFiles, 'jquery-1.8.3.js')}"></script>
		<c:LookupPicklistSLDS id="picklistId"/>
        <script src="{!URLFOR($Resource.AngularDateTimePickerJS)}"></script>
        <apex:stylesheet value="{!URLFOR($Resource.AngularDateTimePickerCSS)}" />
        <apex:includeScript value="/support/console/44.0/integration.js" />
        <script src="{!URLFOR($Resource.PolyfillJS)}"></script>
        <script type="text/javascript">var __sfdcSessionId = '{!GETSESSIONID()}';</script>
        <script src="/soap/ajax/42.0/connection.js" type="text/javascript"></script>

        <style>
            .deadlineCircle {
                width: 0.8rem;
                display: inline-block;
                height: 0.8rem;
                border-radius: 50%;
                margin-right: 3px;
                top: 1px;
                position: relative;
            }
            .editIcon {
                fill: #e0e5ee;
            }
            .editIcon:HOVER {
                fill: #005fb2 !important;
            }
            .editableFormElement:HOVER .editIcon {
                fill: #444444;
            }
            .editableFormElement .slds-form-element__static {
                max-width: 94%;
            }
            .customScrollDiv {
                height: 75vh;
                overflow-y: auto;
            }
            .editedFormElement {
                background-color: #faffbd !important;
            }
            .inlineEditButtons {
                position: fixed;
                bottom: 0;
                left: 23%;
                right: 63%;
                padding-bottom: 0.5rem;
                z-index: 99;
                text-align: center;
            }
            .bottomPadding {
                padding-bottom: 0.75rem;
            }
            .green-check-icon {
				margin-right: 10px;
			    width: 15px;
			    float: right;
			}
            .slds-tabs_default__item {
                padding: 0 1.25rem;
            }
            #lookup-block .slds-pill {
                padding: 2px 5px;
            }
            #adp-time {
                display: none;
            }
            .matchPageIframe {
                height: 100%;
                border: none !important;
            }
            .custom-toast-width {
            	min-width: 0;
                width: 100%;
            }
            .tooltip {
                margin-left: -13px;
            }
            .tooltip:hover .tooltipHelpShow {
                display : inline;
            }
            .tooltipHelpShow {
                display : none;
                bottom: 72px;
                line-height: 0.95rem;
                position: absolute;
            }
            @media screen and (max-width: 767px) {
	            .custom-toast-container {
	            	position: fixed;
				    z-index: 10000;
				    top: 0;
				    left: 0;
				    width: 100%;
				    margin-left: 0;
	            }
            }
            @media screen and (min-width: 768px) {
	            .custom-toast-container {
	            	position: fixed;
				    z-index: 10000;
				    top: 0;
				    left: 50%;
				    width: 50%;
				    margin-left: -25%;
	            }
            }
            .hitListPopover {
                position: absolute;
            }
            .popoverBackdrop {
                position: fixed;
                left: 0;
                right: 0;
                top: 0;
                bottom: 0;
                z-index: 999;
            }
            .topMargin {
                margin-top: 2.5rem;
            }
            .container {
                position: fixed;
                top: 0;
                bottom: 0;
                left: 0;
                right: 0;
            }
            .noteValueDiv * {
                padding-bottom: 0.5rem;
                width: 100% !important;
            }
            .slds-checkbox [type=checkbox][disabled]+.slds-checkbox__label .slds-checkbox_faux { 
                background-color: white !important;
                border-radius: 20%;
            }
            .slds-checkbox [type=checkbox][disabled]+.slds-checkbox__label .slds-checkbox_faux:after {
            	border-color: gray !important;
            }
            .slds-box {
                padding: 0.5rem; 
            }
        </style>

        <script>
            var projectDetailApp = angular.module('projectDetailApp', ['angularjs-datetime-picker', 'lookupPicklistApp']);
            var htmlFilter = projectDetailApp.filter('renderHtml',
                function($sce) {
                    return function(stringToParse) {
                        return $sce.trustAsHtml(stringToParse);
                    }
                }
            );
            var projectDetailCtrl = projectDetailApp.controller('projectDetailCtrl',
                function($scope, $q, $timeout, $window) {
                    $scope.pageVariables = {};
                    $scope.isLoading = false;
                    $scope.isFullLicenseAccessible = {!isFullLicenseAccessible};
                    $scope.IsPageAccessible = {!IsPageAccessible};
                    $scope.isInfluitiveEnabled = {!isInfluitiveEnabled};
                    $scope.contactRULPeriod = '{!$Label.Last} ' + {!contactRULPeriod} + ' {!$Label.Days}';
                    $scope.accountRULPeriod = '{!$Label.Last} ' + {!accountRULPeriod} + ' {!$Label.Days}';
                    $scope.dateFormat = '{!JSENCODE(dateFormat)}';
                    $scope.todayDate = '{!JSENCODE(todayDate)}';
                    $scope.baseUrl = '{!JSENCODE(baseUrl)}';
                    $scope.timePicklistValues = '{!JSENCODE(timePicklistJson)}';
                    $scope.sldsBaseURL = '{!URLFOR($Resource.LightningCSS_2_3)}';
                    $scope.minDifferenceForProcessChange = {!minDifferenceForProcessChange};
                    $scope.pageVariables['isError'] = false;
                    $scope.pageVariables['errorMessage'] = '';
                    $scope.pageVariables['isProCom'] = {!isProCom};
                    $scope.pageVariables['refRequestId'] = '{!JSENCODE(refRequestId)}';
                    $scope.pageVariables['accRequestId'] = '{!JSENCODE(accRequestId)}';
                    $scope.pageVariables['unspecRequestId'] = '{!JSENCODE(unspecRequestId)}';
                    $scope.pageVariables['selection'] = '{!JSENCODE(selection)}';
                    $scope.pageVariables['selectedRequestId'] = '';
                    $scope.pageVariables['routingGroupsFieldLabel'] = '{!JSENCODE(routingGroupsFieldLabel)}';
                    $scope.pageVariables['isAdvRouting'] = {!isAdvRoutingEnabled};
                    $scope.pageVariables['isUr'] = false;
                    $scope.pageVariables['isUrEdit'] = false;
                    $scope.pageVariables['selectedTabLeft'] = 'detail';
                    $scope.pageVariables['selectedTabRight'] = 'related';
                    $scope.pageVariables['addInfoOpen'] = true;
                    $scope.pageVariables['inlineEditField'] = '';
                    $scope.pageVariables['isInlineEdit'] = false;
                    $scope.pageVariables['editedFields'] = [];
                    $scope.pageVariables['alreadyPostedRefTypes'] = [];
                    $scope.refRequestWrapper = {};
                    $scope.tempRefRequestWrapper = {};
                    $scope.selectedRequestItem = {};
                    $scope.requestItemToEdit = {};
                    $scope.tempRequestItemToEdit = {};
                    $scope.requestRefTypeIds = [];
                    $scope.refTypesMap = {};
                    $scope.refTypesList = [];
                    $scope.salesRewardRefTypesMap = {};
                    $scope.requestFilterIds = [];
                    $scope.selectedRequestAdditionalInfo = {};
                    $scope.tempSelectedRequestAdditionalInfo = {};
                    $scope.oldAdditionalInfo = {};
                    $scope.filterAttributesMap = {};
                    $scope.filterNumbersMap = {};
                    $scope.tempFilterAttributesMap = {};
                    $scope.requiredFiltersMap = {};
                    $scope.selectedFilterAttNamesMap = {};
                    $scope.communityFilterAttNamesMap = {};
                    $scope.pageVariables['showAttributesModal'] = false;
                    $scope.pageVariables['showRequiredAttributesError'] = false;
                    $scope.pageVariables['showAttributesModalError'] = false;
                    $scope.pageVariables['attributesModalErrorMsg'] = '';
                    $scope.pageVariables['hitListWrapperList'] = [];
                    $scope.pageVariables['showAddRequestModal'] = false;
                    $scope.pageVariables['showAddRequestError'] = false;
                    $scope.pageVariables['addRequestErrorMsg'] = '';
                    $scope.newRequestItem = {};
                    $scope.pageVariables['relatedNotesList'] = [];
                    $scope.pageVariables['requestIdsForNotes'] = [];
                    $scope.pageVariables['showEditRequestModal'] = false;
                    $scope.pageVariables['showEditRequestError'] = false;
                    $scope.pageVariables['editRequestErrorMsg'] = false;
                    $scope.pageVariables['contactLookupScope'] = {};
                    $scope.accReqStatusPicklistValues = [];
                    $scope.unspecReqStatusPicklistValues = [];
                    $scope.pageVariables['showProcessChangeConfirmation'] = false;
                    $scope.pageVariables['showNotifyRequesterModal'] = false;
                    $scope.pageVariables['showEmailPreviewModal'] = false;
                    $scope.emailWrapper = {};
                    $scope.pageVariables['isAddInfoPresent'] = false;
                    $scope.pageVariables['showNewNoteModal'] = false;
                    $scope.pageVariables['showNewNoteError'] = false;
                    $scope.pageVariables['newNoteErrorMsg'] = '';
                    $scope.newRefNote = {};
                    $scope.pageVariables['allNotesList'] = [];
                    $scope.pageVariables['showAllNotesModal'] = false;
                    $scope.pageVariables['communityInviteList'] = [];
                    $scope.pageVariables['showDeleteNoteModal'] = false;
                    $scope.pageVariables['accountIds'] = [];
                    $scope.pageVariables['contactIds'] = [];
                    $scope.pageVariables['popoverStyle'] = {};
                    $scope.pageVariables['showAssignHitListModal'] = false;
                    $scope.pageVariables['showReleaseAllModal'] = false;
                    $scope.pageVariables['showAddReminderModal'] = false;
                    $scope.pageVariables['showHitListReminderError'] = false;
                    $scope.pageVariables['hitListReminderErrorMsg'] = '';
                    $scope.pageVariables['showDispositionModal'] = false;
                    $scope.pageVariables['showHitListNoteModal'] = false;
                    $scope.selectedHitListRecord = {};
                    $scope.hitListReminder = {};
                    $scope.pageVariables['showPostToCommunityModal'] = false;
                    $scope.pageVariables['showCommunityError'] = false;
                    $scope.pageVariables['communityErrorMsg'] = '';
                    $scope.pageVariables['includeReqTypeInCommunity'] = false;
                    $scope.pageVariables['communityDeadline'] = '';
                    $scope.pageVariables['communityWith'] = '';
                    $scope.pageVariables['communityDetails'] = '';
                    $scope.pageVariables['isAttModalOpenedFromCommunity'] = false;
                    $scope.pageVariables['matchingMembersLoading'] = false;
                    $scope.pageVariables['matchingMembersCount'] = '';
                    $scope.pageVariables['communityEmailBody'] = '';
                    $scope.pageVariables['showCommunityEmailModal'] = false;
                    $scope.communityEmailWrapper = {};
                    $scope.communityUserMap = {};
                    $scope.pageVariables['sendReminderMail'] = false;
                    $scope.inlineEditSelectedAccount = {};
                    $scope.inlineEditSelectedContact = {};
                    $scope.inlineEditSelectedOwner = {};
                    $scope.pageVariables['inlineContactLookupScope'] = {};
                    $scope.pageVariables['addRequestAccountScope'] = {};
                    $scope.pageVariables['isSavedFromInlineEdit'] = false;
                    $scope.requestItemsToUpdateIds = {};
                    $scope.pageVariables['isSubjectChanged'] = false;
                    $scope.pageVariables['activeRequestsPresent'] = true;
                    $scope.pageVariables['isSelectedRequestActive'] = true;
                    $scope.pageVariables['oldSubject'] = '';
                    $scope.pageVariables['activeRequestStatuses'] = ['Not Started', 'In Progress', 'On Hold'];

                    $scope.pageVariables['showMatchModal'] = false;
                    $scope.pageVariables['matchPageUrl'] = '';
                    $scope.pageVariables['isFromWorkspace'] = true;

                    //REF-1964
                    $scope.isHubMatch = false;
                    $scope.pageVariables['selectedAdvocates'] = [];
                    $scope.pageVariables['showPostToInfluitiveModal'] = false;
                    $scope.pageVariables['postToInfluitiveWrapper'] = {};
                    $scope.pageVariables['postToInfluitiveWrapper']['listOfCIC'] = [];
                    $scope.pageVariables['postToInfluitiveWrapper']['selectedContacts'] = [];
                    $scope.pageVariables['showInfluitiveError'] = false;
                    $scope.pageVariables['influitiveErrorMsg'] = '';
                    $scope.postToInfluitiveWrapperMap = {};
                    $scope.urChallengeStatusPicklistValues = [];
                    $scope.pageVariables['hasChallengeId'] = false;
                    //REF-2132
                    $scope.listOfUploadedFile = [];
					$scope.attachSupportingDocuments = {!attachSupportingDocuments};
                    
                    $scope.isModalOpenedInsideIframe = false;
                    window.addEventListener('iframe_Ref_Search_message', function(event) {
                    	$scope.isModalOpenedInsideIframe = event && event.detail ? event.detail.isModalOpenedInsideIframe : false;
			            if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {
		                    $scope.$apply();
		                }
	                	
						var iframe = document.getElementById("refSearchIframe");
			            var iframeContentDocument = iframe ? iframe.contentDocument : null;
			            var bodyInsideIframe = iframeContentDocument ? iframeContentDocument.getElementsByClassName('body-inside-iframe') : null;
		            	var bodyElement = bodyInsideIframe ? bodyInsideIframe[0] : null;
		            	var modalInsideIframe = iframeContentDocument ? iframeContentDocument.getElementsByClassName('modal-container-inside-iframe') : null;
		            	var modalElement = modalInsideIframe ? modalInsideIframe[0] : null;
		             	
		             	if(bodyElement && $scope.isModalOpenedInsideIframe) {
		             		bodyElement.classList.add('body-inside-iframe-css');
		             	} else if(bodyElement && !$scope.isModalOpenedInsideIframe) {
		             		bodyElement.classList.remove('body-inside-iframe-css');
		             	}
		             	
		             	if(modalElement && $scope.isModalOpenedInsideIframe) {
		             		modalElement.classList.add('modal-container-inside-iframe-css');
		             	} else if(modalElement && !$scope.isModalOpenedInsideIframe) {
		             		modalElement.classList.remove('modal-container-inside-iframe-css');
		             	}
					}, false);
                    
                    function orderObjectBy(jsonArray, key, keyDataType) {
                    	if (!angular.isObject(jsonArray)) return jsonArray;
                    	
                    	var array = angular.copy(jsonArray);
                    	
                    	if(keyDataType == 'String') {
                    		array.sort(function(a, b) {
                    			var alc = a[key].toLowerCase();
                    			var blc = b[key].toLowerCase();
                    			return alc > blc ? 1 : alc < blc ? -1 : 0;
                    		});
                    	}
                    	return array;
                    }
                    
                    $scope.init = function() {
                        
                        if ($scope.isFullLicenseAccessible && $scope.IsPageAccessible) {
                            $scope.isLoading = true;

                            $scope.getRefTypesMap().then(function(result) {
                                $scope.refTypesMap = result;
                                $scope.refTypesList = [];
                                $scope.salesRewardRefTypesMap = {};

                                angular.forEach(
                                    Object.values(result),
                                    function(refType) {

                                        if (refType['isForProject'] || refType['isForRequest']) {
                                            $scope.refTypesList.push(refType);
                                        } else if (refType['salesPoints'] != null && refType['salesPoints'] != 0) {
                                            $scope.salesRewardRefTypesMap[refType['refTypeId']] = refType;
                                        }
                                    }
                                );
                                
                                $scope.refTypesList = angular.copy(orderObjectBy($scope.refTypesList, 'refTypeName', 'String'));
                                $scope.refTypesList.splice(0, 0, {'refTypeName' : '--None--', 'refTypeId' : ''});
                            });
                            
                            $scope.getCommunityInviteList().then(function(result) {
                                $scope.pageVariables['communityInviteList'] = result;
                            });
                            
                            $scope.getHitListRecords().then(function(result) {
                                $scope.pageVariables['hitListWrapperList'] = result;
                            });

                            $scope.getStatusPicklist().then(function(result) {
                                $scope.accReqStatusPicklistValues = result['arStatus'];
                                $scope.unspecReqStatusPicklistValues = result['urStatus'];
                                $scope.dispositionPicklistValues = result['disposition'];
                                //REF-1964
                                $scope.urChallengeStatusPicklistValues = result['urChallengeStatus'];
                            });

                            $scope.getAlreadyPostedRefTypes().then(function(result) {
                                $scope.pageVariables['alreadyPostedRefTypes'] = result;
                            });

                            if ($scope.pageVariables['isProCom']) {

                                $scope.getEmailTemplate().then(function(result) {
                                    $scope.pageVariables['communityEmailBody'] = result;
                                });
                            }

                            $scope.getRefRequestObject().then(function(result) {
                                $scope.refRequestWrapper = result[0];

                                if ($scope.pageVariables['accRequestId'] != '' && $scope.pageVariables['unspecRequestId'] == '') {

                                    angular.forEach(
                                        $scope.refRequestWrapper['accRequests'],
                                        function(ar) {

                                            if (ar['accRequestId'] == $scope.pageVariables['accRequestId']) {
                                                $scope.selectedRequestItem = angular.copy(ar);
                                                $scope.tempRequestItemToEdit = angular.copy(ar);
                                                $scope.pageVariables['selectedRequestId'] = ar['accRequestId'];
                                                var tempRequestIds = [];
                                                tempRequestIds.push($scope.selectedRequestItem['accRequestId']);
                                                
                                                $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                                    $scope.pageVariables['relatedNotesList'] = result;
                                                });
                                            }
                                        }
                                    );
                                } else if ($scope.pageVariables['accRequestId'] == '' && $scope.pageVariables['unspecRequestId'] != '') {
                                    $scope.pageVariables['isUr'] = true;
                                    //REF-1964
                                    var URsWithChallengeId = {};
                                    var listChallengeIds = [];
                                    var temPIW = {};
                                    localStorage.setItem("selectedAdvocates", JSON.stringify({}));

                                    angular.forEach(
                                        $scope.refRequestWrapper['unspecRequests'],
                                        function(ur) {
                                            //REF-1964
                                            if (ur['challengeId'] != null && ur['challengeId'] != '') {
                                                var key = ur['challengeId'];
                                                URsWithChallengeId[key] = ur['unspecRequestId'];
                                                listChallengeIds.push(ur['challengeId']);
                                                
                                                if ($scope.pageVariables['unspecRequestId'] == ur['unspecRequestId']) {
                                                	$scope.pageVariables['hasChallengeId'] = true;
                                                }
                                            }

                                            if (ur['unspecRequestId'] == $scope.pageVariables['unspecRequestId']) {
                                                $scope.selectedRequestItem = angular.copy(ur);
                                                $scope.tempRequestItemToEdit = angular.copy(ur);
                                                $scope.pageVariables['selectedRequestId'] = ur['unspecRequestId'];
                                                var tempRequestIds = [];
                                                tempRequestIds.push($scope.selectedRequestItem['unspecRequestId']);
                                                
                                                $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                                    $scope.pageVariables['relatedNotesList'] = result;
                                                });
                                            }
                                        }
                                    );
                                    //REF-1964
                                    $scope.getRelatedCICByChallengeId(listChallengeIds).then(function(result) {
                                        if (result != null) {
                                            angular.forEach(result,function(value,key) {
                                                temPIW['challengeId'] = key;
                                                temPIW['listOfCIC'] = value;
                                                temPIW['unspecifiedRequestId'] = URsWithChallengeId[key];
                                                var key1 = temPIW['unspecifiedRequestId'];
                                                $scope.postToInfluitiveWrapperMap[key1] = temPIW;
                                                temPIW = {};
                                            });
                                            console.log('PIW');
                                            console.log($scope.postToInfluitiveWrapperMap);
                                            
                                            if ($scope.pageVariables['selectedRequestId'] in $scope.postToInfluitiveWrapperMap) {
                                            	$scope.pageVariables['postToInfluitiveWrapper'] = $scope.postToInfluitiveWrapperMap[$scope.pageVariables['selectedRequestId']];
                                            }
                                        }
                                    });

                                } else if ($scope.pageVariables['accRequestId'] == '' && $scope.pageVariables['unspecRequestId'] == '') {
                                    $scope.pageVariables['isFromWorkspace'] = false;

                                    if ($scope.refRequestWrapper['accRequests'].length > 0) {
                                        $scope.pageVariables['isUr'] = false;
                                        $scope.selectedRequestItem = angular.copy($scope.refRequestWrapper['accRequests'][0]);
                                        $scope.tempRequestItemToEdit = angular.copy($scope.refRequestWrapper['accRequests'][0]);
                                        $scope.pageVariables['selectedRequestId'] = $scope.refRequestWrapper['accRequests'][0]['accRequestId'];
                                        var tempRequestIds = [];
                                        tempRequestIds.push($scope.selectedRequestItem['accRequestId']);
                                        
                                        $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                            $scope.pageVariables['relatedNotesList'] = result;
                                        });
                                    } else if ($scope.refRequestWrapper['unspecRequests'].length > 0) {
                                        $scope.pageVariables['isUr'] = true;
                                        $scope.selectedRequestItem = angular.copy($scope.refRequestWrapper['unspecRequests'][0]);
                                        $scope.tempRequestItemToEdit = angular.copy($scope.refRequestWrapper['unspecRequests'][0]);
                                        $scope.pageVariables['selectedRequestId'] = $scope.refRequestWrapper['unspecRequests'][0]['unspecRequestId'];
                                        var tempRequestIds = [];
                                        tempRequestIds.push($scope.selectedRequestItem['unspecRequestId']);
                                        
                                        $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                            $scope.pageVariables['relatedNotesList'] = result;
                                        });
                                    }
                                }

                                angular.forEach(
                                    $scope.refRequestWrapper['accRequests'],
                                    function(ar) {

                                        if ($scope.requestRefTypeIds.indexOf(ar['refTypeId']) == -1) {
                                            $scope.requestRefTypeIds.push(ar['refTypeId']);
                                        }
                                    }
                                );

                                angular.forEach(
                                    $scope.refRequestWrapper['unspecRequests'],
                                    function(ur) {

                                        if ($scope.requestRefTypeIds.indexOf(ur['refTypeId']) == -1) {
                                            $scope.requestRefTypeIds.push(ur['refTypeId']);
                                        }
                                    }
                                );

                                if (!($scope.selectedRequestItem['requestStatus'].includes('Give Up') || $scope.selectedRequestItem['requestStatus'] == 'No Longer Needed' || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Completed'  || $scope.selectedRequestItem['requestStatus'] == 'No Response'  || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Unavailable')) {
                                    $scope.pageVariables['isSelectedRequestActive'] = true;
                                } else {
                                    $scope.pageVariables['isSelectedRequestActive'] = false;
                                }

                                $scope.getFiltersInfo().then(function(result) {
                                    result = result.split('@@@');
                                    $scope.filterAttributesMap = JSON.parse(result[0]);
                                    $scope.requiredFiltersMap = JSON.parse(result[1]);
                                    $scope.filterNumbersMap = JSON.parse(result[2]);
                                    $scope.selectedFilterAttNamesMap = {};

                                    angular.forEach(
                                        Object.keys($scope.filterAttributesMap),
                                        function(filterId) {
                                            $scope.selectedFilterAttNamesMap[filterId] = '';
                                            var attNames = '';

                                            angular.forEach(
                                                $scope.filterAttributesMap[filterId],
                                                function(att) {
                                                    
                                                    if (att['isSelected']) {
                                                        attNames = attNames == '' ? att['attName'] : attNames + ', ' + att['attName'];
                                                    }
                                                }
                                            );
                                            $scope.selectedFilterAttNamesMap[filterId] = attNames;
                                        }
                                    );
                                });

                                $scope.getAdditionalFieldsInfo($scope.selectedRequestItem['refTypeId'], $scope.selectedRequestItem['addInfoId']).then(function(result) {
                                    $scope.selectedRequestAdditionalInfo = result;
                                    $scope.tempSelectedRequestAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);
                                    $scope.oldAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);

                                    if (Object.keys(result).length == 0) {
                                        $scope.pageVariables['isAddInfoPresent'] = false;
                                    } else {
                                        $scope.pageVariables['isAddInfoPresent'] = true;
                                    }
                                });
                                $scope.isLoading = false;
                            });
                            
                            //REF-2132
                            $scope.getFilesAssociatedWithReferenceRequest('{!JSENCODE(refRequestId)}').then(function(result) {
                                
                                if (result != null && result != '') {
                                    result = $scope.parseResult(result);
                                    $scope.listOfUploadedFile = JSON.parse(result);
                                }
                            });
                        }
                    }
                    
                    //REF-2132
                    $scope.getFilesAssociatedWithReferenceRequest = function(requestId) {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.getFilesAssociatedWithReferenceRequest}',
                            requestId,
                            function(result,event) {
                                deferred.resolve(result);
                            } 
                        );
                         return deferred.promise;
                    }

                    $scope.getPermissionsMessage = function(processName) {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.getPermissionsMessage}',
                            processName,
                            $scope.pageVariables['isProCom'],
                            angular.toJson($scope.requestRefTypeIds),
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.getAlreadyPostedRefTypes = function() {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.getAlreadyPostedRefTypes}',
                            $scope.pageVariables['refRequestId'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(JSON.parse(result));
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.saveRequestSubject = function() {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.saveRequestSubject}',
                            $scope.refRequestWrapper['subject'],
                            $scope.refRequestWrapper['refRequestId'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.createReminder = function() {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.createReminder}',
                            angular.toJson($scope.hitListReminder),
                            $scope.pageVariables['sendReminderMail'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.getEmailTemplate = function() {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.getEmailTemplate}',
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.getStatusPicklist = function() {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.getStatusPicklist}',
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(JSON.parse(result));
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.createCommunityInvite = function(isSendClicked, filterAttMap) {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.createCommunityInvite}',
                            angular.toJson($scope.communityEmailWrapper),
                            $scope.pageVariables['refRequestId'],
                            angular.toJson($scope.communityUserMap),
                            angular.toJson(filterAttMap),
                            isSendClicked,
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.updateHitListNote = function() {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.updateHitListNote}',
                            angular.toJson($scope.selectedHitListRecord),
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.getCommunityInviteList = function(requestIds) {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.getCommunityInviteList}',
                            $scope.pageVariables['refRequestId'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(JSON.parse(result));
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.getRelatedNotes = function(requestIds) {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.getRelatedNotes}',
                            angular.toJson(requestIds),
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(JSON.parse(result));
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.deleteRefNote = function() {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.deleteRefNote}',
                            $scope.pageVariables['noteIdToDelete'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.getHitListRecords = function() {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.getHitListRecords}',
                            $scope.pageVariables['refRequestId'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(JSON.parse(result));
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.getRefTypesMap = function() {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.getRefTypesMap}',
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(JSON.parse(result));
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.getRefRequestObject = function() {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.getRefRequestObject}',
                            $scope.pageVariables['refRequestId'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(JSON.parse(result));
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.getAdditionalFieldsInfo = function(selectedRefTypeId, additionalInfoId) {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.getAdditionalFieldsInfo}',
                            selectedRefTypeId,
                            additionalInfoId,
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(JSON.parse(result));
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.getFiltersInfo = function() {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.getFiltersInfo}',
                            angular.toJson(Object.values($scope.refRequestWrapper['rrLabelMap'])),
                            angular.toJson($scope.requestRefTypeIds),
                            angular.toJson($scope.refRequestWrapper['advRoutingGroups']),
                            $scope.refRequestWrapper['isP2PRequest'],
                            $scope.pageVariables['isAdvRouting'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.deleteCommunityInvite = function(cicIdToDelete) {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.deleteCommunityInvite}',
                            cicIdToDelete,
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.saveFiltersInfo = function(oldFilterAttsMap, newFilterAttsMap) {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.saveFiltersInfo}',
                            angular.toJson(oldFilterAttsMap),
                            angular.toJson(newFilterAttsMap),
                            $scope.refRequestWrapper['refRequestId'],
                            angular.toJson($scope.refRequestWrapper['rrLabelMap']),
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.addNewRequest = function() {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.addNewRequest}',
                            angular.toJson($scope.newRequestItem),
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.createNote = function() {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.createNote}',
                            angular.toJson($scope.newRefNote),
                            $scope.pageVariables['isUr'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.releaseAllHitLists = function(tempHitListIds) {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.releaseAllHitLists}',
                            angular.toJson(tempHitListIds),
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.saveRequest = function() {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.saveRequest}',
                            angular.toJson($scope.requestItemToEdit),
                            angular.toJson($scope.tempRequestItemToEdit),
                            angular.toJson($scope.emailWrapper),
                            $scope.pageVariables['isUrEdit'],
                            $scope.refRequestWrapper['refRequestId'],
                            angular.toJson($scope.salesRewardRefTypesMap),
                            $scope.refRequestWrapper['projectType'],
                            $scope.refRequestWrapper['requesterId'],
                            angular.equals($scope.tempSelectedRequestAdditionalInfo, $scope.selectedRequestAdditionalInfo),
                            angular.toJson($scope.selectedRequestAdditionalInfo),
                            angular.toJson($scope.requestItemsToUpdateIds),
                            $scope.pageVariables['activeRequestsPresent'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.assignHitRecordToRequest = function(tempSelectedRequest, isDispositionSet) {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.assignHitRecordToRequest}',
                            angular.toJson($scope.selectedHitListRecord),
                            $scope.pageVariables['isUr'],
                            angular.toJson(tempSelectedRequest),
                            isDispositionSet,
                            $scope.refRequestWrapper['refRequestId'],
                            $scope.refRequestWrapper['requesterId'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.dispositionHitList = function(tempSelectedRequest) {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.dispositionHitList}',
                            angular.toJson($scope.selectedHitListRecord),
                            $scope.pageVariables['isUr'],
                            angular.toJson(tempSelectedRequest),
                            $scope.refRequestWrapper['refRequestId'],
                            $scope.refRequestWrapper['requesterId'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.assignCicToRequest = function(cicWrapper, reqWrapper) {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.assignCicToRequest}',
                            angular.toJson(cicWrapper),
                            $scope.refRequestWrapper['refRequestId'],
                            $scope.refRequestWrapper['requesterId'],
                            $scope.pageVariables['isUr'],
                            angular.toJson(reqWrapper),
                            $scope.refRequestWrapper['projectType'],
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.getCommunityMatchingMembers = function(filterClause, refTypesClause, filterAttMap) {
                        var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.getCommunityMatchingMembers}',
                            refTypesClause,
                            filterClause,
                            angular.toJson(filterAttMap),
                            function(result, event) {
                                result = $scope.parseResult(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }

                    $scope.parseResult = function(result) {
                        result = result.replace(/&quot/gi, '"');
                        result = result.replace(/&amp/g, '&');
                        result = result.replace(/&lt/g, '<');
                        result = result.replace(/&gt/g, '>');
                        result = result.replace(/;/g, '');
                        result = result.replace(/&#39/g, '\'');
                        return result;
                    }

                    $scope.timePicklistValues = $scope.parseResult($scope.timePicklistValues);
                    $scope.timePicklistValues = JSON.parse($scope.timePicklistValues);
                    var tempTimePicklistMap = {};

                    angular.forEach(
                        $scope.timePicklistValues,
                        function(timeString) {
                            tempTimePicklistMap[timeString.split('--')[0]] = timeString.split('--')[1];
                        }
                    );
                    $scope.timePicklistValues = tempTimePicklistMap;

                    $scope.convertToDate = function(date) {
                        date = (date == null) ? '' : date;
                        var regEx = /^[0-9]{4}\-(0[1-9]|1[012]|[1-9])\-([1-9]|0[1-9]|[12][0-9]|3[01])/;
                        var tempDF;
                        
                        if (date == null || date == '') {
                            return '';
                        }
                        
                        if (date.match(regEx)) {
                            tempDF = date.split('-');

                            if (tempDF.length < 3 || !$scope.checkDate(tempDF[2], tempDF[1], tempDF[0])) {
                                return null;
                            }
                            return date;
						}

	               		try {
	               			var tempDF = $scope.dateFormat;
	               			var tempDate = date + '';
	               			tempDF = tempDF.split(/[./-]/g);
	               			tempDate = tempDate.split(/[./-]/g);
	               			var month = (tempDF.indexOf('MM') == -1) ? tempDate[tempDF.indexOf('M')] :tempDate[tempDF.indexOf('MM')];
	               			var day = (tempDF.indexOf('dd') == -1) ? tempDate[tempDF.indexOf('d')] :tempDate[tempDF.indexOf('dd')];
	               			var modDate = new Date(tempDate[tempDF.indexOf('yyyy')], month - 1, day);
	               			var dateString = modDate.getFullYear() + '-' + (modDate.getMonth() + 1) + '-' + modDate.getDate();
		              	 	
	              	 		if (modDate != 'Invalid Date' && dateString.indexOf('NaN') == -1 ) {
	              	 			
	              	 			if (month.length > 2 || day.length > 2 || tempDate[tempDF.indexOf('yyyy')].length != 4 || !$scope.checkDate(day, month, tempDate[tempDF.indexOf('yyyy')])) {
		              	 			return null;
		              	 		}
	     				 		return dateString;
	     				 	} else {
	     				 		return null;
	     				 	}
	     				} catch (e) {
	     					return null;
	     				}
	                }
	                
	                $scope.checkDate = function(day, month, year) {
	                	var returnval = true;
                        
                        if (day == null || day.trim() == '' || month == null || month.trim() == '' || year == null || year.trim() == ''
                                || parseInt(day) == NaN || parseInt(month) == NaN || parseInt(year) == NaN) {
                            returnval = false;
                        } else {
                            day = parseInt(day);
                            month = parseInt(month);
                            year = parseInt(year);
                        }
					    returnval = (month < 1 || month > 12 || day < 1) ? false : returnval;
					    var days = (month == 2) ? ((year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) ? 29 : 28) : (month == 4 || month == 6 || month == 9 || month == 11) ? 30 : 31;
					    returnval = (day > days) ? false : returnval;
				        return returnval;
	                }

                    $scope.toggleLeftTab = function(tabName) {
                        //$scope.cancelInlineEdit();
                        $scope.isLoading = true;
                        $scope.pageVariables['selectedTabLeft'] = tabName;

                        if (tabName == 'detail' && $scope.pageVariables['isUr']) {
                            var tempRequestIds = [];
                            tempRequestIds.push($scope.selectedRequestItem['unspecRequestId']);
                            
                            $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                $scope.pageVariables['relatedNotesList'] = result;
                                $scope.isLoading = false;
                            });
                        } else if (tabName == 'detail' && !$scope.pageVariables['isUr']) {
                            var tempRequestIds = [];
                            tempRequestIds.push($scope.selectedRequestItem['accRequestId']);
                            
                            $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                $scope.pageVariables['relatedNotesList'] = result;
                                $scope.isLoading = false;
                            });
                        } else if (tabName == 'request') {
                            var tempRequestIds = [];
                            tempRequestIds.push($scope.refRequestWrapper['refRequestId']);

                            angular.forEach(
                                $scope.refRequestWrapper['accRequests'],
                                function(accReq) {
                                    tempRequestIds.push(accReq['accRequestId']);
                                }
                            );

                            angular.forEach(
                                $scope.refRequestWrapper['unspecRequests'],
                                function(unspecReq) {
                                    tempRequestIds.push(unspecReq['unspecRequestId']);
                                }
                            );
                            
                            $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                $scope.pageVariables['relatedNotesList'] = result;
                                $scope.isLoading = false;
                            });
                        }
                    }

                    $scope.toggleRightTab = function(tabName) {
                        $scope.pageVariables['selectedTabRight'] = tabName;
                    }

                    $scope.toggleAddInfo = function() {
                        $scope.pageVariables['addInfoOpen'] = !$scope.pageVariables['addInfoOpen'];
                    }

                    $scope.enableInlineEdit = function(fieldName) {
                        
                        if ($scope.pageVariables['isSelectedRequestActive']) {
                            $scope.pageVariables['isInlineEdit'] = true;
                            $scope.pageVariables['inlineEditField'] = fieldName;

                            if ($scope.pageVariables['editedFields'].length == 0) {
                                $scope.tempRequestItemToEdit = angular.copy($scope.selectedRequestItem);
                                $scope.tempSelectedRequestAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);
                                $scope.oldAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);
                            }

                            if (fieldName == 'accountId') {
                                $scope.inlineEditSelectedAccount['id'] = $scope.selectedRequestItem['accountId'];
                                $scope.inlineEditSelectedAccount['name'] = $scope.selectedRequestItem['accountName'];
                            }

                            if (fieldName == 'contactId') {
                                $scope.inlineEditSelectedAccount['id'] = $scope.selectedRequestItem['contactId'];
                                $scope.inlineEditSelectedAccount['name'] = $scope.selectedRequestItem['contactName'];
                            }

                            if (fieldName == 'ownerId') {
                                $scope.inlineEditSelectedOwner['id'] = $scope.selectedRequestItem['ownerId'];
                                $scope.inlineEditSelectedOwner['name'] = $scope.selectedRequestItem['ownerName'];
                            }

                            if (fieldName == 'subject') {
                                $scope.pageVariables['isSubjectChanged'] = true;
                                $scope.pageVariables['oldSubject'] = angular.copy($scope.refRequestWrapper['subject']);
                            }
                        }

                        //REF-1964
                        if (fieldName == 'challengeStatus') {
                        	$scope.pageVariables['inlineEditField'] = fieldName;
                        }
                    }

                    $scope.disableInlineEdit = function() {

                        if ($scope.pageVariables['editedFields'].indexOf($scope.pageVariables['inlineEditField']) == -1) {
                            $scope.pageVariables['editedFields'].push($scope.pageVariables['inlineEditField']);
                        }

                        if ($scope.pageVariables['inlineEditField'] == 'refTypeId') {
                            $scope.isLoading = true;
                            $scope.selectedRequestItem['refTypeName'] = $scope.refTypesMap[$scope.selectedRequestItem['refTypeId']]['refTypeName'];
                            var tempAddInfoId = '';
                            var refTypeIndex = $scope.requestRefTypeIds.indexOf($scope.selectedRequestItem['refTypeId']);
                            var oldRefTypeIndex = $scope.requestRefTypeIds.indexOf($scope.tempRequestItemToEdit['refTypeId']);

                            if (refTypeIndex == -1) {
                                $scope.requestRefTypeIds.push($scope.selectedRequestItem['refTypeId']);
                            }

                            if (oldRefTypeIndex != -1) {
                                $scope.requestRefTypeIds.splice(oldRefTypeIndex, 1);
                            }

                            angular.forEach(
                                $scope.refRequestWrapper['accRequests'],
                                function(ar) {

                                    if (ar['refTypeId'] == $scope.selectedRequestItem['refTypeId'] && ar['addInfoId'] != '') {
                                        tempAddInfoId = ar['addInfoId'];
                                    }
                                }
                            );

                            if (tempAddInfoId == '') {

                                angular.forEach(
                                    $scope.refRequestWrapper['unspecRequests'],
                                    function(ur) {

                                        if (ur['refTypeId'] == $scope.selectedRequestItem['refTypeId'] && ur['addInfoId'] != '') {
                                            tempAddInfoId = ur['addInfoId'];
                                        }
                                    }
                                );
                            }
                            $scope.selectedRequestItem['addInfoId'] = tempAddInfoId;

                            $scope.getAdditionalFieldsInfo($scope.selectedRequestItem['refTypeId'], $scope.selectedRequestItem['addInfoId']).then(function(result) {
                                $scope.selectedRequestAdditionalInfo = result;
                                $scope.tempSelectedRequestAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);

                                if (Object.keys(result).length == 0) {
                                    $scope.pageVariables['isAddInfoPresent'] = false;
                                } else {
                                    $scope.pageVariables['isAddInfoPresent'] = true;
                                }
                                $scope.isLoading = false;
                            });
                        } else if ($scope.pageVariables['inlineEditField'] == 'accountId') {
                            // will be used in future. do not remove
                            /*
                            $scope.selectedRequestItem['accountId'] = $scope.inlineEditSelectedAccount['id'];
                            $scope.selectedRequestItem['accountName'] = $scope.parseResult($scope.inlineEditSelectedAccount['name']);
                            $scope.selectedRequestItem['contactId'] = '';
                            $scope.selectedRequestItem['contactName'] = '';
                            $scope.pageVariables['inlineContactLookupScope'].removeSelectedValue();
                            */
                        } else if ($scope.pageVariables['inlineEditField'] == 'contactId') {
                            $scope.selectedRequestItem['contactId'] = angular.copy($scope.inlineEditSelectedContact['id']);
                            $scope.selectedRequestItem['contactName'] = angular.copy($scope.parseResult($scope.inlineEditSelectedContact['name']));
                        } else if ($scope.pageVariables['inlineEditField'] == 'ownerId') {
                            $scope.selectedRequestItem['ownerId'] = $scope.inlineEditSelectedOwner['id'];
                            $scope.selectedRequestItem['ownerName'] = $scope.parseResult($scope.inlineEditSelectedOwner['name']);
                        }
                        var provideDelay = false;

                        angular.forEach(
                            Object.keys($scope.selectedRequestAdditionalInfo),
                            function(apiName) {
                                
                                if (apiName == $scope.pageVariables['inlineEditField']
                                        && ($scope.selectedRequestAdditionalInfo[apiName]['fieldType'] == 'DATETIME'
                                            || $scope.selectedRequestAdditionalInfo[apiName]['fieldType'] == 'DATE')) {
                                    provideDelay = true;
                                }
                            }
                        );

                        if (provideDelay) {

                            $timeout(function() {
                                $scope.pageVariables['isInlineEdit'] = false;
                                $scope.pageVariables['inlineEditField'] = '';
                            }, 100);
                        } else {
                            $scope.pageVariables['isInlineEdit'] = false;
                            $scope.pageVariables['inlineEditField'] = '';
                        }
                    }

                    $scope.saveInlineEdit = function() {
                        //REF-1964
                        if ($scope.pageVariables['inlineEditField'] == 'challengeStatus') {
                            $scope.isLoading = true;
                            $scope.updateChallengeStatus($scope.selectedRequestItem['challengeStatus'],$scope.pageVariables['selectedRequestId'])
                                  .then(function(result) {
                                  	
                                      $scope.isLoading = false;
                                      
                                      if (result == '') {
                                          $scope.pageVariables['isInlineEdit'] = false;
                                          $scope.pageVariables['inlineEditField'] = '';
                                      } else {
                                      	alert('Error while changing challenge status!');
                                      }
                                  });
                        } else {
                            $scope.requestItemToEdit = angular.copy($scope.selectedRequestItem);
                            $scope.pageVariables['isUrEdit'] = angular.copy($scope.pageVariables['isUr']);
                            
                            if ($scope.pageVariables['isUr']) {
                                $scope.requestItemToEdit['accountId'] = '';
                                $scope.tempRequestItemToEdit['accountId'] = '';
                                $scope.requestItemToEdit['accountName'] = '';
                                $scope.tempRequestItemToEdit['accountName'] = '';
                            }
                            $scope.pageVariables['isSavedFromInlineEdit'] = true;
                            $scope.saveEditRequestModal();
                        }
                    }

                    $scope.cancelInlineEdit = function() {
                        $scope.pageVariables['editedFields'] = [];
                        $scope.pageVariables['isInlineEdit'] = false;
                        $scope.pageVariables['inlineEditField'] = '';
                        $scope.selectedRequestAdditionalInfo = angular.copy($scope.oldAdditionalInfo);
                        $scope.selectedRequestItem = angular.copy($scope.tempRequestItemToEdit);
                        $scope.requestItemToEdit = {};
                        $scope.pageVariables['isSubjectChanged'] = false;
                        $scope.refRequestWrapper['subject'] = angular.copy($scope.pageVariables['oldSubject']);
                        $scope.pageVariables['oldSubject'] = '';

                        if (Object.keys($scope.selectedRequestAdditionalInfo).length == 0) {
                            $scope.pageVariables['isAddInfoPresent'] = false;
                        } else {
                            $scope.pageVariables['isAddInfoPresent'] = true;
                        }
                    }

                    $scope.openAttributesModal = function(isFromCommunity) {
                        $scope.cancelInlineEdit();
                        $scope.pageVariables['showAttributesModal'] = true;
                        $scope.tempFilterAttributesMap = angular.copy($scope.filterAttributesMap);
                        $scope.pageVariables['showRequiredAttributesError'] = false;
                        $scope.pageVariables['isAttModalOpenedFromCommunity'] = isFromCommunity;

                        if ($scope.pageVariables['isAttModalOpenedFromCommunity']) {
                            $scope.pageVariables['showPostToCommunityModal'] = false;


                        }
                        $scope.isLoading = true;
                        var processName = 'edit filters';

                        $scope.getPermissionsMessage(processName).then(function(result) {

                            if (result != '') {
                                $scope.pageVariables['showAttributesModalError'] = true;
                                $scope.pageVariables['attributesModalErrorMsg'] = result;
                            }
                            $scope.isLoading = false;
                        });
                    }

                    $scope.selectDeselectAttribute = function(attWrapper) {
                        attWrapper['isSelected'] = !attWrapper['isSelected'];
                    }

                    $scope.cancelAttributesModal = function() {
                        
                        if (!$scope.pageVariables['isAttModalOpenedFromCommunity']) {
                            $scope.filterAttributesMap = angular.copy($scope.tempFilterAttributesMap);
                        }
                        $scope.tempFilterAttributesMap = {};
                        $scope.selectedFilterAttNamesMap = {};

                        angular.forEach(
                            Object.keys($scope.filterAttributesMap),
                            function(filterId) {
                                $scope.selectedFilterAttNamesMap[filterId] = '';
                                var attNames = '';

                                angular.forEach(
                                    $scope.filterAttributesMap[filterId],
                                    function(attWrapper) {

                                        if (attWrapper['isSelected']) {
                                            attNames = attNames == '' ? attWrapper['attName'] : attNames + ', ' + attWrapper['attName'];
                                        }
                                    }
                                );
                                $scope.selectedFilterAttNamesMap[filterId] = attNames;
                            }
                        );
                        $scope.pageVariables['showAttributesModal'] = false;
                        
                        if ($scope.pageVariables['isAttModalOpenedFromCommunity']) {
                            $scope.pageVariables['showPostToCommunityModal'] = true;
                        }
                    }

                    $scope.saveAttributesModal = function() {
                        
                        if ($scope.pageVariables['isAttModalOpenedFromCommunity']) {
                            var filtersClause = '';
                            var refTypesClause = '';
                            var filterAttMap = {};
                            var refTypeNo = $scope.refTypesMap[$scope.selectedRequestItem['refTypeId']]['refNo'];
                            $scope.communityFilterAttNamesMap = {};

                            if ($scope.pageVariables['includeReqTypeInCommunity'] && refTypeNo != '') {
                                refTypesClause = 'AND ReferenceabilityType_Ids1__c LIKE \'%' + refTypeNo + '%\'';
                            }

                            angular.forEach(
                                Object.keys($scope.filterAttributesMap),
                                function(filterId) {
                                    filterAttMap[filterId] = [];
                                    $scope.communityFilterAttNamesMap[filterId] = '';
                                    var attNames = '';

                                    angular.forEach(
                                        $scope.filterAttributesMap[filterId],
                                        function(attWrapper) {

                                            if (attWrapper['isSelected']) {
                                                attNames = attNames == '' ? attWrapper['attName'] : attNames + ', ' + attWrapper['attName'];
                                                filterAttMap[filterId].push(attWrapper['attId']);
                                            }
                                        }
                                    );
                                    $scope.communityFilterAttNamesMap[filterId] = attNames;

                                    if (filterAttMap[filterId].length == 0) {
                                        delete filterAttMap[filterId];
                                    }
                                }
                            );

                            angular.forEach(
                                Object.keys(filterAttMap),
                                function(filterId) {

                                    if (filterAttMap[filterId].length > 0) {
                                        var filterNo = $scope.filterNumbersMap[filterId];

                                        if (filtersClause == '') {
                                            filtersClause = ' Label_Ids1__c LIKE \'%' + filterNo + '%\' OR Label_Ids2__c LIKE \'%' + filterNo + '%\'';
                                        } else {
                                            filtersClause += ' OR Label_Ids1__c LIKE \'%' + filterNo + '%\' OR Label_Ids2__c LIKE \'%' + filterNo + '%\'';
                                        }
                                    }
                                }
                            );

                            if (filtersClause != '') {
                                filtersClause = 'AND ( ' + filtersClause + ' )';
                            }

                            $scope.getCommunityMatchingMembers(filtersClause, refTypesClause, filterAttMap).then(function(result) {
                                result = result.split('@@@');
                                $scope.pageVariables['matchingMembersCount'] = result[0];
                                $scope.communityUserMap = JSON.parse(result[1]);
                                $scope.pageVariables['matchingMembersLoading'] = false;
                                $scope.pageVariables['showPostToCommunityModal'] = true;
                                $scope.isLoading = false;
                                $scope.cancelAttributesModal();
                            });
                        } else {
                            $scope.selectedFilterAttNamesMap = {};
                            $scope.pageVariables['showRequiredAttributesError'] = false;
                            var newFilterAttsMap = {};
                            var oldFilterAttsMap = {};

                            angular.forEach(
                                Object.keys($scope.filterAttributesMap),
                                function(filterId) {
                                    $scope.selectedFilterAttNamesMap[filterId] = '';
                                    newFilterAttsMap[filterId] = [];
                                    var attNames = '';

                                    angular.forEach(
                                        $scope.filterAttributesMap[filterId],
                                        function(attWrapper) {

                                            if (attWrapper['isSelected']) {
                                                attNames = attNames == '' ? attWrapper['attName'] : attNames + ', ' + attWrapper['attName'];
                                                newFilterAttsMap[filterId].push(attWrapper['attId']);
                                            }
                                        }
                                    );
                                    $scope.selectedFilterAttNamesMap[filterId] = attNames;
                                }
                            );

                            angular.forEach(
                                Object.keys($scope.selectedFilterAttNamesMap),
                                function(filterId) {

                                    if ($scope.requiredFiltersMap[filterId] && $scope.selectedFilterAttNamesMap[filterId] == '') {
                                        $scope.pageVariables['showRequiredAttributesError'] = true;
                                    }
                                }
                            );

                            if (!$scope.pageVariables['showRequiredAttributesError']) {
                                $scope.isLoading = true;
                                var processName = 'edit filters';

                                $scope.getPermissionsMessage(processName).then(function(result) {

                                    if (result != '') {
                                        $scope.pageVariables['showAttributesModalError'] = true;
                                        $scope.pageVariables['attributesModalErrorMsg'] = result;
                                        $scope.isLoading = false;
                                    } else {
                                        $scope.pageVariables['showAttributesModalError'] = false;
                                        $scope.pageVariables['attributesModalErrorMsg'] = '';

                                        angular.forEach(
                                            Object.keys($scope.tempFilterAttributesMap),
                                            function(filterId) {
                                                oldFilterAttsMap[filterId] = [];

                                                angular.forEach(
                                                    $scope.tempFilterAttributesMap[filterId],
                                                    function(attWrapper) {

                                                        if (attWrapper['isSelected']) {
                                                            oldFilterAttsMap[filterId].push(attWrapper['attId']);
                                                        }
                                                    }
                                                );
                                            }
                                        );

                                        $scope.saveFiltersInfo(oldFilterAttsMap, newFilterAttsMap).then(function(result) {
                                            
                                            if (result == 'success') {
                                                $scope.pageVariables['showAttributesModal'] = false;
                                                $scope.isLoading = false;
                                            } else {
                                                $scope.pageVariables['showAttributesModalError'] = true;
                                                $scope.pageVariables['attributesModalErrorMsg'] = result.split('---')[1];
                                                $scope.isLoading = false;
                                            }
                                        });
                                    }
                                });
                            }
                        }
                    }

                    $scope.selectRequestItem = function(reqWrapper, isUr) {
                        $scope.cancelInlineEdit();
                        //REF-1964
                        $scope.pageVariables['hasChallengeId'] = false;
                        
                        if ((isUr && reqWrapper['unspecRequestId'] != $scope.selectedRequestItem['unspecRequestId'])
                                || (!isUr && reqWrapper['accRequestId'] != $scope.selectedRequestItem['accRequestId'])) {
                            $scope.isLoading = true;
                            $scope.pageVariables['isUr'] = isUr;
                            $scope.selectedRequestItem = angular.copy(reqWrapper);
                            $scope.tempRequestItemToEdit = angular.copy(reqWrapper);
                            
                            //REF-1964
                            if (reqWrapper['challengeId'] != '') {
                                $scope.pageVariables['hasChallengeId'] = true;
                            }
                            
                            if (isUr) {
                                $scope.pageVariables['selectedRequestId'] = reqWrapper['unspecRequestId'];
                            } else {
                                $scope.pageVariables['selectedRequestId'] = reqWrapper['accRequestId'];
                            }

                            if (!($scope.selectedRequestItem['requestStatus'].includes('Give Up') || $scope.selectedRequestItem['requestStatus'] == 'No Longer Needed' || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Completed'  || $scope.selectedRequestItem['requestStatus'] == 'No Response'  || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Unavailable')) {
                                $scope.pageVariables['isSelectedRequestActive'] = true;
                            } else {
                                $scope.pageVariables['isSelectedRequestActive'] = false;
                            }
                            
                            //REF-1964
                            if ($scope.pageVariables['selectedRequestId'] in $scope.postToInfluitiveWrapperMap) {
                                $scope.pageVariables['selectedAdvocates'] = $scope.postToInfluitiveWrapperMap[$scope.pageVariables['selectedRequestId']]['selectedContacts'];
                                localStorage.setItem("selectedAdvocates", JSON.stringify($scope.pageVariables['selectedAdvocates']));
                                $scope.pageVariables['postToInfluitiveWrapper'] = $scope.postToInfluitiveWrapperMap[$scope.pageVariables['selectedRequestId']];
                            } else {
                            	$scope.pageVariables['postToInfluitiveWrapper'] = {};
                                $scope.pageVariables['selectedAdvocates'] = [];
                                localStorage.setItem("selectedAdvocates", JSON.stringify({}));
                            }

                            $scope.getAdditionalFieldsInfo($scope.selectedRequestItem['refTypeId'], $scope.selectedRequestItem['addInfoId']).then(function(result) {
                                $scope.selectedRequestAdditionalInfo = result;
                                $scope.tempSelectedRequestAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);
                                $scope.oldAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);

                                if (Object.keys(result).length == 0) {
                                    $scope.pageVariables['isAddInfoPresent'] = false;
                                } else {
                                    $scope.pageVariables['isAddInfoPresent'] = true;
                                }
                                var tempRequestIds = [];

                                if (isUr) {
                                    tempRequestIds.push($scope.selectedRequestItem['unspecRequestId']);
                                } else {
                                    tempRequestIds.push($scope.selectedRequestItem['accRequestId']);
                                }
                                
                                $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                    $scope.pageVariables['relatedNotesList'] = result;
                                    $scope.isLoading = false;
                                });
                            });
                        }
                    }

                    $scope.openAddRequestModal = function() {
                        $scope.cancelInlineEdit();
                        $scope.pageVariables['showAddRequestModal'] = true;
                        $scope.pageVariables['showAddRequestError'] = false;
                        $scope.pageVariables['addRequestErrorMsg'] = '';
                        $scope.newRequestItem['refTypeId'] = angular.copy($scope.refTypesList[0]['refTypeId']);
                        $scope.newRequestItem['accountId'] = '';
                        $scope.newRequestItem['accountName'] = '';
                        $scope.newRequestItem['deadline'] = '';
                        $scope.newRequestItem['requesterId'] = angular.copy($scope.refRequestWrapper['requesterId']);
                        $scope.newRequestItem['refRequestId'] = angular.copy($scope.refRequestWrapper['refRequestId']);
                        $scope.pageVariables['addRequestAccountScope'].removeSelectedValue();
                    }

                    $scope.cancelAddRequestModal = function() {
                        $scope.newRequestItem = {};
                        $scope.pageVariables['showAddRequestModal'] = false;
                    }

                    $scope.saveAddRequestModal = function(isSaveAndNew) {
                        var tempDeadlineString = $scope.convertToDate($scope.newRequestItem['deadline']);
                        $scope.pageVariables['showAddRequestError'] = false;
                        $scope.pageVariables['addRequestErrorMsg'] = '';
                        var tempTodayDate = new Date($scope.todayDate);
                        var tempDeadlineDate = new Date(tempDeadlineString);

                        if ($scope.newRequestItem['deadline'] == null || $scope.newRequestItem['deadline'] == ''
                                || $scope.newRequestItem['refTypeId'] == null || $scope.newRequestItem['refTypeId'] == '') {
                            $scope.pageVariables['showAddRequestError'] = true;
                            $scope.pageVariables['addRequestErrorMsg'] = '{!$Label.ERROR_SELECT_REQUIRED_VALUE}';
                        }

                        if (tempDeadlineDate < tempTodayDate) {
                            $scope.pageVariables['showAddRequestError'] = true;
                            $scope.pageVariables['addRequestErrorMsg'] = '{!$Label.ReferenceUse_invalid_past_Deadline_date}';
                        }

                        if (tempDeadlineString == null) {
                            $scope.pageVariables['showAddRequestError'] = true;
                            $scope.pageVariables['addRequestErrorMsg'] = '{!$Label.Date_Invalid}' + ' ' + $scope.newRequestItem['deadline'];
                        }

                        if (!$scope.pageVariables['showAddRequestError']) {
                            $scope.isLoading = true;
                            $scope.newRequestItem['deadline'] = tempDeadlineString;

                            if ($scope.requestRefTypeIds.indexOf($scope.newRequestItem['refTypeId']) == -1) {
                                $scope.requestRefTypeIds.push($scope.newRequestItem['refTypeId']);
                            }

                            $scope.addNewRequest().then(function(result) {

                                if (result != 'success') {
                                    $scope.isLoading = false;
                                    $scope.pageVariables['isError'] = true;
                                    $scope.pageVariables['errorMessage'] = result.split('---')[1];
                                } else {

                                    $scope.getRefRequestObject().then(function(result) {
                                        $scope.refRequestWrapper = result[0];

                                        if ($scope.pageVariables['isUr']) {
                                            
                                            angular.forEach(
                                                $scope.refRequestWrapper['unspecRequests'],
                                                function(req) {
                                                    
                                                    if (req['unspecRequestId'] == $scope.pageVariables['selectedRequestId']) {
                                                        $scope.selectedRequestItem = angular.copy(req);
                                                        $scope.tempRequestItemToEdit = angular.copy(req);
                                                    }
                                                }
                                            );
                                        } else {
                                            
                                            angular.forEach(
                                                $scope.refRequestWrapper['accRequests'],
                                                function(req) {
                                                    
                                                    if (req['accRequestId'] == $scope.pageVariables['selectedRequestId']) {
                                                        $scope.selectedRequestItem = angular.copy(req);
                                                        $scope.tempRequestItemToEdit = angular.copy(req);
                                                    }
                                                }
                                            );
                                        }
                                        $scope.isLoading = false;
                                    });
                                    $scope.newRequestItem = {};
                                    $scope.pageVariables['showAddRequestModal'] = false;

                                    if (isSaveAndNew) {
                                        $scope.openAddRequestModal();
                                    }
                                }
                            });
                        }
                    }

                    $scope.openEditRequestModal = function() {
                        $scope.cancelInlineEdit();
                        $scope.requestItemToEdit = angular.copy($scope.selectedRequestItem);
                        $scope.tempRequestItemToEdit = angular.copy($scope.selectedRequestItem);
                        $scope.tempSelectedRequestAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);
                        $scope.oldAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);
                        $scope.pageVariables['isSavedFromInlineEdit'] = false;

                        if ($scope.pageVariables['isUr']) {
                            $scope.requestItemToEdit['accountId'] = '';
                            $scope.tempRequestItemToEdit['accountId'] = '';
                            $scope.requestItemToEdit['accountName'] = '';
                            $scope.tempRequestItemToEdit['accountName'] = '';
                        }
                        $scope.pageVariables['showEditRequestModal'] = true;
                        $scope.pageVariables['isUrEdit'] = angular.copy($scope.pageVariables['isUr']);
                        $scope.pageVariables['isError'] = false;
                        $scope.pageVariables['errorMessage'] = '';
                        $scope.pageVariables['showEditRequestError'] = false;
                        $scope.pageVariables['editRequestErrorMsg'] = '';
                        $scope.isLoading = true;
                        var processName = 'edit request';

                        $scope.getPermissionsMessage(processName).then(function(result) {

                            if (result != '') {
                                $scope.pageVariables['showEditRequestError'] = false;
                                $scope.pageVariables['editRequestErrorMsg'] = result;
                            }
                            $scope.isLoading = false;
                        });
                    }

                    $scope.editRelatedRequest = function(requestWrapper, isUr) {
                        $scope.cancelInlineEdit();
                        $scope.requestItemToEdit = angular.copy(requestWrapper);
                        $scope.tempRequestItemToEdit = angular.copy(requestWrapper);

                        if (isUr) {
                            $scope.requestItemToEdit['accountId'] = '';
                            $scope.tempRequestItemToEdit['accountId'] = '';
                            $scope.requestItemToEdit['accountName'] = '';
                            $scope.tempRequestItemToEdit['accountName'] = '';
                        }
                        $scope.pageVariables['showEditRequestModal'] = true;
                        $scope.pageVariables['isUrEdit'] = isUr;
                        $scope.pageVariables['isError'] = false;
                        $scope.pageVariables['errorMessage'] = '';
                        $scope.pageVariables['showEditRequestError'] = false;
                        $scope.pageVariables['editRequestErrorMsg'] = '';
                        $scope.isLoading = true;
                        var processName = 'edit request';

                        $scope.getPermissionsMessage(processName).then(function(result) {

                            if (result != '') {
                                $scope.pageVariables['showEditRequestError'] = false;
                                $scope.pageVariables['editRequestErrorMsg'] = result;
                            }
                            
                            $scope.getAdditionalFieldsInfo($scope.requestItemToEdit['refTypeId'], $scope.requestItemToEdit['addInfoId']).then(function(result) {
                                $scope.oldAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);
                                $scope.selectedRequestAdditionalInfo = result;
                                $scope.tempSelectedRequestAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);

                                if (Object.keys(result).length == 0) {
                                    $scope.pageVariables['isAddInfoPresent'] = false;
                                } else {
                                    $scope.pageVariables['isAddInfoPresent'] = true;
                                }
                                $scope.isLoading = false;
                            });
                        });
                    }

                    $scope.hideProcessChangeError = function() {
                        $scope.pageVariables['showProcessChangeError'] = false;
                        $scope.cancelEditRequestModal();
                    }

                    $scope.cancelEditRequestModal = function() {
                        $scope.cancelInlineEdit();
                        $scope.pageVariables['showEditRequestModal'] = false;
                        $scope.requestItemToEdit = {};
                        $scope.requestItemsToUpdateIds = {};
                        
                        if ($scope.pageVariables['isSavedFromInlineEdit']) {
                            $scope.selectedRequestItem = angular.copy($scope.tempRequestItemToEdit);
                        } else {
                            $scope.tempRequestItemToEdit = angular.copy($scope.selectedRequestItem);
                        }
                        $scope.pageVariables['isError'] = false;
                        $scope.pageVariables['errorMessage'] = '';
                        $scope.pageVariables['showEditRequestError'] = false;
                        $scope.pageVariables['editRequestErrorMsg'] = '';
                        $scope.selectedRequestAdditionalInfo = angular.copy($scope.oldAdditionalInfo);

                        if (Object.keys($scope.selectedRequestAdditionalInfo).length == 0) {
                            $scope.pageVariables['isAddInfoPresent'] = false;
                        } else {
                            $scope.pageVariables['isAddInfoPresent'] = true;
                        }
                    }

                    $scope.handleRefTypeChange = function() {
                        $scope.isLoading = true;
                        var tempAddInfoId = '';
                        var refTypeIndex = $scope.requestRefTypeIds.indexOf($scope.requestItemToEdit['refTypeId']);

                        if (refTypeIndex == -1) {
                            $scope.requestRefTypeIds.push($scope.requestItemToEdit['refTypeId']);
                        } else {
                            $scope.requestRefTypeIds.splice(refTypeIndex, 1);
                            $scope.requestRefTypeIds.push($scope.requestItemToEdit['refTypeId']);
                        }

                        angular.forEach(
                            $scope.refRequestWrapper['accRequests'],
                            function(ar) {

                                if (ar['refTypeId'] == $scope.requestItemToEdit['refTypeId'] && ar['addInfoId'] != '') {
                                    tempAddInfoId = ar['addInfoId'];
                                }
                            }
                        );

                        if (tempAddInfoId == '') {

                            angular.forEach(
                                $scope.refRequestWrapper['unspecRequests'],
                                function(ur) {

                                    if (ur['refTypeId'] == $scope.requestItemToEdit['refTypeId'] && ur['addInfoId'] != '') {
                                        tempAddInfoId = ur['addInfoId'];
                                    }
                                }
                            );
                        }
                        $scope.requestItemToEdit['addInfoId'] = tempAddInfoId;

                        $scope.getAdditionalFieldsInfo($scope.requestItemToEdit['refTypeId'], tempAddInfoId).then(function(result) {
                            $scope.selectedRequestAdditionalInfo = result;
                            $scope.tempSelectedRequestAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);

                            if (Object.keys(result).length == 0) {
                                $scope.pageVariables['isAddInfoPresent'] = false;
                            } else {
                                $scope.pageVariables['isAddInfoPresent'] = true;
                            }
                            $scope.isLoading = false;
                        });
                    }

                    $scope.$watch(
                        'requestItemToEdit.accountId',
                        function(newVal, oldVal) {
                            
                            if (newVal == '' && oldVal != '') {
                                
                                if ($scope.tempRequestItemToEdit['contactId'] == '') {
                                    $scope.requestItemToEdit['contactId'] = '';
                                    $scope.requestItemToEdit['contactName'] = '';
                                    $scope.pageVariables['contactLookupScope'].removeSelectedValue();
                                }
                            }
                        }
                    );

                    $scope.saveEditRequestModal = function() {
                        var tempDeadlineString = $scope.convertToDate($scope.requestItemToEdit['deadline']);
                        $scope.pageVariables['showEditRequestError'] = false;
                        $scope.pageVariables['editRequestErrorMsg'] = '';
                        $scope.pageVariables['isError'] = false;
                        $scope.pageVariables['errorMessage'] = '';
                        var tempTodayDate = new Date($scope.todayDate);
                        var tempDeadlineDate = new Date(tempDeadlineString);
                        var dateDiff = 0;
                        var timeDiff = Math.abs(tempDeadlineDate.getTime() - tempTodayDate.getTime());
                        var daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));

                        if ($scope.requestItemToEdit['process'] == 'Peer2Peer' && $scope.tempRequestItemToEdit['process'] == 'Managed'
                                && daysDiff < $scope.minDifferenceForProcessChange) {
                            var tempProcessChangeError = '{!$Label.Managed_Request_Error}';

                            if ($scope.pageVariables['isSavedFromInlineEdit']) {
                                $scope.pageVariables['isError'] = true;
                                $scope.pageVariables['errorMessage'] = tempProcessChangeError.replace('@@@', $scope.requestItemToEdit['accountName']);
                            } else {
                                $scope.pageVariables['showEditRequestError'] = true;
                                $scope.pageVariables['editRequestErrorMsg'] = tempProcessChangeError.replace('@@@', $scope.requestItemToEdit['accountName']);
                            }
                        }

                        if ($scope.requestItemToEdit['deadline'] == null || $scope.requestItemToEdit['deadline'] == ''
                                || $scope.requestItemToEdit['refTypeId'] == null || $scope.requestItemToEdit['refTypeId'] == '') {
                            
                            if ($scope.pageVariables['isSavedFromInlineEdit']) {
                                $scope.pageVariables['isError'] = true;
                                $scope.pageVariables['errorMessage'] = '{!$Label.ERROR_SELECT_REQUIRED_VALUE}';
                            } else {
                                $scope.pageVariables['showEditRequestError'] = true;
                                $scope.pageVariables['editRequestErrorMsg'] = '{!$Label.ERROR_SELECT_REQUIRED_VALUE}';
                            }
                        }

                        if (!$scope.pageVariables['isUrEdit'] && $scope.requestItemToEdit['accountId'] == '') {
                            
                            if ($scope.pageVariables['isSavedFromInlineEdit']) {
                                $scope.pageVariables['isError'] = true;
                                $scope.pageVariables['errorMessage'] = 'Account cannot be left blank for an Account Request';
                            } else {
                                $scope.pageVariables['showEditRequestError'] = true;
                                $scope.pageVariables['editRequestErrorMsg'] = 'Account cannot be left blank for an Account Request';
                            }
                        }

                        if ($scope.requestItemToEdit['deadline'] != $scope.tempRequestItemToEdit['deadline'] && tempDeadlineDate < tempTodayDate) {
                            
                            if ($scope.pageVariables['isSavedFromInlineEdit']) {
                                $scope.pageVariables['isError'] = true;
                                $scope.pageVariables['errorMessage'] = '{!$Label.ReferenceUse_invalid_past_Deadline_date}';
                            } else {
                                $scope.pageVariables['showEditRequestError'] = true;
                                $scope.pageVariables['editRequestErrorMsg'] = '{!$Label.ReferenceUse_invalid_past_Deadline_date}';
                            }
                        }

                        if (tempDeadlineString == null) {
                            
                            if ($scope.pageVariables['isSavedFromInlineEdit']) {
                                $scope.pageVariables['isError'] = true;
                                $scope.pageVariables['errorMessage'] = '{!$Label.Date_Invalid}' + ' ' + $scope.requestItemToEdit['deadline'];
                            } else {
                                $scope.pageVariables['showEditRequestError'] = true;
                                $scope.pageVariables['editRequestErrorMsg'] = '{!$Label.Date_Invalid}' + ' ' + $scope.requestItemToEdit['deadline'];
                            }
                        } else {
                            $scope.requestItemToEdit['deadline'] = tempDeadlineString;
                        }

                        angular.forEach(
                            Object.keys($scope.selectedRequestAdditionalInfo),
                            function(apiName) {

                                if ($scope.selectedRequestAdditionalInfo[apiName]['required']
                                        && ($scope.selectedRequestAdditionalInfo[apiName]['fieldValue'] == null
                                            || $scope.selectedRequestAdditionalInfo[apiName]['fieldValue'] == '')) {
                                    
                                    if ($scope.pageVariables['isSavedFromInlineEdit']) {
                                        $scope.pageVariables['isError'] = true;
                                        $scope.pageVariables['errorMessage'] = '{!$Label.ERROR_SELECT_REQUIRED_VALUE}';
                                    } else {
                                        $scope.pageVariables['showEditRequestError'] = true;
                                        $scope.pageVariables['editRequestErrorMsg'] = '{!$Label.ERROR_SELECT_REQUIRED_VALUE}';
                                    }
                                }

                                if (($scope.selectedRequestAdditionalInfo[apiName]['fieldType'] == 'DATE'
                                            || $scope.selectedRequestAdditionalInfo[apiName]['fieldType'] == 'DATETIME')
                                        && $scope.selectedRequestAdditionalInfo[apiName]['fieldValue'] != '') {
                                    var tempDateString = $scope.convertToDate($scope.selectedRequestAdditionalInfo[apiName]['fieldValue']);

                                    if (tempDateString == null) {
                                        
                                        if ($scope.pageVariables['isSavedFromInlineEdit']) {
                                            $scope.pageVariables['isError'] = true;
                                            $scope.pageVariables['errorMessage'] = '{!$Label.Date_Invalid}' + ' ' + $scope.selectedRequestAdditionalInfo[apiName]['fieldValue'];
                                        } else {
                                            $scope.pageVariables['showEditRequestError'] = true;
                                            $scope.pageVariables['editRequestErrorMsg'] = '{!$Label.Date_Invalid}' + ' ' + $scope.selectedRequestAdditionalInfo[apiName]['fieldValue'];
                                        }
                                    } else {
                                        $scope.selectedRequestAdditionalInfo[apiName]['fieldValue'] = tempDateString;
                                    }
                                }

                                if ($scope.selectedRequestAdditionalInfo[apiName]['fieldType'] == 'DOUBLE') {

                                    if (isNaN($scope.selectedRequestAdditionalInfo[apiName]['fieldValue'])) {
                                        
                                        if ($scope.pageVariables['isSavedFromInlineEdit']) {
                                            $scope.pageVariables['isError'] = true;
                                            $scope.pageVariables['errorMessage'] = 'Invalid numeric value: '
                                                                            + $scope.selectedRequestAdditionalInfo[apiName]['fieldLabel'] + ': '
                                                                            + $scope.selectedRequestAdditionalInfo[apiName]['fieldValue'];
                                        } else {
                                            $scope.pageVariables['showEditRequestError'] = true;
                                            $scope.pageVariables['editRequestErrorMsg'] = 'Invalid numeric value: '
                                                                            + $scope.selectedRequestAdditionalInfo[apiName]['fieldLabel'] + ': '
                                                                            + $scope.selectedRequestAdditionalInfo[apiName]['fieldValue'];
                                        }
                                    }
                                }
                            }
                        );

                        if (!$scope.pageVariables['showEditRequestError'] && !$scope.pageVariables['isError']) {
                            $scope.isLoading = true;
                            $scope.tempRequestItemToEdit['deadline'] = $scope.convertToDate($scope.tempRequestItemToEdit['deadline']);
                            var processName = 'edit request';

                            $scope.getPermissionsMessage(processName).then(function(result) {

                                if (result != '') {
                                    
                                    if ($scope.pageVariables['isSavedFromInlineEdit']) {
                                        $scope.pageVariables['isError'] = false;
                                        $scope.pageVariables['errorMessage'] = result;
                                    } else {
                                        $scope.pageVariables['showEditRequestError'] = false;
                                        $scope.pageVariables['editRequestErrorMsg'] = result;
                                    }
                                    $scope.isLoading = false;
                                } else {
                                    $scope.requestItemsToUpdateIds = {};
                                    $scope.requestItemsToUpdateIds['arIds'] = [];
                                    $scope.requestItemsToUpdateIds['urIds'] = [];
                                    $scope.pageVariables['activeRequestsPresent'] = false;

                                    angular.forEach(
                                        $scope.refRequestWrapper['unspecRequests'],
                                        function(req) {
                                            
                                            if (req['unspecRequestId'] != $scope.requestItemToEdit['unspecRequestId']
                                                    && req['refTypeId'] == $scope.requestItemToEdit['refTypeId']) {
                                                $scope.requestItemsToUpdateIds['urIds'].push(req['unspecRequestId']);
                                            }

                                            if (!($scope.selectedRequestItem['requestStatus'].includes('Give Up') || $scope.selectedRequestItem['requestStatus'] == 'No Longer Needed' || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Completed'  || $scope.selectedRequestItem['requestStatus'] == 'No Response'  || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Unavailable')) {
                                                $scope.pageVariables['activeRequestsPresent'] = true;
                                            }
                                        }
                                    );

                                    angular.forEach(
                                        $scope.refRequestWrapper['accRequests'],
                                        function(req) {
                                            
                                            if (req['accRequestId'] != $scope.requestItemToEdit['accRequestId']
                                                    && req['refTypeId'] == $scope.requestItemToEdit['refTypeId']) {
                                                $scope.requestItemsToUpdateIds['arIds'].push(req['accRequestId']);
                                            }

                                            if (!($scope.selectedRequestItem['requestStatus'].includes('Give Up') || $scope.selectedRequestItem['requestStatus'] == 'No Longer Needed' || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Completed'  || $scope.selectedRequestItem['requestStatus'] == 'No Response'  || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Unavailable')) {
                                                $scope.pageVariables['activeRequestsPresent'] = true;
                                            }
                                        }
                                    );
                                    $scope.pageVariables['showEditRequestModal'] = false;
                                    $scope.emailWrapper = {};

                                    if ($scope.tempRequestItemToEdit['process'] != $scope.requestItemToEdit['process']) {
                                        $scope.pageVariables['showProcessChangeConfirmation'] = true;
                                        $scope.isLoading = false;
                                    } else if (($scope.tempRequestItemToEdit['requestStatus'] != $scope.requestItemToEdit['requestStatus']
                                                && $scope.requestItemToEdit['requestStatus'] != 'In Progress')
                                            || $scope.tempRequestItemToEdit['ownerId'] != $scope.requestItemToEdit['ownerId']) {
                                        $scope.pageVariables['showNotifyRequesterModal'] = true;
                                        $scope.isLoading = false;
                                    } else {
                                        $scope.isLoading = true;

                                        $scope.saveRequest().then(function(result) {
                                            
                                            if (!result.startsWith('success')) {
                                                $scope.pageVariables['isError'] = true;
                                                $scope.pageVariables['errorMessage'] = result.split('---')[1];
                                                $scope.isLoading = false;
                                            } else {

                                                if ($scope.pageVariables['isSubjectChanged']) {

                                                    $scope.saveRequestSubject().then(function(result) {
                                                        console.log('----' + result);
                                                    });
                                                }
                                                $scope.pageVariables['isSubjectChanged'] = false;
                                                $scope.pageVariables['editedFields'] = [];
                                                $scope.pageVariables['isInlineEdit'] = false;
                                                $scope.pageVariables['inlineEditField'] = '';
                                                var isNewRecordCreated = false;

                                                if (result.split('##')[1] != '') {
                                                    $scope.pageVariables['selectedRequestId'] = result.split('##')[1];
                                                    isNewRecordCreated = true;
                                                    $scope.pageVariables['isUr'] = false;
                                                }

                                                $scope.getRefRequestObject().then(function(result) {
                                                    $scope.refRequestWrapper = result[0];
                                                    
                                                    if (isNewRecordCreated) {

                                                        angular.forEach(
                                                            $scope.refRequestWrapper['accRequests'],
                                                            function(req) {
                                                                
                                                                if (req['accRequestId'] == $scope.pageVariables['selectedRequestId']) {
                                                                    $scope.selectedRequestItem = angular.copy(req);
                                                                    $scope.tempRequestItemToEdit = angular.copy(req);
                                                                }
                                                            }
                                                        );
                                                    } else {

                                                        if ($scope.pageVariables['isUr']) {
                                                            
                                                            angular.forEach(
                                                                $scope.refRequestWrapper['unspecRequests'],
                                                                function(req) {
                                                                    
                                                                    if (req['unspecRequestId'] == $scope.pageVariables['selectedRequestId']) {
                                                                        $scope.selectedRequestItem = angular.copy(req);
                                                                        $scope.tempRequestItemToEdit = angular.copy(req);
                                                                    }
                                                                }
                                                            );
                                                        } else {
                                                            
                                                            angular.forEach(
                                                                $scope.refRequestWrapper['accRequests'],
                                                                function(req) {
                                                                    
                                                                    if (req['accRequestId'] == $scope.pageVariables['selectedRequestId']) {
                                                                        $scope.selectedRequestItem = angular.copy(req);
                                                                        $scope.tempRequestItemToEdit = angular.copy(req);
                                                                    }
                                                                }
                                                            );
                                                        }
                                                    }

                                                    if (!($scope.selectedRequestItem['requestStatus'].includes('Give Up') || $scope.selectedRequestItem['requestStatus'] == 'No Longer Needed' || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Completed'  || $scope.selectedRequestItem['requestStatus'] == 'No Response'  || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Unavailable')) {
                                                        $scope.pageVariables['isSelectedRequestActive'] = true;
                                                    } else {
                                                        $scope.pageVariables['isSelectedRequestActive'] = false;
                                                    }

                                                    if ($scope.requestItemToEdit['refTypeId'] != $scope.tempRequestItemToEdit['refTypeId']) {

                                                        $scope.getFiltersInfo().then(function(result) {
                                                            result = result.split('@@@');
                                                            $scope.filterAttributesMap = JSON.parse(result[0]);
                                                            $scope.requiredFiltersMap = JSON.parse(result[1]);
                                                            $scope.filterNumbersMap = JSON.parse(result[2]);
                                                            $scope.selectedFilterAttNamesMap = {};

                                                            angular.forEach(
                                                                Object.keys($scope.filterAttributesMap),
                                                                function(filterId) {
                                                                    $scope.selectedFilterAttNamesMap[filterId] = '';
                                                                    var attNames = '';

                                                                    angular.forEach(
                                                                        $scope.filterAttributesMap[filterId],
                                                                        function(att) {
                                                                            
                                                                            if (att['isSelected']) {
                                                                                attNames = attNames == '' ? att['attName'] : attNames + ', ' + att['attName'];
                                                                            }
                                                                        }
                                                                    );
                                                                    $scope.selectedFilterAttNamesMap[filterId] = attNames;
                                                                }
                                                            );
                                                        });
                                                    }

                                                    $scope.getAdditionalFieldsInfo($scope.selectedRequestItem['refTypeId'], $scope.selectedRequestItem['addInfoId']).then(function(result) {
                                                        $scope.selectedRequestAdditionalInfo = result;
                                                        $scope.tempSelectedRequestAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);

                                                        if (Object.keys(result).length == 0) {
                                                            $scope.pageVariables['isAddInfoPresent'] = false;
                                                        } else {
                                                            $scope.pageVariables['isAddInfoPresent'] = true;
                                                        }

                                                        if ($scope.pageVariables['selectedTabLeft'] == 'detail' && $scope.pageVariables['isUr']) {
                                                            var tempRequestIds = [];
                                                            tempRequestIds.push($scope.selectedRequestItem['unspecRequestId']);
                                                            
                                                            $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                                                $scope.pageVariables['relatedNotesList'] = result;
                                                                $scope.isLoading = false;
                                                            });
                                                        } else if ($scope.pageVariables['selectedTabLeft'] == 'detail' && !$scope.pageVariables['isUr']) {
                                                            var tempRequestIds = [];
                                                            tempRequestIds.push($scope.selectedRequestItem['accRequestId']);
                                                            
                                                            $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                                                $scope.pageVariables['relatedNotesList'] = result;
                                                                $scope.isLoading = false;
                                                            });
                                                        } else if ($scope.pageVariables['selectedTabLeft'] == 'request') {
                                                            var tempRequestIds = [];
                                                            tempRequestIds.push($scope.refRequestWrapper['refRequestId']);

                                                            angular.forEach(
                                                                $scope.refRequestWrapper['accRequests'],
                                                                function(accReq) {
                                                                    tempRequestIds.push(accReq['accRequestId']);
                                                                }
                                                            );

                                                            angular.forEach(
                                                                $scope.refRequestWrapper['unspecRequests'],
                                                                function(unspecReq) {
                                                                    tempRequestIds.push(unspecReq['unspecRequestId']);
                                                                }
                                                            );
                                                            
                                                            $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                                                $scope.pageVariables['relatedNotesList'] = result;
                                                                $scope.isLoading = false;
                                                            });
                                                        }
                                                    });
                                                });
                                                $scope.requestItemToEdit = {};
                                            }
                                            console.log('---' + result);
                                        });
                                    }
                                }
                            });
                        }
                    }

                    $scope.cancelProcessChange = function() {
                        $scope.pageVariables['showProcessChangeConfirmation'] = false;
                        $scope.cancelEditRequestModal();
                    }

                    $scope.saveProcessChange = function() {
                        $scope.pageVariables['showProcessChangeConfirmation'] = false;
                        $scope.isLoading = true;

                        $scope.saveRequest().then(function(result) {
                            
                            if (!result.startsWith('success')) {
                                $scope.pageVariables['isError'] = true;
                                $scope.pageVariables['errorMessage'] = result.split('---')[1];
                                $scope.isLoading = false;
                            } else {

                                if ($scope.pageVariables['isSubjectChanged']) {

                                    $scope.saveRequestSubject().then(function(result) {
                                        console.log('----' + result);
                                    });
                                }
                                $scope.pageVariables['isSubjectChanged'] = false;
                                $scope.pageVariables['editedFields'] = [];
                                $scope.pageVariables['isInlineEdit'] = false;
                                $scope.pageVariables['inlineEditField'] = '';
                                var isNewRecordCreated = false;
                                
                                if (result.split('##')[1] != '') {
                                    $scope.pageVariables['selectedRequestId'] = result.split('##')[1];
                                    isNewRecordCreated = true;
                                }

                                $scope.getRefRequestObject().then(function(result) {
                                    $scope.refRequestWrapper = result[0];

                                    if (isNewRecordCreated) {
                                        
                                        angular.forEach(
                                            $scope.refRequestWrapper['accRequests'],
                                            function(req) {
                                                
                                                if (req['accRequestId'] == $scope.pageVariables['selectedRequestId']) {
                                                    $scope.selectedRequestItem = angular.copy(req);
                                                    $scope.tempRequestItemToEdit = angular.copy(req);
                                                    $scope.pageVariables['isUr'] = false;
                                                }
                                            }
                                        );
                                    } else {

                                        if ($scope.pageVariables['isUr']) {
                                            
                                            angular.forEach(
                                                $scope.refRequestWrapper['unspecRequests'],
                                                function(req) {
                                                    
                                                    if (req['unspecRequestId'] == $scope.pageVariables['selectedRequestId']) {
                                                        $scope.selectedRequestItem = angular.copy(req);
                                                        $scope.tempRequestItemToEdit = angular.copy(req);
                                                    }
                                                }
                                            );
                                        } else {
                                            
                                            angular.forEach(
                                                $scope.refRequestWrapper['accRequests'],
                                                function(req) {
                                                    
                                                    if (req['accRequestId'] == $scope.pageVariables['selectedRequestId']) {
                                                        $scope.selectedRequestItem = angular.copy(req);
                                                        $scope.tempRequestItemToEdit = angular.copy(req);
                                                    }
                                                }
                                            );
                                        }
                                    }

                                    if (!($scope.selectedRequestItem['requestStatus'].includes('Give Up') || $scope.selectedRequestItem['requestStatus'] == 'No Longer Needed' || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Completed'  || $scope.selectedRequestItem['requestStatus'] == 'No Response'  || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Unavailable')) {
                                        $scope.pageVariables['isSelectedRequestActive'] = true;
                                    } else {
                                        $scope.pageVariables['isSelectedRequestActive'] = false;
                                    }

                                    if ($scope.requestItemToEdit['refTypeId'] != $scope.tempRequestItemToEdit['refTypeId']) {

                                        $scope.getFiltersInfo().then(function(result) {
                                            result = result.split('@@@');
                                            $scope.filterAttributesMap = JSON.parse(result[0]);
                                            $scope.requiredFiltersMap = JSON.parse(result[1]);
                                            $scope.filterNumbersMap = JSON.parse(result[2]);
                                            $scope.selectedFilterAttNamesMap = {};

                                            angular.forEach(
                                                Object.keys($scope.filterAttributesMap),
                                                function(filterId) {
                                                    $scope.selectedFilterAttNamesMap[filterId] = '';
                                                    var attNames = '';

                                                    angular.forEach(
                                                        $scope.filterAttributesMap[filterId],
                                                        function(att) {
                                                            
                                                            if (att['isSelected']) {
                                                                attNames = attNames == '' ? att['attName'] : attNames + ', ' + att['attName'];
                                                            }
                                                        }
                                                    );
                                                    $scope.selectedFilterAttNamesMap[filterId] = attNames;
                                                }
                                            );
                                        });
                                    }

                                    $scope.getAdditionalFieldsInfo($scope.selectedRequestItem['refTypeId'], $scope.selectedRequestItem['addInfoId']).then(function(result) {
                                        $scope.selectedRequestAdditionalInfo = result;
                                        $scope.tempSelectedRequestAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);

                                        if (Object.keys(result).length == 0) {
                                            $scope.pageVariables['isAddInfoPresent'] = false;
                                        } else {
                                            $scope.pageVariables['isAddInfoPresent'] = true;
                                        }

                                        if ($scope.pageVariables['selectedTabLeft'] == 'detail' && $scope.pageVariables['isUr']) {
                                            var tempRequestIds = [];
                                            tempRequestIds.push($scope.selectedRequestItem['unspecRequestId']);
                                            
                                            $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                                $scope.pageVariables['relatedNotesList'] = result;
                                                $scope.isLoading = false;
                                            });
                                        } else if ($scope.pageVariables['selectedTabLeft'] == 'detail' && !$scope.pageVariables['isUr']) {
                                            var tempRequestIds = [];
                                            tempRequestIds.push($scope.selectedRequestItem['accRequestId']);
                                            
                                            $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                                $scope.pageVariables['relatedNotesList'] = result;
                                                $scope.isLoading = false;
                                            });
                                        } else if ($scope.pageVariables['selectedTabLeft'] == 'request') {
                                            var tempRequestIds = [];
                                            tempRequestIds.push($scope.refRequestWrapper['refRequestId']);

                                            angular.forEach(
                                                $scope.refRequestWrapper['accRequests'],
                                                function(accReq) {
                                                    tempRequestIds.push(accReq['accRequestId']);
                                                }
                                            );

                                            angular.forEach(
                                                $scope.refRequestWrapper['unspecRequests'],
                                                function(unspecReq) {
                                                    tempRequestIds.push(unspecReq['unspecRequestId']);
                                                }
                                            );
                                            
                                            $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                                $scope.pageVariables['relatedNotesList'] = result;
                                                $scope.isLoading = false;
                                            });
                                        }
                                    });
                                });
                                $scope.requestItemToEdit = {};
                            }
                            console.log('---' + result);
                        });
                    }

                    $scope.cancelSendMail = function() {
                        $scope.pageVariables['showNotifyRequesterModal'] = false;
                        $scope.pageVariables['showEmailPreviewModal'] = false;
                        $scope.emailWrapper = {};
                        $scope.cancelEditRequestModal();
                    }

                    $scope.hideError = function() {
                        $scope.pageVariables['isError'] = false;
                        $scope.pageVariables['errorMessage'] = '';
                        $scope.pageVariables['isSuccess'] = false;
                        $scope.pageVariables['successMessage'] = '';
                    }

                    $scope.prepareEmail = function() {

                        if ($scope.tempRequestItemToEdit['requestStatus'] != $scope.requestItemToEdit['requestStatus']) {
                            $scope.emailWrapper['subject'] = '{!$Label.Status_Update_Subject}';
                        } else if ($scope.tempRequestItemToEdit['ownerId'] != $scope.requestItemToEdit['ownerId']) {
                            var tempSubject = '{!$Label.Owner_Update_Subject}'
                            $scope.emailWrapper['subject'] = tempSubject.replace('@@', $scope.requestItemToEdit['ownerName']);
                        }
                        $scope.emailWrapper['writeToNote'] = false;
                        
                        if ($scope.requestItemToEdit['requestStatus'] == 'No Reference Match') {
                            $scope.emailWrapper['noRefMatch'] = true;
                        } else {
                            $scope.emailWrapper['noRefMatch'] = false;
                        }
                        $scope.emailWrapper['refTypeName'] = $scope.requestItemToEdit['refTypeName'];
                        $scope.emailWrapper['oppName'] = $scope.refRequestWrapper['oppName'];
                        $scope.emailWrapper['accName'] = $scope.pageVariables['isUrEdit'] ? '{!$Label.Unspecified}' : $scope.requestItemToEdit['accountName'];
                        $scope.emailWrapper['status'] = $scope.requestItemToEdit['requestStatus'];
                        $scope.emailWrapper['deadline'] = $scope.requestItemToEdit['deadline'];

                        if ($scope.requestItemToEdit['contactId'] != null && $scope.requestItemToEdit['contactId'] != '') {
                            $scope.emailWrapper['notes'] = '';

                            if ($scope.requestItemToEdit['emailNotes'].indexOf('Contact:') == -1) {
                                $scope.emailWrapper['notes'] = 'Contact: ' + $scope.requestItemToEdit['contactName'] + '\n'
                                                            + 'Phone: ' + $scope.requestItemToEdit['phone'] + '\n'
                                                            + 'Email: ' + $scope.requestItemToEdit['email'] + '\n'
                                                            + $scope.requestItemToEdit['emailNotes'];
                            } else {
                                $scope.emailWrapper['notes'] = $scope.requestItemToEdit['emailNotes'];
                            }
                        } else {
                            $scope.emailWrapper['notes'] = $scope.requestItemToEdit['emailNotes'];
                        }
                    }

                    $scope.editAndSendMail = function() {
                        $scope.pageVariables['showEmailPreviewModal'] = true;
                        $scope.pageVariables['showNotifyRequesterModal'] = false;
                        $scope.prepareEmail();
                    }

                    $scope.sendMail = function(isSendClicked, isFromEditModal) {
                        $scope.pageVariables['showNotifyRequesterModal'] = false;
                        $scope.pageVariables['showEmailPreviewModal'] = false;
                        $scope.isLoading = true;

                        if (isSendClicked && !isFromEditModal) {
                            $scope.prepareEmail();
                        }

                        $scope.saveRequest().then(function(result) {
                            
                            if (!result.startsWith('success')) {
                                $scope.pageVariables['isError'] = true;
                                $scope.pageVariables['errorMessage'] = result.split('---')[1];
                                $scope.isLoading = false;
                            } else {

                                if ($scope.pageVariables['isSubjectChanged']) {

                                    $scope.saveRequestSubject().then(function(result) {
                                        console.log('----' + result);
                                    });
                                }
                                $scope.pageVariables['isSubjectChanged'] = false;
                                $scope.pageVariables['editedFields'] = [];
                                $scope.pageVariables['isInlineEdit'] = false;
                                $scope.pageVariables['inlineEditField'] = '';
                                var isNewRecordCreated = false;
                                
                                if (result.split('##')[1] != '') {
                                    $scope.pageVariables['selectedRequestId'] = result.split('##')[1];
                                    isNewRecordCreated = true;
                                }

                                $scope.getRefRequestObject().then(function(result) {
                                    $scope.refRequestWrapper = result[0];

                                    if (isNewRecordCreated) {
                                        
                                        angular.forEach(
                                            $scope.refRequestWrapper['accRequests'],
                                            function(req) {
                                                
                                                if (req['accRequestId'] == $scope.pageVariables['selectedRequestId']) {
                                                    $scope.selectedRequestItem = angular.copy(req);
                                                    $scope.tempRequestItemToEdit = angular.copy(req);
                                                    $scope.pageVariables['isUr'] = false;
                                                }
                                            }
                                        );
                                    } else {

                                        if ($scope.pageVariables['isUr']) {
                                            
                                            angular.forEach(
                                                $scope.refRequestWrapper['unspecRequests'],
                                                function(req) {
                                                    
                                                    if (req['unspecRequestId'] == $scope.pageVariables['selectedRequestId']) {
                                                        $scope.selectedRequestItem = angular.copy(req);
                                                        $scope.tempRequestItemToEdit = angular.copy(req);
                                                    }
                                                }
                                            );
                                        } else {
                                            
                                            angular.forEach(
                                                $scope.refRequestWrapper['accRequests'],
                                                function(req) {
                                                    
                                                    if (req['accRequestId'] == $scope.pageVariables['selectedRequestId']) {
                                                        $scope.selectedRequestItem = angular.copy(req);
                                                        $scope.tempRequestItemToEdit = angular.copy(req);
                                                    }
                                                }
                                            );
                                        }
                                    }

                                    if (!($scope.selectedRequestItem['requestStatus'].includes('Give Up') || $scope.selectedRequestItem['requestStatus'] == 'No Longer Needed' || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Completed'  || $scope.selectedRequestItem['requestStatus'] == 'No Response'  || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Unavailable')) {
                                        $scope.pageVariables['isSelectedRequestActive'] = true;
                                    } else {
                                        $scope.pageVariables['isSelectedRequestActive'] = false;
                                    }

                                    if ($scope.requestItemToEdit['refTypeId'] != $scope.tempRequestItemToEdit['refTypeId']) {

                                        $scope.getFiltersInfo().then(function(result) {
                                            result = result.split('@@@');
                                            $scope.filterAttributesMap = JSON.parse(result[0]);
                                            $scope.requiredFiltersMap = JSON.parse(result[1]);
                                            $scope.filterNumbersMap = JSON.parse(result[2]);
                                            $scope.selectedFilterAttNamesMap = {};

                                            angular.forEach(
                                                Object.keys($scope.filterAttributesMap),
                                                function(filterId) {
                                                    $scope.selectedFilterAttNamesMap[filterId] = '';
                                                    var attNames = '';

                                                    angular.forEach(
                                                        $scope.filterAttributesMap[filterId],
                                                        function(att) {
                                                            
                                                            if (att['isSelected']) {
                                                                attNames = attNames == '' ? att['attName'] : attNames + ', ' + att['attName'];
                                                            }
                                                        }
                                                    );
                                                    $scope.selectedFilterAttNamesMap[filterId] = attNames;
                                                }
                                            );
                                        });
                                    }

                                    $scope.getAdditionalFieldsInfo($scope.selectedRequestItem['refTypeId'], $scope.selectedRequestItem['addInfoId']).then(function(result) {
                                        $scope.selectedRequestAdditionalInfo = result;
                                        $scope.tempSelectedRequestAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);

                                        if (Object.keys(result).length == 0) {
                                            $scope.pageVariables['isAddInfoPresent'] = false;
                                        } else {
                                            $scope.pageVariables['isAddInfoPresent'] = true;
                                        }

                                        if ($scope.pageVariables['selectedTabLeft'] == 'detail' && $scope.pageVariables['isUr']) {
                                            var tempRequestIds = [];
                                            tempRequestIds.push($scope.selectedRequestItem['unspecRequestId']);
                                            
                                            $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                                $scope.pageVariables['relatedNotesList'] = result;
                                                $scope.isLoading = false;
                                            });
                                        } else if ($scope.pageVariables['selectedTabLeft'] == 'detail' && !$scope.pageVariables['isUr']) {
                                            var tempRequestIds = [];
                                            tempRequestIds.push($scope.selectedRequestItem['accRequestId']);
                                            
                                            $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                                $scope.pageVariables['relatedNotesList'] = result;
                                                $scope.isLoading = false;
                                            });
                                        } else if ($scope.pageVariables['selectedTabLeft'] == 'request') {
                                            var tempRequestIds = [];
                                            tempRequestIds.push($scope.refRequestWrapper['refRequestId']);

                                            angular.forEach(
                                                $scope.refRequestWrapper['accRequests'],
                                                function(accReq) {
                                                    tempRequestIds.push(accReq['accRequestId']);
                                                }
                                            );

                                            angular.forEach(
                                                $scope.refRequestWrapper['unspecRequests'],
                                                function(unspecReq) {
                                                    tempRequestIds.push(unspecReq['unspecRequestId']);
                                                }
                                            );
                                            
                                            $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                                $scope.pageVariables['relatedNotesList'] = result;
                                                $scope.isLoading = false;
                                            });
                                        }
                                    });
                                });
                                $scope.requestItemToEdit = {};
                            }
                            console.log('---' + result);
                        });
                    }

                    $scope.removeCommunityInvite = function(cicId) {
                        $scope.cancelInlineEdit();
                        $scope.isLoading = true;
                        var processName = 'delete cic';

                        $scope.getPermissionsMessage(processName).then(function(result) {

                            if (result != '') {
                                $scope.pageVariables['isError'] = true;
                                $scope.pageVariables['errorMessage'] = result;
                                $scope.isLoading = false;
                            } else {

                                $scope.deleteCommunityInvite(cicId).then(function(result) {
                                    
                                    if (result != 'success') {
                                        $scope.pageVariables['isError'] = true;
                                        $scope.pageVariables['errorMessage'] = result;
                                        $scope.isLoading = false;
                                    } else {
                                        
                                        $scope.getCommunityInviteList().then(function(result) {
                                            $scope.pageVariables['communityInviteList'] = result;
                                            $scope.isLoading = false;
                                        });
                                    }
                                });
                            }
                        });
                    }

                    $scope.assignCommunityInvite = function(cicWrapper) {
                        $scope.cancelInlineEdit();
                        $scope.isLoading = true;
                        $scope.pageVariables['isError'] = false;
                        $scope.pageVariables['errorMessage'] = '';
                        var tempSelectedRequest = angular.copy($scope.selectedRequestItem);
                        tempSelectedRequest['deadline'] = $scope.convertToDate(tempSelectedRequest['deadline']);

                        $scope.assignCicToRequest(cicWrapper, tempSelectedRequest).then(function(result) {
                            
                            if (!result.startsWith('success')) {
                                $scope.pageVariables['isError'] = true;
                                $scope.pageVariables['errorMessage'] = result.split('---')[1];
                                $scope.isLoading = false;
                            } else {
                                $scope.pageVariables['selectedRequestId'] = result.split('##')[1];
                                
                                $scope.getRefRequestObject().then(function(result) {
                                    $scope.refRequestWrapper = result[0];

                                    angular.forEach(
                                        $scope.refRequestWrapper['accRequests'],
                                        function(req) {
                                            
                                            if (req['accRequestId'] == $scope.pageVariables['selectedRequestId']) {
                                                $scope.selectedRequestItem = angular.copy(req);
                                                $scope.tempRequestItemToEdit = angular.copy(req);
                                                $scope.pageVariables['isUr'] = false;
                                            }
                                        }
                                    );

                                    $scope.getAdditionalFieldsInfo($scope.selectedRequestItem['refTypeId'], $scope.selectedRequestItem['addInfoId']).then(function(result) {
                                        $scope.selectedRequestAdditionalInfo = result;
                                        $scope.tempSelectedRequestAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);

                                        if (Object.keys(result).length == 0) {
                                            $scope.pageVariables['isAddInfoPresent'] = false;
                                        } else {
                                            $scope.pageVariables['isAddInfoPresent'] = true;
                                        }
                                    });
                                    $scope.isLoading = false;
                                });
                            }
                        });
                    }

                    $scope.openNewNoteModal = function(oldNote) {
                        $scope.cancelInlineEdit();
                        $scope.pageVariables['showNewNoteModal'] = true;
                        $scope.newRefNote = {};
                        var tempDate = angular.copy($scope.todayDate);
                        tempDate = tempDate.split('-');
                        var tempDateFormat = angular.copy($scope.dateFormat);
                        tempDateFormat = tempDateFormat.replace('yyyy', tempDate[0]);

                        if (tempDateFormat.indexOf('MM') >= 0) {
                            tempDateFormat = tempDateFormat.replace('MM', tempDate[1]);
                        } else {
                            tempDateFormat = tempDateFormat.replace('M', tempDate[1]);
                        }

                        if (tempDateFormat.indexOf('dd') >= 0) {
                            tempDateFormat = tempDateFormat.replace('dd', tempDate[2]);
                        } else {
                            tempDateFormat = tempDateFormat.replace('d', tempDate[2]);
                        }

                        if ($scope.pageVariables['selectedTabLeft'] == 'request') {
                            $scope.newRefNote['refRequestId'] = $scope.refRequestWrapper['refRequestId'];
                        } else {
                            $scope.newRefNote['refRequestId'] = '';
                        }

                        if (oldNote != null && ('refNoteId' in oldNote) && oldNote['refNoteId'] != null && oldNote['refNoteId'] != '') {
                            $scope.newRefNote['refNoteId'] = oldNote['refNoteId'];
                            $scope.newRefNote['noteDate'] = oldNote['noteDate'];
                            //$scope.newRefNote['noteValue'] = oldNote['noteValue'];
                            CKEDITOR.instances['newRefNoteTxt'].setData(oldNote['noteValue']);
                        } else {
                            $scope.newRefNote['refNoteId'] = '';
                            $scope.newRefNote['noteDate'] = tempDateFormat;
                            //$scope.newRefNote['noteValue'] = '';
                            CKEDITOR.instances['newRefNoteTxt'].setData('');
                        }

                        if ($scope.pageVariables['selectedTabLeft'] == 'detail' && $scope.pageVariables['isUr']) {
                            $scope.newRefNote['relatedRecordId'] = $scope.selectedRequestItem['unspecRequestId'];
                        } else if ($scope.pageVariables['selectedTabLeft'] == 'detail' && !$scope.pageVariables['isUr']) {
                            $scope.newRefNote['relatedRecordId'] = $scope.selectedRequestItem['accRequestId'];
                        }
                    }

                    $scope.cancelNewNote = function() {
                        $scope.pageVariables['showNewNoteModal'] = false;
                        $scope.newRefNote = {};
                    }

                    $scope.saveNewNote = function() {
                        var tempNoteDateString = $scope.convertToDate($scope.newRefNote['noteDate']);
                        $scope.pageVariables['showNewNoteError'] = false;
                        $scope.pageVariables['newNoteErrorMsg'] = '';

                        if (typeof CKEDITOR.instances['newRefNoteTxt'] != 'undefined') {
                            $scope.newRefNote['noteValue'] = CKEDITOR.instances['newRefNoteTxt'].getData();
                        }

                        if ($scope.newRefNote['noteDate'] == null || $scope.newRefNote['noteDate'] == ''
                                || $scope.newRefNote['noteValue'] == null || $scope.newRefNote['noteValue'] == '') {
                            $scope.pageVariables['showNewNoteError'] = true;
                            $scope.pageVariables['newNoteErrorMsg'] = '{!$Label.ERROR_SELECT_REQUIRED_VALUE}';
                        }

                        if (tempNoteDateString == null) {
                            $scope.pageVariables['showNewNoteError'] = true;
                            $scope.pageVariables['newNoteErrorMsg'] = '{!$Label.Date_Invalid}' + ' ' + $scope.newRefNote['noteDate'];
                        }
                        
                        if (!$scope.pageVariables['showNewNoteError']) {
                            $scope.isLoading = true;
                            $scope.newRefNote['noteDate'] = tempNoteDateString;

                            $scope.createNote().then(function(result) {
                                
                                if (result == 'success') {
                                    $scope.pageVariables['showNewNoteModal'] = false;
                                    
                                    if ($scope.pageVariables['selectedTabLeft'] == 'detail' && $scope.pageVariables['isUr']) {
                                        var tempRequestIds = [];
                                        tempRequestIds.push($scope.selectedRequestItem['unspecRequestId']);
                                        
                                        $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                            $scope.pageVariables['relatedNotesList'] = result;
                                            $scope.isLoading = false;
                                        });
                                    } else if ($scope.pageVariables['selectedTabLeft'] == 'detail' && !$scope.pageVariables['isUr']) {
                                        var tempRequestIds = [];
                                        tempRequestIds.push($scope.selectedRequestItem['accRequestId']);
                                        
                                        $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                            $scope.pageVariables['relatedNotesList'] = result;
                                            $scope.isLoading = false;
                                        });
                                    } else if ($scope.pageVariables['selectedTabLeft'] == 'request') {
                                        var tempRequestIds = [];
                                        tempRequestIds.push($scope.refRequestWrapper['refRequestId']);

                                        angular.forEach(
                                            $scope.refRequestWrapper['accRequests'],
                                            function(accReq) {
                                                tempRequestIds.push(accReq['accRequestId']);
                                            }
                                        );

                                        angular.forEach(
                                            $scope.refRequestWrapper['unspecRequests'],
                                            function(unspecReq) {
                                                tempRequestIds.push(unspecReq['unspecRequestId']);
                                            }
                                        );
                                        
                                        $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                                            $scope.pageVariables['relatedNotesList'] = result;
                                            $scope.isLoading = false;
                                        });
                                    }
                                    $scope.newRefNote = {};
                                } else {
                                    $scope.pageVariables['showNewNoteError'] = true;
                                    $scope.pageVariables['newNoteErrorMsg'] = result.split('---')[1];
                                    $scope.isLoading = false;
                                }
                            });
                        }
                    }

                    $scope.openDeleteConfirmation = function(noteId) {
                        $scope.cancelInlineEdit();
                        $scope.pageVariables['showDeleteNoteModal'] = true;
                        $scope.pageVariables['noteIdToDelete'] = noteId;
                    }

                    $scope.cancelDelete = function() {
                        $scope.pageVariables['showDeleteNoteModal'] = false;
                        $scope.pageVariables['noteIdToDelete'] = '';
                    }

                    $scope.confirmDelete = function() {
                        $scope.isLoading = true;

                        $scope.deleteRefNote().then(function(result) {

                            if (result != 'success') {
                                $scope.pageVariables['isError'] = true;
                                $scope.pageVariables['errorMessage'] = result;
                            } else {
                                var index = -1;
                                
                                angular.forEach(
                                    $scope.pageVariables['relatedNotesList'],
                                    function(note) {
                                        
                                        if (note['refNoteId'] == $scope.pageVariables['noteIdToDelete']) {
                                            index = $scope.pageVariables['relatedNotesList'].indexOf(note);
                                        }
                                    }
                                );

                                if (index != -1) {
                                    $scope.pageVariables['relatedNotesList'].splice(index, 1);
                                }
                                $scope.pageVariables['showDeleteNoteModal'] = false;
                                $scope.pageVariables['noteIdToDelete'] = '';
                            }
                            $scope.isLoading = false;
                        });
                    }

                    $scope.viewAllRefNotes = function() {
                        $scope.isLoading = true;
                        var tempRequestIds = [];
                        tempRequestIds.push($scope.refRequestWrapper['refRequestId']);

                        angular.forEach(
                            $scope.refRequestWrapper['accRequests'],
                            function(accReq) {
                                tempRequestIds.push(accReq['accRequestId']);
                            }
                        );

                        angular.forEach(
                            $scope.refRequestWrapper['unspecRequests'],
                            function(unspecReq) {
                                tempRequestIds.push(unspecReq['unspecRequestId']);
                            }
                        );
                        
                        $scope.getRelatedNotes(tempRequestIds).then(function(result) {
                            $scope.pageVariables['allNotesList'] = result;
                            $scope.pageVariables['showAllNotesModal'] = true;
                            $scope.isLoading = false;
                        });
                    }

                    $scope.closeAllNotesModal = function() {
                        $scope.pageVariables['showAllNotesModal'] = false;
                        $scope.pageVariables['allNotesList'] = [];
                    }

                    $scope.toggleHitListPopover = function(hitList, index) {
                        
                        if (hitList['showPopover']) {
                            hitList['showPopover'] = false;
                        } else {
                            var svgDiv = document.getElementById('hlPopover' + index);
                            var svgContainer = svgDiv.getBoundingClientRect();
                            var tempPopoverStyle = {};
                            tempPopoverStyle['top'] = (svgContainer.top - 91) + 'px';
                            tempPopoverStyle['left'] = (svgContainer.left - 335) + 'px';
                            $scope.pageVariables['popoverStyle'] = angular.copy(tempPopoverStyle);
                            hitList['showPopover'] = true;
                        }
                    }

                    $scope.toggleCommunityInvitePopover = function(cic, index) {
                        
                        if (cic['showPopover']) {
                            cic['showPopover'] = false;
                        } else {
                            var svgDiv = document.getElementById('cicPopover' + index);
                            var svgContainer = svgDiv.getBoundingClientRect();
                            var tempPopoverStyle = {};
                            tempPopoverStyle['top'] = (svgContainer.top - 91) + 'px';
                            tempPopoverStyle['left'] = (svgContainer.left - 335) + 'px';
                            $scope.pageVariables['popoverStyle'] = angular.copy(tempPopoverStyle);
                            cic['showPopover'] = true;
                        }
                    }

                    $scope.openReleaseAllModal = function() {
                        $scope.cancelInlineEdit();
                        $scope.pageVariables['showReleaseAllModal'] = true;
                    }

                    $scope.cancelReleaseAll = function() {
                        $scope.pageVariables['showReleaseAllModal'] = false;
                    }

                    $scope.saveReleaseAll = function() {
                        $scope.isLoading = true;
                        var tempHitListIds = [];

                        angular.forEach(
                            $scope.pageVariables['hitListWrapperList'],
                            function(hl) {
                                
                                if (hl['disposition'] == '' && tempHitListIds.indexOf(hl['hitListId']) == -1) {
                                    tempHitListIds.push(hl['hitListId']);
                                }
                            }
                        );

                        $scope.releaseAllHitLists(tempHitListIds).then(function(result) {
                            
                            if (result != 'success') {
                                $scope.pageVariables['isError'] = true;
                                $scope.pageVariables['errorMessage'] = result.split('---')[1];
                                $scope.isLoading = false;
                            } else {
                                $scope.pageVariables['hitListWrapperList'] = [];
                                
                                $scope.getHitListRecords().then(function(result) {
                                    $scope.pageVariables['hitListWrapperList'] = result;
                                    $scope.isLoading = false;
                                });
                            }
                            $scope.pageVariables['showReleaseAllModal'] = false;
                        });
                    }

                    $scope.openHitListNoteModal = function(hitListWrapper) {
                        $scope.cancelInlineEdit();
                        $scope.pageVariables['showHitListNoteModal'] = true;
                        $scope.selectedHitListRecord = angular.copy(hitListWrapper);
                    }

                    $scope.cancelHitListNoteModal = function() {
                        $scope.pageVariables['showHitListNoteModal'] = false;
                        $scope.selectedHitListRecord = {};
                    }

                    //  REF-1519                    
					$scope.textLength = 0;
					jQuery("#limitCheck").hide();
					$scope.checkTextAreaLimit = function(notesValue) {
						$scope.pageVariables['isError'] = false;
                        $scope.pageVariables['errorMessage'] = '';
						if (JSON.stringify(notesValue).length > 225) {
							$scope.textLength = 257 - JSON.stringify(notesValue).length;
							if ($scope.textLength >= 0) {
								
								jQuery("#limitCheck").text($scope.textLength +' Remaining '); 
								jQuery("#limitCheck").css({background : '#f2cf5b'});
							} else {
								jQuery("#limitCheck").text(Math.abs($scope.textLength) + ' Over Limit'); 
								jQuery("#limitCheck").css({background : 'rgb(232, 3, 3)', color : 'white'});
								
							}
							jQuery("#limitCheck").show();
						}else {
							jQuery("#limitCheck").hide();
						}
					}

                    $scope.saveHitListNoteModal = function()    {
                    
                        if ($scope.selectedHitListRecord['notes'].length > 255) {
                            $scope.pageVariables['isError'] = true;
                            $scope.pageVariables['errorMessage'] = 'You can\'t use more than 255 characters';
                        } else { 
                            $scope.isLoading = true;

                            $scope.updateHitListNote().then(function(result) {
                                $scope.pageVariables['showHitListNoteModal'] = false;

                                if (result != 'success') {
                                    $scope.pageVariables['isError'] = true;
                                    $scope.pageVariables['errorMessage'] = result;
                                    $scope.isLoading = false;
                                } else {
                                    $scope.pageVariables['hitListWrapperList'] = [];
                                    
                                    $scope.getHitListRecords().then(function(result) {
                                        $scope.pageVariables['hitListWrapperList'] = result;
                                        $scope.isLoading = false;
                                    });
                                }
                            });
                        }
                    }

                    $scope.openAssignHitListModal = function(hitListWrapper) {
                        $scope.cancelInlineEdit();
                        $scope.pageVariables['showAssignHitListModal'] = true;
                        $scope.selectedHitListRecord = angular.copy(hitListWrapper);
                    }

                    $scope.assignHitList = function(isDispositionSet) {
                        $scope.isLoading = true;
                        $scope.pageVariables['showAssignHitListModal'] = false;
                        $scope.pageVariables['isError'] = false;
                        $scope.pageVariables['errorMessage'] = '';
                        var tempSelectedRequest = angular.copy($scope.selectedRequestItem);
                        tempSelectedRequest['deadline'] = $scope.convertToDate(tempSelectedRequest['deadline']);

                        $scope.assignHitRecordToRequest(tempSelectedRequest, isDispositionSet).then(function(result) {
                            
                            if (!result.startsWith('success')) {
                                $scope.pageVariables['isError'] = true;
                                $scope.pageVariables['errorMessage'] = result.split('---')[1];
                                $scope.isLoading = false;
                            } else {
                                $scope.pageVariables['selectedRequestId'] = result.split('##')[1];
                                
                                $scope.getRefRequestObject().then(function(result) {
                                    $scope.refRequestWrapper = result[0];

                                    angular.forEach(
                                        $scope.refRequestWrapper['accRequests'],
                                        function(req) {
                                            
                                            if (req['accRequestId'] == $scope.pageVariables['selectedRequestId']) {
                                                $scope.selectedRequestItem = angular.copy(req);
                                                $scope.tempRequestItemToEdit = angular.copy(req);
                                                $scope.pageVariables['isUr'] = false;
                                                $scope.pageVariables['isSuccess'] = true;
                                                var tempMsg = '{!$Label.Assign_Hit_List_Msg}';

                                                if ($scope.selectedHitListRecord['contactId'] == '') {
                                                    $scope.pageVariables['successMessage'] = '{!$Label.Account}' + ' ' + tempMsg.replace('@@@', $scope.selectedHitListRecord['accountName']);
                                                } else {
                                                    $scope.pageVariables['successMessage'] = '{!$Label.Contact}' + ' "' + $scope.selectedHitListRecord['contactName'] + '" with '
                                                                                                + tempMsg.replace('@@@', $scope.selectedHitListRecord['accountName']);
                                                }
                                            }
                                        }
                                    );

                                    $scope.getAdditionalFieldsInfo($scope.selectedRequestItem['refTypeId'], $scope.selectedRequestItem['addInfoId']).then(function(result) {
                                        $scope.selectedRequestAdditionalInfo = result;
                                        $scope.tempSelectedRequestAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);

                                        if (Object.keys(result).length == 0) {
                                            $scope.pageVariables['isAddInfoPresent'] = false;
                                        } else {
                                            $scope.pageVariables['isAddInfoPresent'] = true;
                                        }
                                    });
                                    $scope.pageVariables['hitListWrapperList'] = [];

                                    $scope.getHitListRecords().then(function(result) {
                                        $scope.pageVariables['hitListWrapperList'] = result;
                                        $scope.isLoading = false;
                                    });
                                });
                            }
                        });
                    }

                    $scope.openAddReminderModal = function(hitListWrapper) {
                        $scope.cancelInlineEdit();
                        $scope.pageVariables['showAddReminderModal'] = true;
                        $scope.selectedHitListRecord = angular.copy(hitListWrapper);
                        $scope.pageVariables['showHitListReminderError'] = false;
                        $scope.pageVariables['hitListReminderErrorMsg'] = '';
                        $scope.hitListReminder['hitListId'] = hitListWrapper['hitListId'];
                        $scope.hitListReminder['accountId'] = hitListWrapper['accountId'];
                        $scope.hitListReminder['contactId'] = hitListWrapper['contactId'];
                        $scope.hitListReminder['date'] = '';
                        $scope.hitListReminder['time'] = '00:00';
                        $scope.hitListReminder['subject'] = 'Hit List Reminder';
                        var projectUrl = $scope.baseUrl + '{!$Page.RefRequestProject}' + '?id=' + $scope.refRequestWrapper['refRequestId'];
                        
                        /*
                        if ($scope.pageVariables['isUr']) {
                            projectUrl += '&urId=' + $scope.selectedRequestItem['unspecRequestId'];
                        } else {
                            projectUrl += '&arId=' + $scope.selectedRequestItem['accRequestId'];
                        }
                        */
                        $scope.hitListReminder['notes'] = 'Hit List Reminder for \n'
                                                            + 'Account: ' + hitListWrapper['accountName'] + '\n';

                        if (hitListWrapper['contactId'] != '') {
                            $scope.hitListReminder['notes'] += 'Contact: ' + hitListWrapper['contactName'] + '\n';
                        }
                        $scope.hitListReminder['notes'] += projectUrl;
                        $scope.pageVariables['sendReminderMail'] = false;
                    }

                    $scope.cancelAddReminderModal = function() {
                        $scope.pageVariables['showAddReminderModal'] = false;
                        $scope.selectedHitListRecord = {};
                        $scope.hitListReminder = {};
                        $scope.pageVariables['showHitListReminderError'] = false;
                        $scope.pageVariables['hitListReminderErrorMsg'] = '';
                    }

                    $scope.saveAddReminderModal = function() {
                        $scope.pageVariables['showHitListReminderError'] = false;
                        $scope.pageVariables['hitListReminderErrorMsg'] = '';
                        var tempReminderDateString = $scope.convertToDate($scope.hitListReminder['date']);
                        var tempTodayDate = new Date($scope.todayDate);
                        var tempReminderDate = new Date(tempReminderDateString);

                        if ($scope.hitListReminder['date'] == '' || $scope.hitListReminder['subject'] == '') {
                            $scope.pageVariables['showHitListReminderError'] = true;
                            $scope.pageVariables['hitListReminderErrorMsg'] = '{!$Label.ERROR_SELECT_REQUIRED_VALUE}';
                        }

                        if (tempReminderDateString == null) {
                            $scope.pageVariables['showHitListReminderError'] = true;
                            $scope.pageVariables['hitListReminderErrorMsg'] = '{!$Label.Date_Invalid}' + ' ' + $scope.hitListReminder['date'];
                        } else {
                            $scope.hitListReminder['date'] = tempReminderDateString;
                        }

                        if (tempReminderDate < tempTodayDate) {
                            $scope.pageVariables['showHitListReminderError'] = true;
                            $scope.pageVariables['hitListReminderErrorMsg'] = 'Reminder date must be a future date.';
                        }

                        if (!$scope.pageVariables['showHitListReminderError']) {
                            $scope.isLoading = true;
                            
                            $scope.createReminder().then(function(result) {
                                
                                if (result.startsWith('success')) {
                                    $scope.pageVariables['isSuccess'] = true;
                                    $scope.pageVariables['successMessage'] = 'Reminder added successfully.';
                                    $scope.pageVariables['showAddReminderModal'] = false;
                                } else {
                                    $scope.pageVariables['isError'] = true;
                                    $scope.pageVariables['errorMessage'] = result.split('---')[1];
                                }
                                $scope.isLoading = false;
                            });
                        }
                    }

                    $scope.openDispositionModal = function(hitListWrapper) {
                        $scope.cancelInlineEdit();
                        $scope.pageVariables['showDispositionModal'] = true;
                        $scope.selectedHitListRecord = angular.copy(hitListWrapper);
                    }

                    $scope.cancelDispositionModal = function(hitListWrapper) {
                        $scope.pageVariables['showDispositionModal'] = false;
                        $scope.selectedHitListRecord = {};
                    }

                    $scope.saveDispositionModal = function(hitListWrapper,dispositionValue) {
                        $scope.isLoading = true;
                        $scope.pageVariables['showDispositionModal'] = false;
                        $scope.pageVariables['isError'] = false;
                        $scope.pageVariables['errorMessage'] = '';
                        //REF-2620
                        $scope.selectedHitListRecord = angular.copy(hitListWrapper);
                        $scope.selectedHitListRecord['disposition'] = dispositionValue;

                        var tempSelectedRequest = angular.copy($scope.selectedRequestItem);
                        tempSelectedRequest['deadline'] = $scope.convertToDate(tempSelectedRequest['deadline']);

                        $scope.dispositionHitList(tempSelectedRequest).then(function(result) {
                            
                            if (!result.startsWith('success')) {
                                $scope.pageVariables['isError'] = true;
                                $scope.pageVariables['errorMessage'] = result.split('---')[1];
                                $scope.isLoading = false;
                            } else if (result == 'success') {
                                $scope.pageVariables['hitListWrapperList'] = [];

                                $scope.getHitListRecords().then(function(result) {
                                    $scope.pageVariables['hitListWrapperList'] = result;
                                    $scope.isLoading = false;
                                });
                            } else {
                                $scope.pageVariables['selectedRequestId'] = result.split('##')[1];
                                
                                $scope.getRefRequestObject().then(function(result) {
                                    $scope.refRequestWrapper = result[0];

                                    angular.forEach(
                                        $scope.refRequestWrapper['accRequests'],
                                        function(req) {
                                            
                                            if (req['accRequestId'] == $scope.pageVariables['selectedRequestId']) {
                                                $scope.selectedRequestItem = angular.copy(req);
                                                $scope.tempRequestItemToEdit = angular.copy(req);
                                                $scope.pageVariables['isUr'] = false;
                                                $scope.pageVariables['isSuccess'] = true;
                                                var tempMsg = '{!$Label.Assign_Hit_List_Msg}';

                                                if ($scope.selectedHitListRecord['contactId'] == '') {
                                                    $scope.pageVariables['successMessage'] = '{!$Label.Account}' + ' ' + tempMsg.replace('@@@', $scope.selectedHitListRecord['accountName']);
                                                } else {
                                                    $scope.pageVariables['successMessage'] = '{!$Label.Contact}' + ' "' + $scope.selectedHitListRecord['accountName'] + '" with '
                                                                                                + tempMsg.replace('@@@', $scope.selectedHitListRecord['accountName']);
                                                }
                                            }
                                        }
                                    );

                                    $scope.getAdditionalFieldsInfo($scope.selectedRequestItem['refTypeId'], $scope.selectedRequestItem['addInfoId']).then(function(result) {
                                        $scope.selectedRequestAdditionalInfo = result;
                                        $scope.tempSelectedRequestAdditionalInfo = angular.copy($scope.selectedRequestAdditionalInfo);

                                        if (Object.keys(result).length == 0) {
                                            $scope.pageVariables['isAddInfoPresent'] = false;
                                        } else {
                                            $scope.pageVariables['isAddInfoPresent'] = true;
                                        }
                                    });
                                    $scope.pageVariables['hitListWrapperList'] = [];

                                    $scope.getHitListRecords().then(function(result) {
                                        $scope.pageVariables['hitListWrapperList'] = result;
                                        $scope.isLoading = false;
                                    });
                                });
                            }
                        });
                    }

                    $scope.openPostToCommunityModal = function() {
                        
                        if ($scope.pageVariables['alreadyPostedRefTypes'].indexOf($scope.selectedRequestItem['refTypeId']) >= 0) {
                            $scope.pageVariables['isError'] = true;
                            $scope.pageVariables['errorMessage'] = '{!$Label.The_Request_has_already_been_posted}';
                        } else {
                            $scope.cancelInlineEdit();
                            $scope.isLoading = true;
                            var processName = 'post to community';
                            $scope.communityFilterAttNamesMap = angular.copy($scope.selectedFilterAttNamesMap);

                            $scope.getPermissionsMessage(processName).then(function(result) {

                                if (result != '') {
                                    $scope.pageVariables['showCommunityError'] = true;
                                    $scope.pageVariables['communityErrorMsg'] = result;
                                }
                            });
                            $scope.pageVariables['includeReqTypeInCommunity'] = true;
                            $scope.pageVariables['communityDeadline'] = angular.copy($scope.selectedRequestItem['deadline']);
                            $scope.pageVariables['communityWith'] = angular.copy($scope.refRequestWrapper['oppAccountName']);
                            $scope.pageVariables['communityDetails'] = '';
                            var filtersClause = '';
                            var refTypesClause = '';
                            var filterAttMap = {};
                            var refTypeNo = $scope.refTypesMap[$scope.selectedRequestItem['refTypeId']]['refNo'];

                            if ($scope.pageVariables['includeReqTypeInCommunity'] && refTypeNo != '') {
                                refTypesClause = 'AND ReferenceabilityType_Ids1__c LIKE \'%' + refTypeNo + '%\'';
                            }

                            angular.forEach(
                                Object.keys($scope.filterAttributesMap),
                                function(filterId) {
                                    filterAttMap[filterId] = [];

                                    angular.forEach(
                                        $scope.filterAttributesMap[filterId],
                                        function(attWrapper) {

                                            if (attWrapper['isSelected']) {
                                                filterAttMap[filterId].push(attWrapper['attId']);
                                            }
                                        }
                                    );

                                    if (filterAttMap[filterId].length == 0) {
                                        delete filterAttMap[filterId];
                                    }
                                }
                            );

                            angular.forEach(
                                Object.keys(filterAttMap),
                                function(filterId) {

                                    if (filterAttMap[filterId].length > 0) {
                                        var filterNo = $scope.filterNumbersMap[filterId];

                                        if (filtersClause == '') {
                                            filtersClause = ' Label_Ids1__c LIKE \'%' + filterNo + '%\' OR Label_Ids2__c LIKE \'%' + filterNo + '%\'';
                                        } else {
                                            filtersClause += ' OR Label_Ids1__c LIKE \'%' + filterNo + '%\' OR Label_Ids2__c LIKE \'%' + filterNo + '%\'';
                                        }
                                    }
                                }
                            );

                            if (filtersClause != '') {
                                filtersClause = 'AND ( ' + filtersClause + ' )';
                            }

                            $scope.getCommunityMatchingMembers(filtersClause, refTypesClause, filterAttMap).then(function(result) {
                                result = result.split('@@@');
                                $scope.pageVariables['matchingMembersCount'] = result[0];
                                $scope.communityUserMap = JSON.parse(result[1]);
                                $scope.pageVariables['showPostToCommunityModal'] = true;
                                $scope.isLoading = false;
                            });
                        }
                    }

                    $scope.handleIncludeChange = function(isInclude) {
                        $scope.pageVariables['matchingMembersLoading'] = true;
                        var filtersClause = '';
                        var refTypesClause = '';
                        var filterAttMap = {};
                        var refTypeNo = $scope.refTypesMap[$scope.selectedRequestItem['refTypeId']]['refNo'];

                        if (isInclude && refTypeNo != '') {
                            refTypesClause = 'AND ReferenceabilityType_Ids1__c LIKE \'%' + refTypeNo + '%\'';
                        }

                        angular.forEach(
                            Object.keys($scope.filterAttributesMap),
                            function(filterId) {
                                filterAttMap[filterId] = [];

                                angular.forEach(
                                    $scope.filterAttributesMap[filterId],
                                    function(attWrapper) {

                                        if (attWrapper['isSelected']) {
                                            filterAttMap[filterId].push(attWrapper['attId']);
                                        }
                                    }
                                );

                                if (filterAttMap[filterId].length == 0) {
                                    delete filterAttMap[filterId];
                                }
                            }
                        );

                        angular.forEach(
                            Object.keys(filterAttMap),
                            function(filterId) {

                                if (filterAttMap[filterId].length > 0) {
                                    var filterNo = $scope.filterNumbersMap[filterId];

                                    if (filtersClause == '') {
                                        filtersClause = ' Label_Ids1__c LIKE \'%' + filterNo + '%\' OR Label_Ids2__c LIKE \'%' + filterNo + '%\'';
                                    } else {
                                        filtersClause += ' OR Label_Ids1__c LIKE \'%' + filterNo + '%\' OR Label_Ids2__c LIKE \'%' + filterNo + '%\'';
                                    }
                                }
                            }
                        );

                        if (filtersClause != '') {
                            filtersClause = 'AND ( ' + filtersClause + ' )';
                        }

                        $scope.getCommunityMatchingMembers(filtersClause, refTypesClause, filterAttMap).then(function(result) {
                            result = result.split('@@@');
                            $scope.pageVariables['matchingMembersCount'] = result[0];
                            $scope.communityUserMap = JSON.parse(result[1]);
                            $scope.pageVariables['matchingMembersLoading'] = false;
                        });
                    }

                    $scope.cancelPostToCommunityModal = function() {
                        $scope.pageVariables['showPostToCommunityModal'] = false;
                        $scope.pageVariables['showCommunityError'] = false;
                        $scope.pageVariables['communityErrorMsg'] = '';
                        $scope.pageVariables['showNotifyCommunityMemberModal'] = false;
                    }

                    $scope.savePostToCommunityModal = function() {
                        $scope.pageVariables['showCommunityError'] = false;
                        $scope.pageVariables['communityErrorMsg'] = '';
                        
                        if ($scope.pageVariables['matchingMembersCount'] == '0') {
                            $scope.pageVariables['showCommunityError'] = true;
                            $scope.pageVariables['communityErrorMsg'] = '{!$Label.Community_Members_is_0}';
                        } else if ($scope.pageVariables['alreadyPostedRefTypes'].indexOf($scope.selectedRequestItem['refTypeId']) >= 0) {
                            $scope.pageVariables['showCommunityError'] = true;
                            $scope.pageVariables['communityErrorMsg'] = '{!$Label.The_Request_has_already_been_posted}';
                        } else {

                            if ($scope.pageVariables['communityDeadline'] == ''
                                    || $scope.pageVariables['communityDetails'] == ''
                                    || $scope.pageVariables['communityWith'] == '') {
                                $scope.pageVariables['showCommunityError'] = true;
                                $scope.pageVariables['communityErrorMsg'] = '{!$Label.ERROR_SELECT_REQUIRED_VALUE}';
                            }
                            var tempDeadlineString = $scope.convertToDate($scope.pageVariables['communityDeadline']);
                            var tempTodayDate = new Date($scope.todayDate);
                            var tempDeadlineDate = new Date(tempDeadlineString);

                            if (tempDeadlineDate < tempTodayDate) {
                                $scope.pageVariables['showCommunityError'] = true;
                                $scope.pageVariables['communityErrorMsg'] = '{!$Label.ReferenceUse_invalid_past_Deadline_date}';
                            }

                            if (tempDeadlineString == null) {
                                $scope.pageVariables['showCommunityError'] = true;
                                $scope.pageVariables['communityErrorMsg'] = '{!$Label.Date_Invalid}' + ' ' + $scope.pageVariables['communityDeadline'];
                            }

                            if (!$scope.pageVariables['showCommunityError']) {
                                $scope.isLoading = true;
                                var processName = 'post to community';

                                $scope.getPermissionsMessage(processName).then(function(result) {

                                    if (result != '') {
                                        $scope.pageVariables['showCommunityError'] = true;
                                        $scope.pageVariables['communityErrorMsg'] = result;
                                    } else {
                                        $scope.pageVariables['communityDeadline'] = tempDeadlineString;
                                        $scope.pageVariables['showPostToCommunityModal'] = false;
                                        $scope.pageVariables['showNotifyCommunityMemberModal'] = true;
                                    }
                                    $scope.isLoading = false;
                                });
                            }
                        }
                    }

                    $scope.prepareCommunityEmail = function() {
                        $scope.communityEmailWrapper = {};

                        if (!$scope.pageVariables['isUr']) {
                            $scope.communityEmailWrapper['accountId'] = $scope.selectedRequestItem['accountId'];
                        }
                        $scope.communityEmailWrapper['deadline'] = angular.copy($scope.pageVariables['communityDeadline']);
                        $scope.communityEmailWrapper['withValue'] = angular.copy($scope.pageVariables['communityWith']);
                        $scope.communityEmailWrapper['details'] = angular.copy($scope.pageVariables['communityDetails']);
                        $scope.communityEmailWrapper['refTypeId'] = $scope.selectedRequestItem['refTypeId'];

                        if ($scope.pageVariables['includeReqTypeInCommunity']) {
                            $scope.communityEmailWrapper['refTypeName'] = $scope.selectedRequestItem['refTypeName'];
                        } else {
                            $scope.communityEmailWrapper['refTypeName'] = 'n/a';
                        }
                        $scope.communityEmailWrapper['subject'] = 'New Reference Opportunity Available';
                        $scope.communityEmailWrapper['body'] = angular.copy($scope.pageVariables['communityEmailBody']);
                        $scope.communityEmailWrapper['body'] = $scope.communityEmailWrapper['body'].replace('!Community_Invite__c.Referenceability_Type_f__c', $scope.selectedRequestItem['refTypeName']);
                        $scope.communityEmailWrapper['body'] = $scope.communityEmailWrapper['body'].replace('!Community_Invite__c.Community_Participate_With__c', $scope.pageVariables['communityWith']);
                        $scope.communityEmailWrapper['body'] = $scope.communityEmailWrapper['body'].replace('!Community_Invite__c.Community_Participate_Deadline__c', $scope.pageVariables['communityDeadline']);
                        $scope.communityEmailWrapper['body'] = $scope.communityEmailWrapper['body'].replace('!Community_Invite__c.Community_Participate_Details__c', $scope.pageVariables['communityDetails']);
                    }

                    $scope.editCommunityMail = function() {
                        $scope.pageVariables['showCommunityEmailModal'] = true;
                        $scope.pageVariables['showNotifyCommunityMemberModal'] = false;
                        $scope.prepareCommunityEmail();
                    }

                    $scope.cancelSendMailCommunity = function() {
                        $scope.pageVariables['showCommunityEmailModal'] = false;
                        $scope.pageVariables['showNotifyCommunityMemberModal'] = false;
                        $scope.pageVariables['showPostToCommunityModal'] = true;
                    }

                    $scope.sendCommunityMail = function(isSendClicked, isFromEditModal) {
                        $scope.pageVariables['showNotifyCommunityMemberModal'] = false;
                        $scope.pageVariables['showCommunityEmailModal'] = false;
                        $scope.isLoading = true;
                        var tempFilterAttMap = {};

                        if (!isFromEditModal) {
                            $scope.prepareCommunityEmail();
                        }

                        angular.forEach(
                            Object.keys($scope.filterAttributesMap),
                            function(filterId) {
                                tempFilterAttMap[filterId] = [];

                                angular.forEach(
                                    $scope.filterAttributesMap[filterId],
                                    function(att) {
                                        
                                        if (att['isSelected'] && tempFilterAttMap[filterId].indexOf(att['attId']) == -1) {
                                            tempFilterAttMap[filterId].push(att['attId']);
                                        }
                                    }
                                );

                                if (tempFilterAttMap[filterId].length == 0) {
                                    delete tempFilterAttMap[filterId];
                                }
                            }
                        );

                        $scope.createCommunityInvite(isSendClicked, tempFilterAttMap).then(function(result) {

                            if (result != 'success') {
                                $scope.isLoading = false;
                                $scope.pageVariables['isError'] = true;
                                $scope.pageVariables['errorMessage'] = result.split('---')[1];
                            } else {

                                $scope.getAlreadyPostedRefTypes().then(function(result) {
                                    $scope.pageVariables['alreadyPostedRefTypes'] = result;
                                    $scope.init();
                                });
                            }
                        });
                    }

                    $scope.openRefMatch = function() {
                        $scope.cancelInlineEdit();
                        
                        if ((typeof sforce != 'undefined') && (sforce != null) && ('one' in sforce)) {
                            $scope.pageVariables['matchPageUrl'] = '{!URLFOR($Page.RfSearchLightning)}' + '&isRefMatch=true'
                                                                    + '&rrId=' + $scope.refRequestWrapper['refRequestId'];
                        } else {
                        	var rfSearchLightningPageURL = '{!URLFOR($Page.RfSearchLightning)}';
                        	if(rfSearchLightningPageURL.indexOf('?isdtp=p1') >= 0)  {
                            	rfSearchLightningPageURL = rfSearchLightningPageURL.substring(0, rfSearchLightningPageURL.indexOf('?'));
                            } 
                            
                            /** Add the URL parameter isdtp=p1 at the end of the iframes src attribute. 
                              * Having isdtp=p1 in the URL of any Visualforce page seems to enforce 
                              *	the presence of sforce.one. 
                            */
                            rfSearchLightningPageURL += '?isdtp=p1';
                            $scope.pageVariables['matchPageUrl'] = rfSearchLightningPageURL + '&isRefMatch=true'
                                                                    + '&rrId=' + $scope.refRequestWrapper['refRequestId'];    
                        }

                        if ($scope.pageVariables['isUr']) {
                            $scope.pageVariables['matchPageUrl'] = $scope.pageVariables['matchPageUrl'] + '&urId=' + $scope.selectedRequestItem['unspecRequestId'];
                        } else {
                            $scope.pageVariables['matchPageUrl'] = $scope.pageVariables['matchPageUrl'] + '&arId=' + $scope.selectedRequestItem['accRequestId'];
                        }
                        $scope.pageVariables['showMatchModal'] = true;
                    }

                    $scope.closeRefMatch = function(isFromAssign) {
                    	$scope.isModalOpenedInsideIframe = false;
                    	
                        //REF-1964
                        localStorage.setItem("selectedAdvocates", JSON.stringify($scope.pageVariables['selectedAdvocates']));

                        $scope.pageVariables['showMatchModal'] = false;
                        $scope.pageVariables['matchPageUrl'] = '';
                        $scope.isLoading = true;

                        $scope.getHitListRecords().then(function(result) {
                            $scope.pageVariables['hitListWrapperList'] = result;
                            
                            if (!isFromAssign) {
                                $scope.isLoading = false;
                            }
                        });
                    }
                    
                    //REF-1964               
                    $scope.getRelatedCICByChallengeId = function(challengeId) {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.getRelatedCICByChallengeId}',
                            JSON.stringify(challengeId),
                            function(result, event) {
                                console.log(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }
                    
                    $scope.openHubMatch = function() {
                        console.log('$scope.refRequestWrapper');
                        console.log($scope.refRequestWrapper);
                        console.log($scope.pageVariables);
                        $scope.cancelInlineEdit();
                        
                        if ((typeof sforce != 'undefined') && (sforce != null)) {
                            $scope.pageVariables['matchPageUrl'] = '{!URLFOR($Page.RfSearchLightning)}' + '&isRefMatch=true' + '&isHubMatch=true'
                                                                    + '&rrId=' + $scope.refRequestWrapper['refRequestId'];
                        } else {
                            $scope.pageVariables['matchPageUrl'] = '{!URLFOR($Page.RfSearchLightning)}' + '?isRefMatch=true' + '&isHubMatch=true'
                                                                    + '&rrId=' + $scope.refRequestWrapper['refRequestId'];
                        }

                        if ($scope.pageVariables['isUr']) {
                            $scope.pageVariables['matchPageUrl'] = $scope.pageVariables['matchPageUrl'] + '&urId=' + $scope.selectedRequestItem['unspecRequestId'];
                        } else {
                            $scope.pageVariables['matchPageUrl'] = $scope.pageVariables['matchPageUrl'] + '&arId=' + $scope.selectedRequestItem['accRequestId'];
                        }
                        $scope.isHubMatch = true;
                        $scope.pageVariables['showMatchModal'] = true;
                    }
                    
                    $scope.getSelectedAdvocates = function() {
                        var selectedAdvocates = JSON.parse(localStorage.getItem("selectedAdvocates"));
                        var tempPIW = {};
                        
                        if (selectedAdvocates != null && selectedAdvocates.length > 0) {
                            $scope.pageVariables['showMatchModal'] = false;
                            $scope.pageVariables['matchPageUrl'] = '';
                            $scope.pageVariables['selectedAdvocates'] = selectedAdvocates;
                            tempPIW['selectedContacts'] = selectedAdvocates;
                            tempPIW['unspecifiedRequestId'] = $scope.pageVariables['selectedRequestId'];
                            $scope.postToInfluitiveWrapperMap[tempPIW['unspecifiedRequestId']] = tempPIW;
                            console.log($scope.postToInfluitiveWrapperMap);
                        } else {
                        	console.log("no advocates selected!!");
                        }
                    }
                    
                    $scope.removeSelectedAdvocate = function(advocate) {
                        console.log(advocate);
                        var tempList = $scope.pageVariables['selectedAdvocates'];
                        for (var i=0; i<$scope.pageVariables['selectedAdvocates'].length; i++) {
                            
                            if ($scope.pageVariables['selectedAdvocates'][i].contactId == advocate.contactId) {
                                   tempList.splice(i,1);
                            }
                        }
                        $scope.pageVariables['selectedAdvocates'] = tempList;
                        localStorage.setItem("selectedAdvocates", JSON.stringify($scope.pageVariables['selectedAdvocates']));
                       console.log($scope.pageVariables['selectedAdvocates']);
                    }
                    
                    $scope.postToInfluitive = function() {
                        $scope.cancelInlineEdit();
                        $scope.isLoading = true;
                        $scope.pageVariables['postToInfluitiveWrapper'] = {};
                        
                        //REF-2302 On Hold as Influitive may include this in future 
                        //$scope.pageVariables['postToInfluitiveWrapper']['targetChallengeTOAllAdvocates'] = false;
                        
                        $scope.pageVariables['showPostToInfluitiveModal'] = true;
                        $scope.pageVariables['showInfluitiveError'] = false;
                        $scope.pageVariables['influitiveErrorMsg'] = '';
                        $scope.isLoading = false;
                    }
                    
                    $scope.cancelPostToInfluitiveModal = function() {
                        $scope.pageVariables['showPostToInfluitiveModal'] = false;
						$scope.pageVariables['showInfluitiveError'] = false;
                        $scope.pageVariables['influitiveErrorMsg'] = '';
                    }
                    
                    $scope.savePostToInfluitiveModal = function() {
                        $scope.pageVariables['showInfluitiveError'] = false;
                        $scope.pageVariables['influitiveErrorMsg'] = '';
                        
                        //REF-2302 On Hold as Influitive may include this in future 
                        /* if ($scope.pageVariables['selectedAdvocates'].length == 0 && 
                            $scope.pageVariables['postToInfluitiveWrapper']['targetChallengeTOAllAdvocates'] == false) {
                            $scope.pageVariables['showInfluitiveError'] = true;
                            $scope.pageVariables['influitiveErrorMsg'] = '{!$Label.Error_Advocates_Not_Included_In_Challenge}';
                            
                        } else*/ 
                        
                        if ($scope.pageVariables['postToInfluitiveWrapper']['participantLimit'] <= 0) {
                            $scope.pageVariables['showInfluitiveError'] = true;
                            $scope.pageVariables['influitiveErrorMsg'] = 'Partcipant Limit must be > 0';
                            
                        } else {
                            var tempEndAtString = $scope.convertToDate($scope.selectedRequestItem['deadline']);
                            var tempTodayDate = new Date($scope.todayDate);
                            var tempEndAt = new Date(tempEndAtString);
                            console.log(tempEndAtString);
                            
                            if (tempEndAtString == null || tempEndAtString == '') {
                                $scope.pageVariables['showInfluitiveError'] = true;
                                $scope.pageVariables['influitiveErrorMsg'] = 'Deadline required';
                                
                            } else if (tempEndAt < tempTodayDate) {
                                $scope.pageVariables['showInfluitiveError'] = true;
                                $scope.pageVariables['influitiveErrorMsg'] = 'Deadline cannot be less than today';
                            } else {
                            	$scope.pageVariables['postToInfluitiveWrapper']['endAt'] = tempEndAtString;
                            }
                        }
                        
                        if (!$scope.pageVariables['showInfluitiveError']) {
                            $scope.isLoading = true;
                            
                            /* var processName = 'post to community';

                                $scope.getPermissionsMessage(processName).then(function(result) {

                                    if (result != '') {
                                        $scope.pageVariables['showInfluitiveError'] = true;
                                        $scope.pageVariables['influitiveErrorMsg'] = result;
                                    } else {
                                        $scope.pageVariables['communityDeadline'] = tempDeadlineString;
                                        $scope.pageVariables['showPostToCommunityModal'] = false;
                                        $scope.pageVariables['showNotifyCommunityMemberModal'] = true;
                                    }
                                    $scope.isLoading = false;
                                });*/
                            
                            $scope.pageVariables['postToInfluitiveWrapper']['advocatesId'] = [];
                            $scope.pageVariables['postToInfluitiveWrapper']['listOfCIC'] = [];
                            
                            for (var i=0; i<$scope.pageVariables['selectedAdvocates'].length; i++) {
                                $scope.pageVariables['postToInfluitiveWrapper']['advocatesId'][i] = $scope.pageVariables['selectedAdvocates'][i].contactId;
                            }
                            $scope.pageVariables['postToInfluitiveWrapper']['unspecifiedRequestId'] = $scope.pageVariables['selectedRequestId'];                            
                            $scope.pageVariables['postToInfluitiveWrapper']['accountName'] = 'Unspecified';
                            $scope.pageVariables['postToInfluitiveWrapper']['reftypeId'] = $scope.selectedRequestItem['refTypeId'];
                            $scope.selectedRequestItem['refTypeName'] = $scope.refTypesMap[$scope.selectedRequestItem['refTypeId']]['refTypeName'];
                            console.log($scope.pageVariables['postToInfluitiveWrapper']);
                            
                            $scope.postChallengeInInfluitive().then(function(result) {
                                $scope.isLoading = false;
                                result = $scope.parseResult(result);
                                result = JSON.parse(result);
                                console.log(result);
                                
                                if (result.challengeId != null) {
                                    console.log('RESPONSE CHALLENGE!!');
                                    $scope.pageVariables['postToInfluitiveWrapper'] = result;
                                    $scope.selectedRequestItem['challengeId'] = $scope.pageVariables['postToInfluitiveWrapper'].challengeId;
                                    $scope.pageVariables['hasChallengeId'] = true;
                                    $scope.selectedRequestItem['challengeStatus'] = 'Unpublish';
                                    $scope.selectedRequestItem['status'] = "In Progress";
                                    $scope.pageVariables['postToInfluitiveWrapper']['selectedContacts'] = [];
                                    $scope.pageVariables['selectedAdvocates'] = [];
                                    localStorage.setItem("selectedAdvocates", JSON.stringify($scope.pageVariables['selectedAdvocates']));
                                    $scope.pageVariables['showPostToInfluitiveModal'] = false;
                                    $scope.isLoading = false;
                                } else {
                                	$scope.pageVariables['showPostToInfluitiveModal'] = false;
                                    $scope.isLoading = false;
                                	alert('Error : ' + result.error);
                                }
                            });
                        }                        
                    }
                    
                    
                    
                    $scope.postChallengeInInfluitive = function() {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.postChallengeInInfluitive}',
                            JSON.stringify($scope.pageVariables['postToInfluitiveWrapper']),
                            function(result, event) {
                                console.log(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }
                    
                    $scope.updateChallengeStatus = function(status, URId) {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.updateChallengeStatus}',
                            status, URId,
                            function(result, event) {
                                console.log(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }
                    
                    $scope.assignAdvocate = function(conId) {
                        $scope.isLoading = true;
                        var URId = $scope.pageVariables['selectedRequestId'];
                        var selectedUR = {};
                        
                        $scope.assignAdvocateToChallenge(conId,URId).then(function(result) {
                            if (result != '') {
                                alert('ERROR:'+result)
                                console.log('ERROR:'+result);
                                $scope.isLoading = false;
                            } else {
                                $scope.init();
                                $scope.isLoading = false;
                                //Archive challenge at HUB
                                /* $scope.updateChallengeStatus('Archive',$scope.pageVariables['selectedRequestId'])
                                .then(function(result) {
                                    console.log("Archive challenge");
                                    $scope.init();
                                    
                                    
                                    if (result == '') {
                                    } else {
                                        alert('ERROR: Could not Archive challenge at HUB');
                                    }
                                });*/
                            }
                        });
                    }
                    
                    $scope.assignAdvocateToChallenge = function(conId,URId) {
                    	var deferred = $q.defer();
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RefRequestProjectControllerSLDS.assignAdvocateToChallenge}',
                            conId,URId,
                            function(result, event) {
                                console.log(result);
                                deferred.resolve(result);
                            }
                        );
                        return deferred.promise;
                    }
                    
                    //REF-2132
                    $scope.fileList = [];
                    $scope.filesElement = {};
                    
                    $scope.openInputFile = function(e) {
                        filesElement = document.getElementById('multiFiles');
                        filesElement.click();
                    }
                    
                    $scope.handleFiles = function(e) {
                        $scope.$apply();
                        $scope.isLoading = true;
                        $scope.$apply();
                        $scope.fileList = [];
                        $scope.$apply(function () {
                            
                            for (var i = 0; i < e.files.length; i++) {
                                $scope.fileList.push(e.files[i])
                            }
                            
                        });
                        $scope.uploadMultipleFiles();
                    }
                    
                    $scope.uploadMultipleFiles = function() {
                        var exitCount = 0;
                           
                        for (let i=0;i<$scope.fileList.length;i++) {
                            var file = $scope.fileList[i];
                            var fileReader = new FileReader();
                            fileReader.file = file;
                            
                            fileReader.onloadend = function(e) {
                                exitCount ++;
                                var cv = new sforce.SObject("ContentVersion");
                                cv.Title = this.file.name;
                                cv.PathOnClient = this.file.name;
                                cv.FirstPublishLocationId = '{!JSENCODE(firstPublishLocationIdForCV)}';
                                cv.ContentLocation = 'S';
                                
                                var binary = "";
                                var bytes = new Uint8Array(e.target.result);
                                var length = bytes.byteLength;
                                
                                for (var i = 0; i < length; i++) {
                                    binary += String.fromCharCode(bytes[i]);
                                }
                                cv.VersionData = new sforce.Base64Binary(binary);
                                
                                var result = sforce.connection.create([cv]);
                                
                                if (result[0].getBoolean("success")) {
                                    console.log("new CV created with id " + result[0].id);
                                    var tempList = [];
                                    tempList.push(result[0].id);
                                    var queryResult = sforce.connection.query('SELECT Id,ContentDocumentId FROM ContentVersion WHERE Id = \'' + result[0].id + '\'');
                                    var records = queryResult.getArray("records");
                                    var cdl = new sforce.SObject("ContentDocumentLink");
                                    console.log("docid: " + records[0].ContentDocumentId);
                                    cdl.ContentDocumentId = records[0].ContentDocumentId;
                                    cdl.LinkedEntityId = '{!JSENCODE(refRequestId)}';
                                    cdl.ShareType = 'V';
                                    cdl.Visibility = 'AllUsers';
                                    
                                    var result2 = sforce.connection.create([cdl]);
                                    
                                    if (result2[0].getBoolean("success")) {
                                        console.log("new CDL created with id " + result2[0].id);
                                    } else {
                                        console.log("failed to create CDL " + result2[0]);
                                    }
                                } else {
                                    console.log("failed to create CV " + result[0]);
                                }
                                
                                if(exitCount == $scope.fileList.length) {
                                    $scope.getFilesAssociatedWithReferenceRequest('{!JSENCODE(refRequestId)}').then(function(result) {
                                        
                                        if (result != null && result != '') {
                                            result = $scope.parseResult(result);
                                            $scope.listOfUploadedFile = JSON.parse(result);
                                        }
                                        $scope.isLoading = false;
                                    });
                                }
                            };
                            
                            fileReader.readAsArrayBuffer(file);
                        }
                    }

                    $window.addEventListener('message', function(e) {
                        
                        if (e.origin === $scope.pageVariables['matchPageUrl'].substring(0, $scope.pageVariables['matchPageUrl'].indexOf('/apex'))) {

                            if (e.data != null && e.data.newRRAId != null) {
                                $scope.closeRefMatch(true);
                                $scope.pageVariables['isSuccess'] = true;
                                $scope.pageVariables['successMessage'] = e.data.successMessage;

                                $scope.getRefRequestObject().then(function(result) {
                                    $scope.refRequestWrapper = result[0];
                                    $scope.pageVariables['isUr'] = false;
                                    
                                    angular.forEach(
                                        $scope.refRequestWrapper['accRequests'],
                                        function(req) {
                                            
                                            if (req['accRequestId'] == e.data.newRRAId) {
                                                $scope.selectedRequestItem = angular.copy(req);
                                                $scope.tempRequestItemToEdit = angular.copy(req);
                                                $scope.pageVariables['selectedRequestId'] = req['accRequestId'];
                                            }
                                        }
                                    );

                                    if (!($scope.selectedRequestItem['requestStatus'].includes('Give Up') || $scope.selectedRequestItem['requestStatus'] == 'No Longer Needed' || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Completed'  || $scope.selectedRequestItem['requestStatus'] == 'No Response'  || 
                                      $scope.selectedRequestItem['requestStatus'] == 'Unavailable')) {
                                        $scope.pageVariables['isSelectedRequestActive'] = true;
                                    } else {
                                        $scope.pageVariables['isSelectedRequestActive'] = false;
                                    }
                                    $scope.isLoading = false;
                                });
                                $scope.$apply();
                            }
                        }
                    });

                    $scope.backToWorkspace = function() {
                        $scope.cancelInlineEdit();
                        var url = '{!URLFOR($Page.ReferenceWorkspaceSLDS)}' + '&selection=' + $scope.pageVariables['selection'];
						
                        if ((typeof sforce != 'undefined') && sforce != null && sforce.console.isInConsole()) {
                            sforce.console.getSubtabIds(null, $scope.focusWorkspaceTab);
                        } else if ((typeof sforce != 'undefined') && sforce != null) {
                            
                            if (Object.keys(sforce)[0] == 'console' && Object.keys(sforce).length == 1) {
                                window.location = '/_ui/core/chatter/ui/ChatterPage';
                            } else {
                                sforce.one.navigateToURL(url, true);
                            }
                        } else {
                            window.location = '/_ui/core/chatter/ui/ChatterPage';
                        }
                    }

                    $scope.closeSubTab = function(result) {
                        sforce.console.closeTab(result.id);
                    }

                    $scope.focusWorkspaceTab = function(result) {

                        if (result.ids != null && result.ids.length > 2) {
                            sforce.console.focusSubtabById(result.ids[0]);
                        }
                        sforce.console.getEnclosingTabId($scope.closeSubTab);
                    }
                }
            );
        </script>
    </head>

    <body>
        <div ng-app="projectDetailApp" ng-controller="projectDetailCtrl" ng-cloak="ng-cloak" class="container">
            <div ng-show="!isFullLicenseAccessible" class="slds-m-around_large">
                <span class="slds-icon_container slds-icon-action-call" style="border-radius: 5px">
                    <svg class="slds-icon slds-icon_small" aria-hidden="true">
                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#warning')}"></use>
                    </svg>
                </span>
                {!$Label.User_License}
            </div>

            <div ng-show="isFullLicenseAccessible && !IsPageAccessible" class="slds-m-around_large">
                <span class="slds-icon_container slds-icon-action-call" style="border-radius: 5px">
                    <svg class="slds-icon slds-icon_small" aria-hidden="true">
                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#warning')}"></use>
                    </svg>
                </span>
                {!$Label.Insufficient_Privileges}
            </div>

            <div ng-init="init()" ng-show="isFullLicenseAccessible && IsPageAccessible">
                <div role="status" ng-show="isLoading" class="slds-spinner slds-spinner_medium slds-spinner_brand">
                    <span class="slds-assistive-text">Loading</span>
                    <div class="slds-spinner__dot-a"></div>
                    <div class="slds-spinner__dot-b"></div>
                </div>

                <div ng-show="!isLoading">
                    <div class="slds-page-header">
                        <div class="slds-grid slds-wrap">
                            <div class="slds-col">
                                <div class="slds-media slds-media_center">
                                    <div class="slds-media__figure" style="margin-bottom: 0.5rem">
                                        <span class="slds-icon_container">
                                            <img alt="refedge logo" src="{!URLFOR($Resource.RefEdge_Square_Icon, 'icon-small.png')}" class="slds-icon slds-icon-text-default slds-icon_large" style="height: 2.5rem; width: 2.5rem" />
                                        </span>
                                    </div>
                                    <div class="slds-media__body">
                                        <p ng-show="!pageVariables['isUr']" class="slds-text-title_caps slds-line-height_reset">{!$ObjectType.Reference_Request_Account__c.Label}</p>
                                        <p ng-show="pageVariables['isUr']" class="slds-text-title_caps slds-line-height_reset">{!$ObjectType.Unspecified_Request__c.Label}</p>
                                        <h1 ng-show="!pageVariables['isUr']" class="slds-page-header__title slds-m-right_small slds-align-middle slds-truncate">
                                            {{selectedRequestItem['accountName']}}
                                        </h1>
                                        <h1 ng-show="pageVariables['isUr']" class="slds-page-header__title slds-m-right_small slds-align-middle slds-truncate">
                                            {{selectedRequestItem['unspecRequestName']}}
                                        </h1>
                                    </div>
                                </div>
                            </div>
                            <div class="slds-col slds-no-flex slds-grid slds-align-bottom">
                                <div class="slds-button-group" role="group">
                                    <!-- REF-2132 -->
                                    <input id="multiFiles" type="file" multiple="true" onchange="angular.element(this).scope().handleFiles(this);"
                                           style="display:none;"/>
                                     <a onclick="angular.element(this).scope().openInputFile(this);" ng-show="attachSupportingDocuments && pageVariables['isSelectedRequestActive']" 
                                        class="slds-button slds-button_neutral">Upload Files</a>
                                    <a ng-click="backToWorkspace()" ng-show="pageVariables['isFromWorkspace']" class="slds-button slds-button_neutral">{!$Label.Back}</a>
                                    <a ng-click="backToWorkspace()" ng-show="!pageVariables['isFromWorkspace']" class="slds-button slds-button_neutral">{!$Label.Back}</a>
                                    <a ng-click="openEditRequestModal()" ng-show="pageVariables['isSelectedRequestActive']" class="slds-button slds-button_neutral">{!$Label.Edit}</a>
                                    <a ng-click="openAddRequestModal()" class="slds-button slds-button_neutral">{!$Label.Add}</a>
                                    <a ng-click="openRefMatch()" ng-show="pageVariables['isSelectedRequestActive']" class="slds-button slds-button_neutral">{!$Label.Match}</a>
                                    <!-- REF-1964 -->
                                    <a ng-click="openHubMatch()" ng-show="pageVariables['isSelectedRequestActive'] && isInfluitiveEnabled" class="slds-button slds-button_neutral" 
                                       ng-disabled="!pageVariables['isUr'] || pageVariables['hasChallengeId']">
                                        Hub Match
                                    </a>
                                    <a ng-click="postToInfluitive()" ng-show="pageVariables['isSelectedRequestActive'] && isInfluitiveEnabled" class="slds-button slds-button_neutral" 
                                       ng-disabled="!pageVariables['isUr'] || pageVariables['hasChallengeId']">
                                        Post to Hub
                                    </a>
                                    <a ng-click="openAttributesModal(false)" ng-class="{'slds-button_last' : (!pageVariables['isProCom'] && !isInfluitiveEnabled && !pageVariables['isSelectedRequestActive'])}" class="slds-button slds-button_neutral">
                                        {!$Label.Edit}&nbsp;{!$Label.Attributes}
                                    </a>
                               <!-- <div ng-show="(pageVariables['isProCom'] || isInfluitiveEnabled) && pageVariables['isSelectedRequestActive']" class="slds-dropdown-trigger slds-is-open slds-button_last">
                                        <a class="slds-button slds-button_icon slds-button_icon-border-filled" aria-haspopup="true" title="Show More" style="line-height: 2.4">
                                            <svg class="slds-button__icon" aria-hidden="true">
                                                <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                            </svg>
                                        </a>
                                        <div class="slds-dropdown slds-dropdown_right" style="width: max-content">
                                            <ul class="slds-dropdown__list" role="menu">
                                                <li ng-show="pageVariables['isProCom']" class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                    <a ng-click="openPostToCommunityModal()" role="menuitemcheckbox">{!$Label.Post_to_Community}</a>
                                                </li>
                                                <li ng-show="isInfluitiveEnabled && pageVariables['isUr'] && !pageVariables['hasChallengeId']" 
                                                    class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                    <a ng-click="postToInfluitive()" role="menuitemcheckbox">{!$Label.Post_to_Influitive}</a>
                                                </li>
                                            </ul>
                                        </div>
                                    </div> -->
                                </div>
                            </div>
                        </div>
                        <ul class="slds-grid slds-page-header__detail-row">
                            <li class="slds-page-header__detail-block">
                                <p class="slds-text-title slds-truncate slds-m-bottom_xx-small">
                                    {!$ObjectType.Reference_Request__c.fields.Requester__c.Label}
                                </p>
                                <a href="/{{refRequestWrapper['requesterId']}}" target="_blank" style="text-decoration: none">
                                    {{refRequestWrapper['requesterName']}}
                                </a>
                            </li>
                            <li ng-show="refRequestWrapper['oppId'] != ''" class="slds-page-header__detail-block">
                                <p class="slds-text-title slds-truncate slds-m-bottom_xx-small">
                                    {!$ObjectType.Reference_Request__c.fields.Opportunity__c.Label}
                                </p>
                                <a href="/{{refRequestWrapper['oppId']}}" target="_blank" style="text-decoration: none">
                                    {{refRequestWrapper['oppName']}}
                                </a>
                            </li>
                            <li class="slds-page-header__detail-block">
                                <p class="slds-text-title slds-truncate slds-m-bottom_xx-small">
                                    {!$Label.Owner}
                                </p>
                                <a href="/{{selectedRequestItem['ownerId']}}" target="_blank" style="text-decoration: none">
                                    {{selectedRequestItem['ownerName']}}
                                </a>
                            </li>
                            <li class="slds-page-header__detail-block">
                                <p class="slds-text-title slds-truncate slds-m-bottom_xx-small">
                                    {!$ObjectType.Reference_Request_Account__c.fields.Deadline__c.Label}
                                </p>
                                <p>
                                    <span class="deadlineCircle" style="background-color: {{selectedRequestItem['deadlineColor']}}"></span>
                                    {{selectedRequestItem['deadline']}}
                                </p>
                            </li>
                        </ul>
                    </div>

                    <div class="inlineEditButtons" ng-show="pageVariables['isInlineEdit'] || pageVariables['editedFields'].length > 0">
                        <a ng-click="cancelInlineEdit()" class="slds-button slds-button_neutral">{!$Label.Cancel}</a>
                        <a ng-click="saveInlineEdit()" class="slds-button slds-button_brand">{!$Label.Save}</a>
                    </div>

                    <div class="slds-grid slds-wrap slds-p-left_large" ng-class="{'bottomPadding' : pageVariables['editedFields'].length > 0}">
                        <div class="slds-size_3-of-5 slds-p-right_small customScrollDiv" style="border-right: 1px solid lightgray">
                            <div class="slds-tabs_default">
                                <ul class="slds-tabs_default__nav" role="tablist">
                                    <li class="slds-tabs_default__item" ng-class="{'slds-is-active' : pageVariables['selectedTabLeft'] == 'detail'}" role="presentation">
                                        <a class="slds-tabs_default__link" ng-click="toggleLeftTab('detail')" href="javascript:void(0);" role="tab" style="text-transform: uppercase; letter-spacing: .0625rem;">
                                            {!$Label.Details}
                                        </a>
                                    </li>
                                    <li class="slds-tabs_default__item" ng-class="{'slds-is-active' : pageVariables['selectedTabLeft'] == 'request'}" role="presentation">
                                        <a class="slds-tabs_default__link" ng-click="toggleLeftTab('request')" href="javascript:void(0);" role="tab" style="text-transform: uppercase; letter-spacing: .0625rem;">
                                            {!$ObjectType.Reference_Request__c.Label}
                                        </a>
                                    </li>
                                </ul>
                                <div class="slds-tabs_default__content" ng-show="pageVariables['selectedTabLeft'] == 'detail'" role="tabpanel">
                                    <div class="slds-grid slds-wrap">
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_small editableFormElement" ng-class="{'editedFormElement' : pageVariables['editedFields'].indexOf('refTypeId') >= 0}">
                                            <span class="slds-form-element__label" style="margin-right: 0;">{!$Label.Type}</span>
                                            <!-- <span ng-show="pageVariables['editedFields'].indexOf('refTypeId') >= 0" ng-click="undoInlineEdit('refTypeId')" class="slds-icon_container slds-icon-utility-undo" style="float: right; cursor: pointer">
                                                <svg class="slds-icon slds-icon-text-default slds-icon_xx-small" aria-hidden="true">
                                                    <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#undo')}"></use>
                                                </svg>
                                            </span> -->
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Reference_Request_Account__c.fields.Reference_Type_Needed__c.inlineHelpText}' != ''">
												<div class="slds-form-element ">
													<div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
													<p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
														<svg class="slds-button__icon" aria-hidden="true">
															<use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
														</svg>
													</p>
													</div>
												</div>
												<div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" style="bottom:71px!important;" role="tooltip" id="help">
													<div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request_Account__c.fields.Reference_Type_Needed__c.inlineHelpText}</div>
												</div>
												<div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" style="bottom:71px!important;" role="tooltip" id="help">
													<div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request_Account__c.fields.Reference_Type_Needed__c.inlineHelpText}</div>
												</div>
											</div>
											<div class="slds-form-element__control slds-border_bottom" ng-dblclick="enableInlineEdit('refTypeId')" ng-hide="pageVariables['inlineEditField'] == 'refTypeId'">
                                                <span class="slds-form-element__static">{{selectedRequestItem['refTypeName']}}</span>
                                                <span class="slds-icon_container slds-icon-utility-edit" ng-show="pageVariables['isSelectedRequestActive']" ng-click="enableInlineEdit('refTypeId')" style="float: right; cursor: pointer">
                                                    <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"></use>
                                                    </svg>
                                                </span>
                                            </div>
                                            <div class="slds-form-element__control" ng-show="pageVariables['isInlineEdit'] && pageVariables['inlineEditField'] == 'refTypeId'">
                                                <select class="slds-select" ng-blur="disableInlineEdit()" ng-model="selectedRequestItem['refTypeId']" ng-options="rt['refTypeId'] as rt['refTypeName'] for rt in refTypesList"></select>
                                            </div>
                                        </div>
                                        <!--REF-1964-->
                                        <div ng-show='isInfluitiveEnabled' class="slds-size_1-of-2 slds-form-element slds-p-around_small">
                                            <span class="slds-form-element__label">Challenge Id</span>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span ng-show="selectedRequestItem['challengeId'] != null && selectedRequestItem['challengeId'] != ''" class="slds-form-element__static">
                                                    {{selectedRequestItem['challengeId']}}
                                                </span>                                                
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_small editableFormElement"
                                             ng-show="isInfluitiveEnabled && (selectedRequestItem['challengeStatus'] != '')"
                                             ng-class="{'editedFormElement' : pageVariables['editedFields'].indexOf('challengeStatus') >= 0}">
                                            <span class="slds-form-element__label">Challenge Status</span>
                                            <div class="slds-form-element__control slds-border_bottom" ng-dblclick="enableInlineEdit('challengeStatus')" ng-hide="pageVariables['inlineEditField'] == 'challengeStatus'">
                                                <span class="slds-form-element__static">{{selectedRequestItem['challengeStatus']}}</span>
                                                <span class="slds-icon_container slds-icon-utility-edit" ng-show="pageVariables['isSelectedRequestActive']" ng-click="enableInlineEdit('challengeStatus')" style="float: right; cursor: pointer">
                                                    <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"></use>
                                                    </svg>
                                                </span>
                                            </div>
                                            <div class="slds-form-element__control" ng-show="pageVariables['isInlineEdit'] && pageVariables['inlineEditField'] == 'challengeStatus'">                                                
                                                <select class="slds-select" ng-model="selectedRequestItem['challengeStatus']" ng-show="pageVariables['isUr']">
                                                    <option ng-repeat="st in urChallengeStatusPicklistValues" value="{{st}}">{{st}}</option>
                                                </select>
                                            </div>
                                        </div>


                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_small">
                                            <span class="slds-form-element__label" style="margin-right: 0;">{!$Label.Account}</span>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Reference_Request_Account__c.fields.Account__c.inlineHelpText}' != ''">
												<div class="slds-form-element ">
													<div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
													<p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
														<svg class="slds-button__icon" aria-hidden="true">
															<use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
														</svg>
													</p>
													</div>
												</div>
												<div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" role="tooltip" id="help">
													<div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request_Account__c.fields.Account__c.inlineHelpText}</div>
												</div>
												<div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" role="tooltip" id="help">
													<div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request_Account__c.fields.Account__c.inlineHelpText}</div>
												</div>
											</div>
											<div class="slds-form-element__control slds-border_bottom">
                                                <span ng-show="selectedRequestItem['accountId'] != null && selectedRequestItem['accountId'] != ''" class="slds-form-element__static">
                                                    <a href="/{{selectedRequestItem['accountId']}}" target="_blank" style="text-decoration: none">
                                                        {{selectedRequestItem['accountName']}}
                                                    </a>
                                                </span>
                                                <span ng-show="selectedRequestItem['accountId'] == null || selectedRequestItem['accountId'] == ''" class="slds-form-element__static">&nbsp;</span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_small editableFormElement" ng-class="{'editedFormElement' : pageVariables['editedFields'].indexOf('requestStatus') >= 0}">
                                            <span class="slds-form-element__label">{!$Label.Status}</span>
                                            <div class="slds-form-element__control slds-border_bottom" ng-dblclick="enableInlineEdit('requestStatus')" ng-hide="pageVariables['inlineEditField'] == 'requestStatus'">
                                                <span class="slds-form-element__static">{{selectedRequestItem['requestStatus']}}</span>
                                                <span class="slds-icon_container slds-icon-utility-edit" ng-show="pageVariables['isSelectedRequestActive']" ng-click="enableInlineEdit('requestStatus')" style="float: right; cursor: pointer">
                                                    <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"></use>
                                                    </svg>
                                                </span>
                                            </div>
                                            <div class="slds-form-element__control" ng-show="pageVariables['isInlineEdit'] && pageVariables['inlineEditField'] == 'requestStatus'">
                                                <select class="slds-select" ng-blur="disableInlineEdit()" ng-model="selectedRequestItem['requestStatus']" ng-show="!pageVariables['isUr']">
                                                    <option ng-repeat="st in accReqStatusPicklistValues" value="{{st}}">{{st}}</option>
                                                </select>
                                                <select class="slds-select" ng-blur="disableInlineEdit()" ng-model="selectedRequestItem['requestStatus']" ng-show="pageVariables['isUr']">
                                                    <option ng-repeat="st in unspecReqStatusPicklistValues" value="{{st}}">{{st}}</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div ng-show="tempRequestItemToEdit['contactId'] != null && tempRequestItemToEdit['contactId'] != ''" class="slds-size_1-of-2 slds-form-element slds-p-around_small">
                                            <span class="slds-form-element__label">{!$Label.Contact}</span>
                                            <div class="slds-form-element__control slds-border_bottom" >
                                                <span class="slds-form-element__static">
                                                    <a href="/{{selectedRequestItem['contactId']}}" target="_blank">
                                                        {{selectedRequestItem['contactName']}}
                                                    </a>
                                                </span>
                                            </div>
                                        </div>
                                        <div ng-show="tempRequestItemToEdit['contactId'] == null || tempRequestItemToEdit['contactId'] == ''" class="slds-size_1-of-2 slds-form-element slds-p-around_small editableFormElement" ng-class="{'editedFormElement' : pageVariables['editedFields'].indexOf('contactId') >= 0}">
                                            <span class="slds-form-element__label" style="margin-right: 0;">{!$Label.Contact}</span>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Reference_Request_Account_Contact__c.fields.Contact__c.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request_Account_Contact__c.fields.Contact__c.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request_Account_Contact__c.fields.Contact__c.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div class="slds-form-element__control slds-border_bottom" ng-dblclick="enableInlineEdit('contactId')" ng-hide="pageVariables['inlineEditField'] == 'contactId'">
                                                <span ng-show="selectedRequestItem['contactId'] == null || selectedRequestItem['contactId'] == ''" class="slds-form-element__static">
                                                    &nbsp;
                                                </span>
                                                <span ng-show="selectedRequestItem['contactId'] != null && selectedRequestItem['contactId'] != ''" class="slds-form-element__static">
                                                    <a href="/{{selectedRequestItem['contactId']}}" target="_blank">
                                                        {{selectedRequestItem['contactName']}}
                                                    </a>
                                                </span>
                                                <span class="slds-icon_container slds-icon-utility-edit" ng-click="enableInlineEdit('contactId')" style="float: right; cursor: pointer">
                                                    <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"></use>
                                                    </svg>
                                                </span>
                                            </div>
                                            <div class="slds-form-element__control" ng-show="pageVariables['isInlineEdit'] && pageVariables['inlineEditField'] == 'contactId'">
                                                <lookup-picklist object-Name="'Contacts'" object-Api-Name="'ContactsFromAccount,' + selectedRequestItem['accountId'] + ',null'"
                                                    disable-inline-edit="disableInlineEdit()" extended-scope="pageVariables['inlineContactLookupScope']" selected-item="inlineEditSelectedContact">
                                                </lookup-picklist>
                                            </div>
                                        </div>
                                        <div ng-show="pageVariables['isUr'] || refRequestWrapper['projectType'] == 'Candidate'" class="slds-size_1-of-2 slds-form-element slds-p-around_small editableFormElement" ng-class="{'editedFormElement' : pageVariables['editedFields'].indexOf('process') >= 0}">
                                            <span class="slds-form-element__label">{!$Label.Process}</span>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span class="slds-form-element__static">{!$Label.Managed}</span>
                                            </div>
                                        </div>
                                        <div ng-show="!pageVariables['isUr'] && refRequestWrapper['projectType'] == 'Member'" class="slds-size_1-of-2 slds-form-element slds-p-around_small editableFormElement" ng-class="{'editedFormElement' : pageVariables['editedFields'].indexOf('process') >= 0}">
                                            <span class="slds-form-element__label" style="margin-right: 0;">{!$Label.Process}</span>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Reference_Request_Account__c.fields.Process__c.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request_Account__c.fields.Process__c.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request_Account__c.fields.Process__c.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div class="slds-form-element__control slds-border_bottom" ng-dblclick="enableInlineEdit('process')" ng-hide="pageVariables['inlineEditField'] == 'process'">
                                                <span class="slds-form-element__static">{{selectedRequestItem['process']}}</span>
                                                <span class="slds-icon_container slds-icon-utility-edit" ng-show="pageVariables['isSelectedRequestActive']" style="float: right; cursor: pointer">
                                                    <svg class="slds-icon slds-icon_xx-small editIcon" ng-click="enableInlineEdit('process')" aria-hidden="true">
                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"></use>
                                                    </svg>
                                                </span>
                                            </div>
                                            <div class="slds-form-element__control" ng-show="pageVariables['isInlineEdit'] && pageVariables['inlineEditField'] == 'process'">
                                                <select class="slds-select" ng-blur="disableInlineEdit()" ng-model="selectedRequestItem['process']">
                                                    <option value="Managed">{!$Label.Managed}</option>
                                                    <option value="Peer2Peer">{!$Label.Peer2Peer}</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_small editableFormElement" ng-class="{'editedFormElement' : pageVariables['editedFields'].indexOf('ownerId') >= 0}">
                                            <span class="slds-form-element__label" style="margin-right: 0;">
                                                {!$ObjectType.Reference_Request_Account__c.fields.Project_Owner__c.Label}
                                            </span>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Reference_Request_Account__c.fields.Project_Owner__c.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request_Account__c.fields.Project_Owner__c.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request_Account__c.fields.Project_Owner__c.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div class="slds-form-element__control slds-border_bottom" ng-dblclick="enableInlineEdit('ownerId')" ng-hide="pageVariables['inlineEditField'] == 'ownerId'">
                                                <span ng-show="selectedRequestItem['ownerId'] != null && selectedRequestItem['ownerId'] != ''" class="slds-form-element__static">
                                                    <a href="/{{selectedRequestItem['ownerId']}}" target="_blank" style="text-decoration: none">
                                                        {{selectedRequestItem['ownerName']}}
                                                    </a>
                                                </span>
                                                <span ng-show="selectedRequestItem['ownerId'] == null || selectedRequestItem['ownerId'] == ''" class="slds-form-element__static">&nbsp;</span>
                                                <span class="slds-icon_container slds-icon-utility-edit" ng-show="pageVariables['isSelectedRequestActive']" ng-click="enableInlineEdit('ownerId')" style="float: right; cursor: pointer">
                                                    <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"></use>
                                                    </svg>
                                                </span>
                                            </div>
                                            <div class="slds-form-element__control" ng-if="pageVariables['isInlineEdit'] && pageVariables['inlineEditField'] == 'ownerId'">
                                                <lookup-picklist object-Name="'Users'" object-Api-Name="'Active_Non_Community_Users'"
                                                    disable-inline-edit="disableInlineEdit()" selected-item="inlineEditSelectedOwner">
                                                </lookup-picklist>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_small">
                                            <span class="slds-form-element__label" style="margin-right: 0;">
                                                {!$ObjectType.Reference_Request_Account__c.fields.Request_Notes__c.Label}
                                            </span>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Reference_Request_Account__c.fields.Request_Notes__c.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" style="bottom: 94%!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request_Account__c.fields.Request_Notes__c.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" style="bottom: 94%!important;" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request_Account__c.fields.Request_Notes__c.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span class="slds-form-element__static" style ="line-height: 22px;">{{selectedRequestItem['reqNotes']}}</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="slds-section" ng-class="{'slds-is-open' : pageVariables['addInfoOpen']}">
                                        <h3 class="slds-section__title">
                                            <a class="slds-button slds-section__title-action" ng-click="toggleAddInfo()">
                                                <svg class="slds-section__title-action-icon slds-button__icon slds-button__icon_left" aria-hidden="true">
                                                    <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#switch')}"></use>
                                                </svg>
                                                <span class="slds-truncate">{!$Label.Requested_Information}</span>
                                            </a>
                                        </h3>
                                        <div class="slds-section__content slds-grid slds-wrap" ng-show="pageVariables['addInfoOpen']">
                                            <div ng-repeat="(apiName, fieldWrapper) in selectedRequestAdditionalInfo" ng-show="pageVariables['isAddInfoPresent']"
                                                    class="slds-size_1-of-2 slds-form-element slds-p-around_small editableFormElement" ng-class="{'editedFormElement' : pageVariables['editedFields'].indexOf(fieldWrapper['fieldApiName']) >= 0}">
                                                <span class="slds-form-element__label" style="margin-right: 0;">
                                                    {{fieldWrapper['fieldLabel']}}<span ng-show="fieldWrapper['required']" style="color: #c23934">*</span>
                                                </span>
                                                <div style="display: inline-flex;" class="tooltip" ng-show="fieldWrapper['inlineHelpText'] != null && fieldWrapper['inlineHelpText'] != ''">
                                                    <div class="slds-form-element ">
                                                        <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                        <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                            <svg class="slds-button__icon" aria-hidden="true">
                                                                <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                            </svg>
                                                        </p>
                                                        </div>
                                                    </div>
                                                    <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" style="bottom: 93%!important;" role="tooltip" id="help">
                                                        <div class="slds-popover__body" style="padding: 0.5rem;">{{fieldWrapper['inlineHelpText']}}</div>
                                                    </div>
                                                    <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" style="bottom: 93%!important;" role="tooltip" id="help">
                                                        <div class="slds-popover__body" style="padding: 0.5rem;">{{fieldWrapper['inlineHelpText']}}</div>
                                                    </div>
                                                </div>
                                                
                                                <div class="slds-form-element__control slds-border_bottom" ng-dblclick="enableInlineEdit(fieldWrapper['fieldApiName'])" ng-hide="pageVariables['inlineEditField'] == fieldWrapper['fieldApiName']" ng-if="fieldWrapper['fieldType'] != 'BOOLEAN'">
                                                    <span class="slds-form-element__static" ng-show="fieldWrapper['fieldValue'] != null && fieldWrapper['fieldValue'] != ''">{{fieldWrapper['fieldValue']}}</span>
                                                    <span class="slds-form-element__static" ng-show="fieldWrapper['fieldValue'] == null || fieldWrapper['fieldValue'] == ''">&nbsp;</span>
                                                    <span class="slds-icon_container slds-icon-utility-edit" ng-show="pageVariables['isSelectedRequestActive']" ng-click="enableInlineEdit(fieldWrapper['fieldApiName'])" style="float: right; cursor: pointer">
                                                        <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"></use>
                                                        </svg>
                                                    </span>
                                                </div>
                                                <div class="slds-form-element__control" ng-if="(fieldWrapper['fieldType'] == 'DATE' || fieldWrapper['fieldType'] == 'DATETIME') && pageVariables['isInlineEdit'] && pageVariables['inlineEditField'] == fieldWrapper['fieldApiName']">
                                                    <input class="slds-input" ng-blur="disableInlineEdit()" ng-model="fieldWrapper['fieldValue']" placeholder="{{dateFormat.toLowerCase()}}" date-format="{{dateFormat}}" datetime-picker="datetime-picker" />
                                                </div>
                                                <div class="slds-form-element__control" ng-if="fieldWrapper['fieldType'] == 'PICKLIST' && pageVariables['isInlineEdit'] && pageVariables['inlineEditField'] == fieldWrapper['fieldApiName']">
                                                    <select class="slds-select" ng-blur="disableInlineEdit()" ng-model="fieldWrapper['fieldValue']" ng-options="val['name'] as val['label'] for val in fieldWrapper['availableOptions']"></select>
                                                </div>
                                                <div class="slds-form-element__control" ng-if="fieldWrapper['fieldType'] == 'TEXTAREA' && pageVariables['isInlineEdit'] && pageVariables['inlineEditField'] == fieldWrapper['fieldApiName']">
                                                    <textarea style="line-height: 100%; width: 100%" ng-blur="disableInlineEdit()" ng-model="fieldWrapper['fieldValue']" rows="3" class="slds-textarea"></textarea>
                                                </div>
                                                <div class="slds-form-element__control" ng-if="(fieldWrapper['fieldType'] == 'STRING' || fieldWrapper['fieldType'] == 'DOUBLE') && pageVariables['isInlineEdit'] && pageVariables['inlineEditField'] == fieldWrapper['fieldApiName']">
                                                    <input type="text" ng-blur="disableInlineEdit()" class="slds-input" ng-model="fieldWrapper['fieldValue']" />
                                                </div>
                                                <div class="slds-form-element__control" ng-dblclick="enableInlineEdit(fieldWrapper['fieldApiName'])" ng-if="fieldWrapper['fieldType'] == 'BOOLEAN'">
                                                    <span class="slds-checkbox" style="display: inline-block; width: 90%;">
                                                        <input type="checkbox" ng-blur="disableInlineEdit()" id="{{fieldWrapper['fieldApiName']}}" name="{{fieldWrapper['fieldApiName']}}"
                                                            ng-model="fieldWrapper['booleanValue']" ng-disabled="pageVariables['inlineEditField'] != fieldWrapper['fieldApiName']" />
                                                        <label class="slds-checkbox__label" for="{{fieldWrapper['fieldApiName']}}">
                                                            <span class="slds-checkbox_faux"></span>
                                                        </label>
                                                    </span>
                                                    <span class="slds-icon_container slds-icon-utility-edit" ng-click="enableInlineEdit(fieldWrapper['fieldApiName'])"
                                                            ng-show="pageVariables['inlineEditField'] != fieldWrapper['fieldApiName'] && pageVariables['isSelectedRequestActive']"
                                                            style="display: inline-block; width: 9%; text-align: right; cursor: pointer">
                                                        <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"></use>
                                                        </svg>
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="slds-text-body_regular" ng-show="!pageVariables['isAddInfoPresent']">
                                                {!$Label.Fields_Not_Available}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="slds-tabs_default__content" ng-show="pageVariables['selectedTabLeft'] == 'request'" role="tabpanel">
                                    <div class="slds-grid slds-wrap">
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_small">
                                            <span class="slds-form-element__label">{!$ObjectType.Reference_Request__c.Label}</span>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span class="slds-form-element__static">
                                                    <a href="/{{refRequestWrapper['refRequestId']}}" target="_blank" style="text-decoration: none">
                                                        {{refRequestWrapper['refRequestName']}}
                                                    </a>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_small">
                                            <span class="slds-form-element__label" style="margin-right: 0;">
                                                {!$ObjectType.Reference_Request__c.fields.Project_Type__c.Label} 
                                            </span>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Reference_Request__c.fields.Project_Type__c.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                        <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                            <svg class="slds-button__icon" aria-hidden="true">
                                                                <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                            </svg>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request__c.fields.Project_Type__c.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request__c.fields.Project_Type__c.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span class="slds-form-element__static">{{refRequestWrapper['projectType']}}</span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_small editableFormElement" ng-class="{'editedFormElement' : pageVariables['editedFields'].indexOf('subject') >= 0}">
                                            <span class="slds-form-element__label" style="margin-right: 0;">
                                                {!$ObjectType.Reference_Request__c.fields.Title__c.Label}
                                            </span>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Reference_Request__c.fields.Title__c.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request__c.fields.Title__c.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request__c.fields.Title__c.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div class="slds-form-element__control slds-border_bottom" ng-dblclick="enableInlineEdit('subject')" ng-hide="pageVariables['inlineEditField'] == 'subject'">
                                                <span class="slds-form-element__static" ng-show="refRequestWrapper['subject'] != ''">{{refRequestWrapper['subject']}}</span>
                                                <span class="slds-form-element__static" ng-show="refRequestWrapper['subject'] == ''">&nbsp;</span>
                                                <span class="slds-icon_container slds-icon-utility-edit" ng-show="pageVariables['isSelectedRequestActive']" ng-click="enableInlineEdit('subject')" style="float: right; cursor: pointer">
                                                    <svg class="slds-icon slds-icon_xx-small editIcon" aria-hidden="true">
                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#edit')}"></use>
                                                    </svg>
                                                </span>
                                            </div>
                                            <div class="slds-form-element__control" ng-show="pageVariables['isInlineEdit'] && pageVariables['inlineEditField'] == 'subject'">
                                                <input type="text" ng-model="refRequestWrapper['subject']" class="slds-input" ng-blur="disableInlineEdit()" />
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_small">
                                            <span class="slds-form-element__label" style="margin-right: 0;">
                                                {!$ObjectType.Reference_Request__c.fields.Case__c.Label}
                                            </span>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Reference_Request__c.fields.Case__c.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request__c.fields.Case__c.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request__c.fields.Case__c.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span class="slds-form-element__static" ng-show="refRequestWrapper['caseId'] != ''">
                                                    <a href="/{{refRequestWrapper['caseId']}}" target="_blank" style="text-decoration: none">
                                                        {{refRequestWrapper['caseNumber']}}
                                                    </a>
                                                </span>
                                                <span class="slds-form-element__static" ng-show="refRequestWrapper['caseId'] == ''">&nbsp;</span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_small">
                                            <span class="slds-form-element__label" style="margin-right: 0;">
                                                {!$ObjectType.Reference_Request__c.fields.Lead__c.Label}
                                            </span>
                                            <div style="display: inline-flex;" class="tooltip" ng-show="'{!$ObjectType.Reference_Request__c.fields.Lead__c.inlineHelpText}' != ''">
                                                <div class="slds-form-element ">
                                                    <div class="slds-form-element__icon slds-align-middle" style="margin-left: 16px;">
                                                    <p  style="color: rgb(176, 173, 171);" aria-describedby="help" title="Help">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info')}" />
                                                        </svg>
                                                    </p>
                                                    </div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-fall-into-ground tooltipHelpShow" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request__c.fields.Lead__c.inlineHelpText}</div>
                                                </div>
                                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground tooltipHelpShow" role="tooltip" id="help">
                                                    <div class="slds-popover__body" style="padding: 0.5rem;">{!$ObjectType.Reference_Request__c.fields.Lead__c.inlineHelpText}</div>
                                                </div>
                                            </div>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span class="slds-form-element__static" ng-show="refRequestWrapper['leadId'] != ''">
                                                    <a href="/{{refRequestWrapper['leadId']}}" target="_blank" style="text-decoration: none">
                                                        {{refRequestWrapper['leadName']}}
                                                    </a>
                                                </span>
                                                <span class="slds-form-element__static" ng-show="refRequestWrapper['leadId'] == ''">&nbsp;</span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_small" ng-show="pageVariables['isAdvRouting']">
                                            <span class="slds-form-element__label">
                                                {{pageVariables['routingGroupsFieldLabel']}}
                                            </span>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span class="slds-form-element__static" ng-show="refRequestWrapper['advRoutingGroups'].length > 0">
                                                    <span ng-repeat="grpName in refRequestWrapper['advRoutingGroups']">
                                                        {{grpName}}<span ng-hide="$last">,&nbsp;</span>
                                                    </span>
                                                </span>
                                                <span class="slds-form-element__static" ng-show="refRequestWrapper['advRoutingGroups'].length == 0">&nbsp;</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div style="margin-top: 0.5rem" class="slds-p-left_small">
                                        <div class="slds-text-heading_medium slds-p-right_small">
                                            {!$Label.Attributes}
                                        </div>
                                        <div ng-repeat="(filterId, attNames) in selectedFilterAttNamesMap" class="slds-form-element" ng-show="filterAttributesMap[filterId].length > 0" style="padding: 0.25rem 0;">
                                            <span class="slds-form-element__label">
                                                {{filterAttributesMap[filterId][0]['filterName']}}<span ng-show="requiredFiltersMap[filterId]" style="color: #c23934">*</span>
                                            </span>
                                            <div class="slds-form-element__control">
                                                <span class="slds-form-element__static">{{attNames}}</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="slds-size_2-of-5 slds-p-left_small slds-p-right_large customScrollDiv">
                            <div class="slds-tabs_default">
                                <ul class="slds-tabs_default__nav" role="tablist">
                                    <li class="slds-tabs_default__item" ng-class="{'slds-is-active' : pageVariables['selectedTabRight'] == 'related'}" role="presentation">
                                        <a class="slds-tabs_default__link" ng-click="toggleRightTab('related')" href="javascript:void(0);" role="tab" style="text-transform: uppercase; letter-spacing: .0625rem;">
                                            {!$Label.Related}
                                        </a>
                                    </li>
                                    <li class="slds-tabs_default__item" ng-class="{'slds-is-active' : pageVariables['selectedTabRight'] == 'hitList'}" role="presentation">
                                        <a class="slds-tabs_default__link" ng-click="toggleRightTab('hitList')" href="javascript:void(0);" role="tab" style="text-transform: uppercase; letter-spacing: .0625rem;">
                                            {!$ObjectType.Hit_List__c.Label}
                                        </a>
                                    </li>
                                    <li class="slds-tabs_default__item" ng-class="{'slds-is-active' : pageVariables['selectedTabRight'] == 'notes'}" role="presentation">
                                        <a class="slds-tabs_default__link" ng-click="toggleRightTab('notes')" href="javascript:void(0);" role="tab" style="text-transform: uppercase; letter-spacing: .0625rem;">
                                            {!$Label.Notes}
                                        </a>
                                    </li>
                                    <!-- REF-2132 -->
                                    <li class="slds-tabs_default__item" ng-class="{'slds-is-active' : pageVariables['selectedTabRight'] == 'uploadedFiles'}" role="presentation">
                                        <a class="slds-tabs_default__link" ng-click="toggleRightTab('uploadedFiles')" href="javascript:void(0);" role="tab" style="text-transform: uppercase; letter-spacing: .0625rem;">
                                            Uploaded Files
                                        </a>
                                    </li>
                                    <!-- REF-1964 -->
                                    <li class="slds-tabs_default__item" ng-class="{'slds-is-active' : pageVariables['selectedTabRight'] == 'influitive'}" ng-show="isInfluitiveEnabled" role="presentation">
                                        <a class="slds-tabs_default__link" ng-click="toggleRightTab('influitive')" href="javascript:void(0);" role="tab" style="text-transform: uppercase; letter-spacing: .0625rem;">
                                            Hub Contacts
                                        </a>
                                    </li>
                                    <li class="slds-tabs_default__item" ng-class="{'slds-is-active' : pageVariables['selectedTabRight'] == 'community'}" ng-show="pageVariables['isProCom']" role="presentation">
                                        <a class="slds-tabs_default__link" ng-click="toggleRightTab('community')" href="javascript:void(0);" role="tab" style="text-transform: uppercase; letter-spacing: .0625rem;">
                                            {!$Label.Community}
                                        </a>
                                    </li>
                                </ul>
                                <div class="slds-tabs_default__content" ng-show="pageVariables['selectedTabRight'] == 'related'" role="tabpanel">
                                    <article class="slds-tile slds-hint-parent slds-p-left_small slds-p-bottom_small" ng-repeat="accReq in refRequestWrapper['accRequests']" ng-hide="accReq['accRequestId'] == pageVariables['selectedRequestId']">
                                        <div class="slds-grid slds-grid_align-spread slds-has-flexi-truncate">
                                            <h3 class="slds-truncate">
                                                <a href="/{{accReq['accountId']}}" target="_blank">{{accReq['accountName']}}</a>
                                            </h3>
                                            <div class="slds-shrink-none">
                                                <div ng-show="accReq['requestStatus'] == 'Not Started' || accReq['requestStatus'] == 'In Progress' || accReq['requestStatus'] == 'On Hold'" class="slds-dropdown-trigger slds-is-open">
                                                    <a class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small" aria-haspopup="true" style="line-height: 1.3">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                                        </svg>
                                                    </a>
                                                    <div class="slds-dropdown slds-dropdown_right" style="width: max-content">
                                                        <ul class="slds-dropdown__list" role="menu">
                                                            <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                <a ng-click="selectRequestItem(accReq, false)" role="menuitemcheckbox">{!$Label.Select}</a>
                                                            </li>
                                                            <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                <a ng-click="editRelatedRequest(accReq, false)" role="menuitemcheckbox">{!$Label.Edit}</a>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="slds-tile__detail slds-text-body_small">
                                            <dl class="slds-list_horizontal slds-wrap">
                                                <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Type}:</dt>
                                                <dd class="slds-item_detail slds-truncate">{{accReq['refTypeName']}}</dd>
                                                <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Process}:</dt>
                                                <dd class="slds-item_detail slds-truncate">{{accReq['process']}}</dd>
                                                <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Status}:</dt>
                                                <dd class="slds-item_detail slds-truncate">{{accReq['requestStatus']}}</dd>
                                            </dl>
                                        </div>
                                    </article>
                                    <article class="slds-tile slds-hint-parent slds-p-left_small slds-p-bottom_small" ng-repeat="unspecReq in refRequestWrapper['unspecRequests']" ng-hide="unspecReq['unspecRequestId'] == pageVariables['selectedRequestId']">
                                        <div class="slds-grid slds-grid_align-spread slds-has-flexi-truncate">
                                            <h3 class="slds-truncate"><a href="javascript:void(0);">{!$Label.Unspecified}</a></h3>
                                            <div class="slds-shrink-none">
                                                <div ng-show="unspecReq['requestStatus'] == 'Not Started' || unspecReq['requestStatus'] == 'In Progress' || unspecReq['requestStatus'] == 'On Hold'" class="slds-dropdown-trigger slds-is-open">
                                                    <a class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small" aria-haspopup="true" style="line-height: 1.3">
                                                        <svg class="slds-button__icon" aria-hidden="true">
                                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                                        </svg>
                                                    </a>
                                                    <div class="slds-dropdown slds-dropdown_right" style="width: max-content">
                                                        <ul class="slds-dropdown__list" role="menu">
                                                            <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                <a ng-click="selectRequestItem(unspecReq, true)" role="menuitemcheckbox">{!$Label.Select}</a>
                                                            </li>
                                                            <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                <a ng-click="editRelatedRequest(unspecReq, true)" role="menuitemcheckbox">{!$Label.Edit}</a>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="slds-tile__detail slds-text-body_small">
                                            <dl class="slds-list_horizontal slds-wrap">
                                                <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Type}:</dt>
                                                <dd class="slds-item_detail slds-truncate">{{unspecReq['refTypeName']}}</dd>
                                                <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Process}:</dt>
                                                <dd class="slds-item_detail slds-truncate">{!$Label.Managed}</dd>
                                                <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Status}:</dt>
                                                <dd class="slds-item_detail slds-truncate">{{unspecReq['requestStatus']}}</dd>
                                            </dl>
                                        </div>
                                    </article>
                                </div>
                                <div class="slds-tabs_default__content" ng-show="pageVariables['selectedTabRight'] == 'hitList'" role="tabpanel">
                                    <div ng-show="pageVariables['hitListWrapperList'].length == 0">
                                        <div class="slds-text-heading_medium">
                                            {!$Label.No_Data_Found}
                                        </div>
                                    </div>
                                    <div ng-show="pageVariables['hitListWrapperList'].length > 0">
                                        <div class="slds-text-heading_medium" style="margin-bottom: 1rem">
                                            {!$ObjectType.Hit_List__c.Label}
                                            <div class="slds-dropdown-trigger slds-is-open" style="float: right">
                                                <a class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-small" aria-haspopup="true" style="line-height: 1.75">
                                                    <svg class="slds-button__icon" aria-hidden="true">
                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                                    </svg>
                                                </a>
                                                <div class="slds-dropdown slds-dropdown_right" style="width: max-content">
                                                    <ul class="slds-dropdown__list" role="menu">
                                                        <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                            <a ng-click="openReleaseAllModal()" role="menuitemcheckbox">{!$Label.Release_All}</a>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                        <article class="slds-tile slds-media slds-p-left_small slds-p-bottom_small" ng-repeat="hl in pageVariables['hitListWrapperList']">
                                            <div class="slds-media__figure">
                                                <span ng-click="toggleHitListPopover(hl, $index)" id="{{'hlPopover' + $index}}" class="slds-icon_container slds-icon-utility-announcement" style="cursor: pointer">
                                                    <svg class="slds-icon slds-icon-text-light" aria-hidden="true">
                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info_alt')}"></use>
                                                    </svg>
                                                </span>
                                                <div ng-click="toggleHitListPopover(hl)" class="popoverBackdrop" ng-if="hl['showPopover']">
                                                    <section class="slds-popover slds-popover_panel slds-nubbin_right hitListPopover" style="top: {{pageVariables['popoverStyle']['top']}}; left: {{pageVariables['popoverStyle']['left']}}" ng-click="$event.stopPropagation()" role="dialog">
                                                        <a ng-click="toggleHitListPopover(hl)" class="slds-button slds-button_icon slds-button_icon slds-button_icon-small slds-float_right slds-popover__close" style="line-height: 1.5">
                                                            <svg class="slds-button__icon" aria-hidden="true">
                                                                <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                                            </svg>
                                                        </a>
                                                        <div class="slds-popover__header" style="padding: 0.75rem">
                                                            <header class="slds-media slds-media_center slds-m-bottom_small">
                                                                <span ng-show="hl['contactId'] == ''" class="slds-icon_container slds-icon-standard-account slds-media__figure">
                                                                    <svg class="slds-icon slds-icon_small" aria-hidden="true">
                                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/standard-sprite/svg/symbols.svg#account')}"></use>
                                                                    </svg>
                                                                </span>
                                                                <span ng-show="hl['contactId'] != ''" class="slds-icon_container slds-icon-standard-contact slds-media__figure">
                                                                    <svg class="slds-icon slds-icon_small" aria-hidden="true">
                                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/standard-sprite/svg/symbols.svg#contact')}"></use>
                                                                    </svg>
                                                                </span>
                                                                <div class="slds-media__body">
                                                                    <h2 class="slds-text-heading_medium slds-hyphenate">
                                                                        <a ng-show="hl['contactId'] != ''" href="/{{hl['contactId']}}" style="text-decoration: none" target="_blank">
                                                                            {{hl['contactName']}}
                                                                        </a>
                                                                        <a ng-show="hl['contactId'] == ''" href="/{{hl['accountId']}}" style="text-decoration: none" target="_blank">
                                                                            {{hl['accountName']}}
                                                                        </a>
                                                                    </h2>
                                                                </div>
                                                            </header>
                                                            <footer class="slds-grid slds-wrap">
                                                                <div class="slds-p-right_small slds-size_1-of-3">
                                                                    <dl style="padding-bottom: 5px">
                                                                        <dt>
                                                                            <p title="{!$Label.T_Last_Used}" class="slds-text-title_caps slds-truncate">{!$Label.T_Last_Used}</p>
                                                                        </dt>
                                                                        <dd>
                                                                            <p ng-show="hl['lastUsed'] != ''">{{hl['lastUsed']}}</p>
                                                                            <p ng-show="hl['lastUsed'] == ''">&nbsp;</p>
                                                                        </dd>
                                                                    </dl>
                                                                    <dl style="padding-bottom: 5px; width: 120px;">
                                                                        <dt>
                                                                            <p title="{{contactRULPeriod}}" ng-show="hl['contactId'] != ''" class="slds-text-title_caps slds-truncate">{{contactRULPeriod}}</p>
                                                                            <p title="{{accountRULPeriod}}" ng-show="hl['contactId'] == ''" class="slds-text-title_caps slds-truncate">{{accountRULPeriod}}</p>
                                                                        </dt>
                                                                        <dd>
                                                                            <p ng-show="hl['lastNDays'] != ''">{{hl['lastNDays']}}</p>
                                                                            <p ng-show="hl['lastNDays'] == ''">&nbsp;</p>
                                                                        </dd>
                                                                    </dl>
                                                                    <dl style="padding-bottom: 5px">
                                                                        <dt>
                                                                            <p title="{!$Label.Assigned}" class="slds-text-title_caps slds-truncate">{!$Label.Assigned}</p>
                                                                        </dt>
                                                                        <dd>
                                                                            <p>{{hl['assignCount']}}</p>
                                                                        </dd>
                                                                    </dl>
                                                                    <dl>
                                                                        <dt>
                                                                            <p title="{!$ObjectType.Hit_List__c.Label}" class="slds-text-title_caps slds-truncate">{!$ObjectType.Hit_List__c.Label}</p>
                                                                        </dt>
                                                                        <dd>
                                                                            <p>{{hl['hitCount']}}</p>
                                                                        </dd>
                                                                    </dl>
                                                                </div>
                                                                <div class="slds-size_2-of-3">
                                                                    <dl>
                                                                        <dt>
                                                                            <p class="slds-text-title_caps slds-truncate">{!$Label.Approval_Decline_Notes}</p>
                                                                        </dt>
                                                                        <dd>
                                                                            <p style="max-height: 8rem; overflow-y: auto">{{hl['notes']}}</p>
                                                                        </dd>
                                                                    </dl>
                                                                </div>
                                                            </footer>
                                                        </div>
                                                    </section>
                                                </div>
                                            </div>
                                            <div class="slds-media__body">
                                                <div class="slds-grid slds-grid_align-spread slds-has-flexi-truncate">
                                                    <h3 ng-show="hl['contactId'] == ''" class="slds-truncate"><a href="javascript:void(0);">{{hl['accountName']}}</a></h3>
                                                    <h3 ng-show="hl['contactId'] != ''" class="slds-truncate"><a href="javascript:void(0);">{{hl['contactName']}}</a></h3>
                                                    <div class="slds-shrink-none">
                                                        <div class="slds-dropdown-trigger slds-is-open">
                                                            <a class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small" aria-haspopup="true" style="line-height: 1.3">
                                                                <svg class="slds-button__icon" aria-hidden="true">
                                                                    <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                                                </svg>
                                                            </a>
                                                            <div class="slds-dropdown slds-dropdown_right" style="width: max-content">
                                                                <ul class="slds-dropdown__list" role="menu">
                                                                    <li ng-show="(hl['disposition'] == '' || hl['disposition'] == 'Contacted') && pageVariables['isSelectedRequestActive']" class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                        <a ng-click="openAssignHitListModal(hl)" role="menuitemcheckbox">{!$Label.Assign}</a>
                                                                    </li>
                                                                    <li class="slds-dropdown__item" ng-show="(hl['disposition'] == '' || hl['disposition'] == 'Contacted')" style="margin-left: 0" role="presentation">
                                                                        <a ng-click="openAddReminderModal(hl)" role="menuitemcheckbox">{!$Label.Reminder}</a>
                                                                    </li>
                                                                    <!-- REF-2620 -->
                                                                    <div ng-repeat="val in dispositionPicklistValues">
                                                                        <li ng-show="(hl['disposition'] == '' || hl['disposition'] == 'Contacted') && pageVariables['isSelectedRequestActive']" class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                            <a ng-click="saveDispositionModal(hl,val);" role="menuitemcheckbox">
                                                                                {{val}}
                                                                            </a>
                                                                        </li>
                                                                    </div>
                                                                    <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                        <a ng-click="openHitListNoteModal(hl)" role="menuitemcheckbox">{!$Label.Notes}</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="slds-tile__detail slds-text-body_small">
                                                    <dl class="slds-list_horizontal slds-wrap">
                                                        <dt ng-show="hl['contactId'] != ''" class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Account}:</dt>
                                                        <dd ng-show="hl['contactId'] != ''" class="slds-item_detail slds-truncate">{{hl['accountName']}}</dd>
                                                        <dt ng-show="hl['contactId'] != ''" class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Phone}:</dt>
                                                        <dd ng-show="hl['contactId'] != ''" class="slds-item_detail slds-truncate">{{hl['phone']}}</dd>
                                                        <dt ng-show="hl['contactId'] != ''" class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Email}:</dt>
                                                        <dd ng-show="hl['contactId'] != ''" class="slds-item_detail slds-truncate">{{hl['email']}}</dd>
                                                        <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$ObjectType.Hit_List__c.fields.Disposition__c.Label}:</dt>
                                                        <dd class="slds-item_detail slds-truncate">{{hl['disposition']}}</dd>
                                                    </dl>
                                                </div>
                                            </div>
                                        </article>
                                    </div>
                                </div>
                                <div class="slds-tabs_default__content" ng-show="pageVariables['selectedTabRight'] == 'notes'" role="tabpanel">
                                    <div ng-show="pageVariables['relatedNotesList'].length == 0">
                                        <div class="slds-text-heading_medium">
                                            {!$Label.No_Data_Found}
                                            <div class="slds-dropdown-trigger slds-is-open" style="float: right">
                                                <a class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-small" aria-haspopup="true" style="line-height: 1.75">
                                                    <svg class="slds-button__icon" aria-hidden="true">
                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                                    </svg>
                                                </a>
                                                <div class="slds-dropdown slds-dropdown_right" style="width: max-content">
                                                    <ul class="slds-dropdown__list" role="menu">
                                                        <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                            <a ng-click="openNewNoteModal()" role="menuitemcheckbox">{!$Label.New}</a>
                                                        </li>
                                                        <li class="slds-dropdown__item" ng-show="pageVariables['relatedNotesList'].length > 0" style="margin-left: 0" role="presentation">
                                                            <a ng-click="viewAllRefNotes()" role="menuitemcheckbox">{!$Label.View_All}</a>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div ng-show="pageVariables['relatedNotesList'].length > 0">
                                        <div class="slds-text-heading_medium" style="margin-bottom: 1rem">
                                            {!$Label.Reference_Notes}
                                            <div class="slds-dropdown-trigger slds-is-open" style="float: right">
                                                <a class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-small" aria-haspopup="true" style="line-height: 1.75">
                                                    <svg class="slds-button__icon" aria-hidden="true">
                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                                    </svg>
                                                </a>
                                                <div class="slds-dropdown slds-dropdown_right" style="width: max-content">
                                                    <ul class="slds-dropdown__list" role="menu">
                                                        <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                            <a ng-click="openNewNoteModal()" role="menuitemcheckbox">{!$Label.New}</a>
                                                        </li>
                                                        <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                            <a ng-click="viewAllRefNotes()" role="menuitemcheckbox">{!$Label.View_All}</a>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                        <article class="slds-tile slds-hint-parent slds-p-left_small slds-p-bottom_small" ng-repeat="note in pageVariables['relatedNotesList']">
                                            <div class="slds-grid slds-grid_align-spread slds-has-flexi-truncate">
                                                <div class="noteValueDiv" ng-bind-html="note['noteValue'] | renderHtml"></div>
                                                <div class="slds-shrink-none">
                                                    <div class="slds-dropdown-trigger slds-is-open">
                                                        <a class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small" aria-haspopup="true" style="line-height: 1.3">
                                                            <svg class="slds-button__icon" aria-hidden="true">
                                                                <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                                            </svg>
                                                        </a>
                                                        <div class="slds-dropdown slds-dropdown_right" style="width: max-content">
                                                            <ul class="slds-dropdown__list" role="menu">
                                                                <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                    <a ng-click="openNewNoteModal(note)" role="menuitemcheckbox">{!$Label.Edit}</a>
                                                                </li>
                                                                <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                    <a ng-click="openDeleteConfirmation(note['refNoteId'])" role="menuitemcheckbox">{!$Label.DeleteFull}</a>
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="slds-tile__detail slds-text-body_small">
                                                <dl class="slds-list_horizontal slds-wrap">
                                                    <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Created_By}:</dt>
                                                    <dd class="slds-item_detail slds-truncate">{{note['createdBy']}}</dd>
                                                    <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$ObjectType.Reference_Note__c.fields.Note_Date__c.Label}:</dt>
                                                    <dd class="slds-item_detail slds-truncate">{{note['noteDate']}}</dd>
                                                </dl>
                                            </div>
                                        </article>
                                    </div>
                                </div>
                                <!-- REF-2132 -->
                                <div class="slds-tabs_default__content" ng-show="pageVariables['selectedTabRight'] == 'uploadedFiles'" role="tabpanel">
                                    <div ng-show="listOfUploadedFile.length == 0">
                                        <div class="slds-text-heading_medium">{!$Label.No_Data_Found}</div>
                                    </div>
                                    <div ng-show="listOfUploadedFile.length > 0">
                                        <article class="slds-tile slds-hint-parent slds-p-left_small slds-p-bottom_small" ng-repeat="file in listOfUploadedFile">
                                            <div class="slds-tile__detail slds-text-body_small">
                                                <dl class="slds-list_horizontal slds-wrap">
                                                    <dt class="slds-item_label slds-text-color_weak slds-truncate">Title:</dt>
                                                    <dd class="slds-item_detail slds-truncate">
                                                        <a href="/{{file.Id}}" >{{file.Title}}</a>
                                                    </dd>
                                                    <dt class="slds-item_label slds-text-color_weak slds-truncate">Type:</dt>
                                                    <dd class="slds-item_detail slds-truncate">{{file.FileType}}</dd>
                                                    <dt class="slds-item_label slds-text-color_weak slds-truncate">Size:</dt>
                                                    <dd class="slds-item_detail slds-truncate">{{file.ContentSize}}</dd>
                                                </dl>
                                            </div>
                                        </article>
                                    </div>
                                </div>
                                <!-- REF-1964 -->
                                <div class="slds-tabs_default__content" ng-show="isInfluitiveEnabled && pageVariables['selectedTabRight'] == 'influitive'" role="tabpanel">
                                    <div ng-show="!(pageVariables['selectedAdvocates'].length > 0) && !(pageVariables['postToInfluitiveWrapper']['listOfCIC'].length > 0)">
                                        <div class="slds-text-heading_medium">{!$Label.No_Data_Found}</div>
                                    </div>
                                    <div ng-show="pageVariables['selectedAdvocates'].length > 0 && !(pageVariables['postToInfluitiveWrapper']['listOfCIC'].length > 0)">
                                        <article class="slds-tile slds-hint-parent slds-p-left_small slds-p-bottom_small" ng-repeat="advocate in pageVariables['selectedAdvocates']" >
                                            <div class="slds-grid slds-grid_align-spread slds-has-flexi-truncate">
                                                <h3 class="slds-truncate">
                                                    <a href="/{{advocate['contactId']}}" target="_blank">{{advocate['contactName']}}</a>
                                                </h3>
                                                <div class="slds-shrink-none">
                                                    <div class="slds-dropdown-trigger slds-is-open">
                                                        <a class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small" aria-haspopup="true" style="line-height: 1.3">
                                                            <svg class="slds-button__icon" aria-hidden="true">
                                                                <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                                            </svg>
                                                        </a>
                                                        <div class="slds-dropdown slds-dropdown_right" style="width: max-content">
                                                            <ul class="slds-dropdown__list" role="menu">
                                                                <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                    <a ng-click="removeSelectedAdvocate(advocate);" role="menuitemcheckbox">Remove</a>
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="slds-tile__detail slds-text-body_small">
                                                <dl class="slds-list_horizontal slds-wrap">
                                                    <dt class="slds-item_label slds-text-color_weak slds-truncate">Account:</dt>
                                                    <dd class="slds-item_detail slds-truncate">{{advocate['accountName']}}</dd>
                                                </dl>
                                            </div>
                                        </article>
                                    </div>
                                    <div ng-show="pageVariables['postToInfluitiveWrapper']['listOfCIC'].length > 0">
                                        <article class="slds-tile slds-hint-parent slds-p-left_small slds-p-bottom_small" 
                                                 ng-repeat="cic in pageVariables['postToInfluitiveWrapper']['listOfCIC']" >
                                            <div class="slds-grid slds-grid_align-spread slds-has-flexi-truncate">
                                                <h3 class="slds-truncate">
                                                    <a href="/{{cic['Contact__c']}}" target="_blank">{{cic['Contact_Name__c']}}</a>
                                                </h3>
                                                <div class="slds-shrink-none"
                                                     ng-show="(cic['Response__c'] == 'Yes') && !(selectedRequestItem['requestStatus'] == 'Account Specified')">
                                                    <div class="slds-dropdown-trigger slds-is-open">
                                                        <a class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small" aria-haspopup="true" style="line-height: 1.3">
                                                            <svg class="slds-button__icon" aria-hidden="true">
                                                                <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                                            </svg>
                                                        </a>
                                                        <div class="slds-dropdown slds-dropdown_right" style="width: max-content">
                                                            <ul class="slds-dropdown__list" role="menu">
                                                                <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                    <a ng-click="assignAdvocate(cic['Contact__c']);" role="menuitemcheckbox">Assign</a>
                                                                </li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="slds-tile__detail slds-text-body_small">
                                                <dl class="slds-list_horizontal slds-wrap">
                                                    <dt class="slds-item_label slds-text-color_weak slds-truncate">Account:</dt>
                                                    <dd class="slds-item_detail slds-truncate">{{cic['Account_f__c']}}</dd>
                                                    <dt class="slds-item_label slds-text-color_weak slds-truncate">Type:</dt>
                                                    <dd class="slds-item_detail slds-truncate">{{cic['Referenceability_Type__c']}}</dd>
                                                    <dt class="slds-item_label slds-text-color_weak slds-truncate">Response:</dt>
                                                    <dd class="slds-item_detail slds-truncate"
                                                         ng-show="(cic['Response__c'] == 'Yes') || (cic['Response__c'] == 'No')">
                                                        {{cic['Response__c']}}
                                                    </dd>
                                                </dl>
                                            </div>
                                        </article>
                                    </div>
                                </div>
                                <div class="slds-tabs_default__content" ng-show="pageVariables['isProCom'] && pageVariables['selectedTabRight'] == 'community'" role="tabpanel">
                                    <div ng-show="pageVariables['communityInviteList'].length == 0">
                                        <div class="slds-text-heading_medium">{!$Label.No_Data_Found}</div>
                                    </div>
                                    <div ng-show="pageVariables['communityInviteList'].length > 0">
                                        <article ng-repeat="cic in pageVariables['communityInviteList']" class="slds-tile slds-media slds-p-left_small slds-p-bottom_small">
                                            <div class="slds-media__figure">
                                                <span ng-click="toggleCommunityInvitePopover(cic, $index)" id="{{'cicPopover' + $index}}"  class="slds-icon_container slds-icon-utility-announcement">
                                                    <svg class="slds-icon slds-icon-text-light" aria-hidden="true">
                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#info_alt')}"></use>
                                                    </svg>
                                                </span>
                                                <div ng-click="toggleCommunityInvitePopover(cic)" class="popoverBackdrop" ng-if="cic['showPopover']">
                                                    <section class="slds-popover slds-popover_panel slds-nubbin_right hitListPopover" style="top: {{pageVariables['popoverStyle']['top']}}; left: {{pageVariables['popoverStyle']['left']}}" ng-click="$event.stopPropagation()" role="dialog">
                                                        <a ng-click="toggleCommunityInvitePopover(cic)" class="slds-button slds-button_icon slds-button_icon slds-button_icon-small slds-float_right slds-popover__close" style="line-height: 1.5">
                                                            <svg class="slds-button__icon" aria-hidden="true">
                                                                <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                                            </svg>
                                                        </a>
                                                        <div class="slds-popover__header" style="padding: 0.75rem">
                                                            <header class="slds-media slds-media_center slds-m-bottom_small">
                                                                <span class="slds-icon_container slds-icon-standard-contact slds-media__figure">
                                                                    <svg class="slds-icon slds-icon_small" aria-hidden="true">
                                                                        <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/standard-sprite/svg/symbols.svg#contact')}"></use>
                                                                    </svg>
                                                                </span>
                                                                <div class="slds-media__body">
                                                                    <h2 class="slds-text-heading_medium slds-hyphenate">
                                                                        <a href="/{{cic['contactId']}}" style="text-decoration: none" target="_blank">
                                                                            {{cic['contactName']}}
                                                                        </a>
                                                                    </h2>
                                                                </div>
                                                            </header>
                                                            <footer class="slds-grid slds-wrap">
                                                                <div class="slds-p-right_small slds-size_1-of-3">
                                                                    <dl style="padding-bottom: 5px">
                                                                        <dt>
                                                                            <p title="{!$Label.T_Last_Used}" class="slds-text-title_caps slds-truncate">{!$Label.T_Last_Used}</p>
                                                                        </dt>
                                                                        <dd>
                                                                            <p ng-show="cic['lastUsed'] != ''">{{cic['lastUsed']}}</p>
                                                                            <p ng-show="cic['lastUsed'] == ''">&nbsp;</p>
                                                                        </dd>
                                                                    </dl>
                                                                    <dl style="padding-bottom: 5px; width: 120px;">
                                                                        <dt>
                                                                            <p title="{{contactRULPeriod}}" class="slds-text-title_caps slds-truncate">{{contactRULPeriod}}</p>
                                                                        </dt>
                                                                        <dd>
                                                                            <p ng-show="cic['lastNDays'] != ''">{{cic['lastNDays']}}</p>
                                                                            <p ng-show="cic['lastNDays'] == ''">&nbsp;</p>
                                                                        </dd>
                                                                    </dl>
                                                                    <dl style="padding-bottom: 5px">
                                                                        <dt>
                                                                            <p title="{!$Label.Assigned}" class="slds-text-title_caps slds-truncate">{!$Label.Assigned}</p>
                                                                        </dt>
                                                                        <dd>
                                                                            <p>{{cic['assignCount']}}</p>
                                                                        </dd>
                                                                    </dl>
                                                                    <dl>
                                                                        <dt>
                                                                            <p title="{!$ObjectType.Hit_List__c.Label}" class="slds-text-title_caps slds-truncate">{!$ObjectType.Hit_List__c.Label}</p>
                                                                        </dt>
                                                                        <dd>
                                                                            <p>{{cic['hitCount']}}</p>
                                                                        </dd>
                                                                    </dl>
                                                                </div>
                                                                <div class="slds-size_2-of-3">
                                                                    <dl>
                                                                        <dt>
                                                                            <p class="slds-text-title_caps slds-truncate">{!$Label.Phone}</p>
                                                                        </dt>
                                                                        <dd>
                                                                            <p>{{cic['phone']}}</p>
                                                                        </dd>
                                                                    </dl>
                                                                    <dl>
                                                                        <dt>
                                                                            <p class="slds-text-title_caps slds-truncate">{!$Label.Email}</p>
                                                                        </dt>
                                                                        <dd>
                                                                            <p>{{cic['email']}}</p>
                                                                        </dd>
                                                                    </dl>
                                                                </div>
                                                            </footer>
                                                        </div>
                                                    </section>
                                                </div>
                                            </div>
                                            <div class="slds-media__body">
                                                <div class="slds-grid slds-grid_align-spread slds-has-flexi-truncate">
                                                    <h3 class="slds-truncate">
                                                        <a href="/{{cic['contactId']}}" target="_blank">{{cic['contactName']}}</a>
                                                    </h3>
                                                    <div class="slds-shrink-none">
                                                        <div class="slds-dropdown-trigger slds-is-open">
                                                            <a class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small" aria-haspopup="true" style="line-height: 1.3">
                                                                <svg class="slds-button__icon" aria-hidden="true">
                                                                    <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#down')}"></use>
                                                                </svg>
                                                            </a>
                                                            <div class="slds-dropdown slds-dropdown_right" style="width: max-content">
                                                                <ul class="slds-dropdown__list" role="menu">
                                                                    <li ng-show="pageVariables['isSelectedRequestActive']" class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                        <a ng-click="assignCommunityInvite(cic)" role="menuitemcheckbox">{!$Label.Assign}</a>
                                                                    </li>
                                                                    <li class="slds-dropdown__item" style="margin-left: 0" role="presentation">
                                                                        <a ng-click="removeCommunityInvite(cic['cicId'])" role="menuitemcheckbox">{!$Label.Remove}</a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="slds-tile__detail slds-text-body_small">
                                                    <dl class="slds-list_horizontal slds-wrap">
                                                        <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Account}:</dt>
                                                        <dd class="slds-item_detail slds-truncate">{{cic['accountName']}}</dd>
                                                        <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Type}:</dt>
                                                        <dd class="slds-item_detail slds-truncate">{{cic['refTypeName']}}</dd>
                                                        <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Response}:</dt>
                                                        <dd class="slds-item_detail slds-truncate">{{cic['response']}}</dd>
                                                    </dl>
                                                </div>
                                            </div>
                                        </article>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                   <!-- REF-1964 post to influitive modal-->
                    <div ng-show="pageVariables['showPostToInfluitiveModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container" style="width: 60%; max-width: inherit">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelPostToInfluitiveModal()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.Post_to_Influitive}</h2>
                                </header>
                                <div class="slds-modal__content slds-p-vertical_medium slds-p-horizontal_x-small" style="overflow: auto; max-height: 65vh">
                                    <div ng-show="pageVariables['showInfluitiveError']" class="slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_error" style="border-radius: 3px; position: absolute; left: 1rem; right: 2rem; width: auto; z-index: 9999" role="alert">
                                        <h2>{{pageVariables['influitiveErrorMsg']}}</h2>
                                    </div>
                                    <div class="slds-grid slds-wrap" ng-class="{'topMargin' : pageVariables['showInfluitiveError']}">
                                        <div class="slds-size_1-of-1 slds-p-bottom_small slds-p-horizontal_x-small slds-text-body_regular">
                                            {!$Label.Post_to_Influitive} Detail
                                        </div>
                                        <div class="slds-size_1-of-2 slds-p-horizontal_x-small">
                                            <div class="slds-p-bottom_small slds-box slds-theme_shade">
                                                <div class="slds-text-heading_small slds-p-bottom_small">Contacts Participating</div>
                                                <div class="slds-form-element">
                                                    <span class="slds-form-element__label">Number of Contacts included in the challenge</span>
                                                    <div class="slds-form-element__control">
                                                        <span class="slds-form-element__static" style="line-height: 1; min-height: 0">
                                                            {{pageVariables['selectedAdvocates'].length}}
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <!-- REF-2302 On Hold as Influitive may include this in future
                                            <div class="slds-form-element slds-p-bottom_small" ng-show="pageVariables['selectedAdvocates'].length == 0">
                                                <span class="slds-form-element__label">
                                                    {!$Label.Text_Target_Challenge_To_All_Advocates}
                                                </span>
                                                <div class="slds-form-element__control"> 
                                                    <label class="slds-checkbox">
                                                        <input type="checkbox" ng-model="pageVariables['postToInfluitiveWrapper']['targetChallengeTOAllAdvocates']" />
                                                        <span class="slds-checkbox--faux"></span>
                                                    </label>
                                                </div>
                                            </div> -->
                                            
                                            <div class="slds-form-element slds-p-bottom_small" ng-show="pageVariables['selectedAdvocates'].length > 0">
                                                <span>&nbsp;</span>
                                            </div>
                                            
                                            <div class="slds-size_1-of-1 slds-form-element slds-p-vertical_small">
                                                <span class="slds-form-element__label">
                                                    {!$ObjectType.Reference_Request_Account__c.fields.Reference_Type_Needed__c.Label}
                                                    <span style="color: #c23934">*</span>
                                                </span>
                                                <div class="slds-form-element__control">
                                                    <select class="slds-select" ng-model="selectedRequestItem['refTypeId']" 
                                                            ng-options="rt['refTypeId'] as rt['refTypeName'] for rt in refTypesList">
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-p-bottom_small slds-p-horizontal_x-small">
                                            <div class="slds-form-element slds-p-bottom_small">
                                                <span class="slds-form-element__label">
                                                    Participant Limit
                                                </span>
                                                <div class="slds-form-element__control">
                                                    <input class="slds-input" type="text"  
                                                           onkeypress="return (event.charCode == 8 || event.charCode == 0 || event.charCode == 13) ? null : event.charCode >= 48 && event.charCode <= 57" 
                                                           ng-model="pageVariables['postToInfluitiveWrapper']['participantLimit']" />
                                                </div>
                                            </div>
                                            <div class="slds-form-element slds-p-bottom_small">
                                                <span class="slds-form-element__label">
                                                    Deadline<span style="color: #c23934">*</span>
                                                </span>
                                                <div class="slds-form-element__control">
                                                    <input class="slds-input" ng-model="selectedRequestItem['deadline']" placeholder="{{dateFormat.toLowerCase()}}" date-format="{{dateFormat}}" datetime-picker="datetime-picker" />
                                                </div>
                                            </div>
                                            <div class="slds-form-element">
                                                <span class="slds-form-element__label">
                                                    {!$Label.Details}
                                                </span>
                                                <div class="slds-form-element__control">
                                                    <textarea class="slds-textarea" ng-model="pageVariables['postToInfluitiveWrapper']['notes']"></textarea>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelPostToInfluitiveModal()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_brand" ng-click="savePostToInfluitiveModal()">{!$Label.Post}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>
                   
                    <!-- post to community modal -->
                    <div ng-show="pageVariables['showPostToCommunityModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container" style="width: 60%; max-width: inherit">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelPostToCommunityModal()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.Post_to_Community}</h2>
                                </header>
                                <div class="slds-modal__content slds-p-vertical_medium slds-p-horizontal_x-small" style="overflow: auto; max-height: 65vh">
                                    <div ng-show="pageVariables['showCommunityError']" class="slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_error" style="border-radius: 3px; position: absolute; left: 1rem; right: 2rem; width: auto; z-index: 9999" role="alert">
                                        <h2>{{pageVariables['communityErrorMsg']}}</h2>
                                    </div>
                                    <div class="slds-grid slds-wrap" ng-class="{'topMargin' : pageVariables['showCommunityError']}">
                                        <div class="slds-size_1-of-1 slds-p-bottom_small slds-p-horizontal_x-small slds-text-body_regular">
                                            {!$Label.PostToCommunity_Detail}
                                        </div>
                                        <div class="slds-size_1-of-2 slds-p-horizontal_x-small">
                                            <div class="slds-p-bottom_small slds-box slds-theme_shade">
                                                <div class="slds-text-heading_small slds-p-bottom_small">{!$Label.Matching_Members}</div>
                                                <div class="slds-form-element">
                                                    <span class="slds-form-element__label">{!$Label.Matching_Criteria}</span>
                                                    <div class="slds-form-element__control">
                                                        <span class="slds-form-element__static" style="line-height: 1; min-height: 0">
                                                            {{pageVariables['matchingMembersCount']}}
                                                        </span>
                                                        <div ng-show="pageVariables['matchingMembersLoading']" role="status" class="slds-spinner slds-spinner_brand slds-spinner_x-small" style="top: 74%; width: 0.9rem; left: 10%">
                                                            <span class="slds-assistive-text">Loading</span>
                                                            <div class="slds-spinner__dot-a"></div>
                                                            <div class="slds-spinner__dot-b"></div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="slds-form-element slds-p-vertical_small">
                                                <span class="slds-form-element__label">{!$Label.Request_Type}</span>
                                                <div class="slds-form-element__control">
                                                    <span class="slds-form-element__static">
                                                        {{selectedRequestItem['refTypeName']}}
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="slds-form-element slds-p-bottom_small">
                                                <div class="slds-form-element__control">
                                                    <span class="slds-checkbox">
                                                        <input ng-change="handleIncludeChange(pageVariables['includeReqTypeInCommunity'])" type="checkbox" ng-model="pageVariables['includeReqTypeInCommunity']" name="includeCB" id="includeCB" />
                                                        <label class="slds-checkbox__label" for="includeCB">
                                                            <span class="slds-form-element__label">{!$Label.Include}&nbsp;{!$Label.Request_Type}</span>
                                                            <span class="slds-checkbox_faux"></span>
                                                        </label>
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="slds-form-element slds-p-bottom_small">
                                                <span class="slds-form-element__label">
                                                    {!$ObjectType.Reference_Request_Account__c.fields.Deadline__c.Label}<span style="color: #c23934">*</span>
                                                </span>
                                                <div class="slds-form-element__control">
                                                    <input class="slds-input" ng-model="pageVariables['communityDeadline']" placeholder="{{dateFormat.toLowerCase()}}" date-format="{{dateFormat}}" datetime-picker="datetime-picker" />
                                                </div>
                                            </div>
                                            <div class="slds-form-element slds-p-bottom_small">
                                                <span class="slds-form-element__label">
                                                    {!$Label.With}<span style="color: #c23934">*</span>
                                                </span>
                                                <div class="slds-form-element__control">
                                                    <input class="slds-input" ng-model="pageVariables['communityWith']" />
                                                </div>
                                            </div>
                                            <div class="slds-form-element">
                                                <span class="slds-form-element__label">
                                                    {!$Label.Details}<span style="color: #c23934">*</span>
                                                </span>
                                                <div class="slds-form-element__control">
                                                    <textarea class="slds-textarea" ng-model="pageVariables['communityDetails']" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="slds-size_1-of-2 slds-p-bottom_small slds-p-horizontal_x-small">
                                            <div class="slds-text-heading_small slds-p-bottom_small">{!$Label.Icon_Image}</div>
                                            <span class="slds-form-element__label">{!$Label.Icon}</span><br />
                                            <span ng-show="refTypesMap[selectedRequestItem['refTypeId']]['icon'] != ''" class="slds-icon_container slds-icon-utility-announcement">
                                                <svg class="slds-icon slds-icon-text-default slds-icon_small" aria-hidden="true">
                                                    <use xlink:href="{{sldsBaseURL + refTypesMap[selectedRequestItem['refTypeId']]['icon']}}"></use>
                                                </svg>
                                            </span>
                                            <div ng-show="refTypesMap[selectedRequestItem['refTypeId']]['icon'] == ''">{!$Label.NoIconToDisplay}</div><br />
                                            <span class="slds-form-element__label slds-p-top_small">{!$Label.Community_Image}</span><br />
                                            <div ng-show="refTypesMap[selectedRequestItem['refTypeId']]['imageId'] == ''">{!$Label.NoImage}</div><br />
                                            <img ng-show="refTypesMap[selectedRequestItem['refTypeId']]['imageId'] != ''" alt="community image"
                                                ng-src="/servlet/servlet.FileDownload?file={{refTypesMap[selectedRequestItem['refTypeId']]['imageId']}}" style="height: 8rem; max-width: 100%" />
                                            <div class="slds-p-top_small">
                                                <div class="slds-text-heading_small slds-p-right_small">
                                                    {!$Label.Attributes}
                                                    <a class="slds-button slds-button_neutral" ng-click="openAttributesModal(true)" style="float: right">
                                                        {!$Label.Edit}
                                                    </a>
                                                </div>
                                                <div ng-repeat="(filterId, attNames) in communityFilterAttNamesMap" class="slds-form-element" ng-show="filterAttributesMap[filterId].length > 0" style="padding: 0.25rem 0;">
                                                    <span class="slds-form-element__label">
                                                        {{filterAttributesMap[filterId][0]['filterName']}}
                                                    </span>
                                                    <div class="slds-form-element__control">
                                                        <span class="slds-form-element__static">{{attNames}}</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelPostToCommunityModal()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_brand" ng-click="savePostToCommunityModal()">{!$Label.Post}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- Edit request modal -->
                    <div ng-if="pageVariables['showEditRequestModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelEditRequestModal()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.Edit}&nbsp;{!$Label.Request}</h2>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium" style="overflow: auto; max-height: 65vh">
                                    <div ng-show="pageVariables['showEditRequestError']" class="slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_error" style="border-radius: 3px; margin-bottom: 0.5rem" role="alert">
                                        <h2>{{pageVariables['editRequestErrorMsg']}}</h2>
                                    </div>
                                    <div class="slds-grid slds-wrap">
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_x-small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Type}
                                            </span>
                                            <div class="slds-form-element__control">
                                                <select class="slds-select" ng-model="requestItemToEdit['refTypeId']" ng-change="handleRefTypeChange()" ng-options="rt['refTypeId'] as rt['refTypeName'] for rt in refTypesList"></select>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_x-small">
                                            <span class="slds-form-element__label">{!$Label.Request}</span>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span class="slds-form-element__static">
                                                    <a href="/{{requestItemToEdit['accRequestId']}}" target="_blank" ng-show="!pageVariables['isUrEdit']">
                                                        {{requestItemToEdit['accRequestName']}}
                                                    </a>
                                                    <a href="/{{requestItemToEdit['unspecRequestId']}}" target="_blank" ng-show="pageVariables['isUrEdit']">
                                                        {{requestItemToEdit['unspecRequestName']}}
                                                    </a>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_x-small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Status}<span style="color: #c23934">*</span>
                                            </span>
                                            <div class="slds-form-element__control">
                                                <select class="slds-select" ng-model="requestItemToEdit['requestStatus']" ng-show="!pageVariables['isUrEdit']">
                                                    <option ng-repeat="st in accReqStatusPicklistValues" value="{{st}}">{{st}}</option>
                                                </select>
                                                <select class="slds-select" ng-model="requestItemToEdit['requestStatus']" ng-show="pageVariables['isUrEdit']">
                                                    <option ng-repeat="st in unspecReqStatusPicklistValues" value="{{st}}">{{st}}</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_x-small">
                                            <span class="slds-form-element__label">
                                                {!$ObjectType.Reference_Request_Account__c.fields.Deadline__c.Label}<span style="color: #c23934">*</span>
                                            </span>
                                            <div class="slds-form-element__control">
                                                <input class="slds-input" ng-model="requestItemToEdit['deadline']" placeholder="{{dateFormat.toLowerCase()}}" date-format="{{dateFormat}}" datetime-picker="datetime-picker" />
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_x-small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Account}
                                            </span>
                                            <div ng-if="refRequestWrapper['projectType'] == 'Member'" class="slds-form-element__control">
                                                <lookup-picklist object-Name="'Accounts'" object-Api-Name="'MemberAccounts'"
                                                    selected-Id="requestItemToEdit['accountId']" selected-Name="requestItemToEdit['accountName']">
                                                </lookup-picklist>
                                            </div>
                                            <div ng-if="refRequestWrapper['projectType'] == 'Candidate'" class="slds-form-element__control">
                                                <lookup-picklist object-Name="'Accounts'" object-Api-Name="'CandidateAccounts'"
                                                    selected-Id="requestItemToEdit['accountId']" selected-Name="requestItemToEdit['accountName']">
                                                </lookup-picklist>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_x-small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Contact}
                                            </span>
                                            <div ng-show="tempRequestItemToEdit['contactId'] == null || tempRequestItemToEdit['contactId'] == ''" class="slds-form-element__control">
                                                <lookup-picklist object-Name="'Contacts'" object-Api-Name="'ContactsFromAccount,' + requestItemToEdit['accountId'] + ',null'"
                                                    extended-scope="pageVariables['contactLookupScope']" selected-Id="requestItemToEdit['contactId']" selected-Name="requestItemToEdit['contactName']">
                                                </lookup-picklist>
                                            </div>
                                            <div ng-show="tempRequestItemToEdit['contactId'] != null && tempRequestItemToEdit['contactId'] != ''" class="slds-form-element__control slds-border_bottom">
                                                <span class="slds-form-element__static">
                                                    <a href="/{{requestItemToEdit['contactId']}}" target="_blank">
                                                        {{requestItemToEdit['contactName']}}
                                                    </a>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_x-small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Process}
                                            </span>
                                            <div class="slds-form-element__control" ng-show="refRequestWrapper['projectType'] == 'Member'">
                                                <select class="slds-select" ng-model="requestItemToEdit['process']">
                                                    <option value="Managed">{!$Label.Managed}</option>
                                                    <option value="Peer2Peer">{!$Label.Peer2Peer}</option>
                                                </select>
                                            </div>
                                            <div class="slds-form-element__control slds-border_bottom" ng-show="refRequestWrapper['projectType'] == 'Candidate'">
                                                <span class="slds-form-element__static">{!$Label.Managed}</span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-around_x-small">
                                            <span class="slds-form-element__label">
                                                {!$ObjectType.Reference_Request_Account__c.fields.Project_Owner__c.Label}
                                            </span>
                                            <div class="slds-form-element__control">
                                                <lookup-picklist object-Name="'Users'" object-Api-Name="'Active_Non_Community_Users'"
                                                    selected-Id="requestItemToEdit['ownerId']" selected-Name="requestItemToEdit['ownerName']">
                                                </lookup-picklist>
                                            </div>
                                        </div>
                                        <div ng-show="pageVariables['isAddInfoPresent']" class="slds-text-heading_small slds-size_1-of-1" style="margin-top: 0.5rem">
                                            {!$Label.Requested_Information}
                                        </div>
                                        <div ng-show="pageVariables['isAddInfoPresent']" ng-repeat="(apiName, field) in selectedRequestAdditionalInfo" class="slds-size_1-of-2 slds-form-element slds-p-around_x-small">
                                            <span class="slds-form-element__label">
                                                {{field['fieldLabel']}}
                                                <span ng-show="field['required']" style="color: #c23934">*</span>
                                            </span>
                                            <div ng-show="field['fieldType'] != 'DATE' && field['fieldType'] != 'PICKLIST' && field['fieldType'] != 'TEXTAREA' && field['fieldType'] != 'BOOLEAN'" class="slds-form-element__control">
                                                <input type="text" class="slds-input" ng-model="field['fieldValue']" />
                                            </div>
                                            <div class="slds-form-element__control" ng-show="field['fieldType'] == 'DATE' || field['fieldType'] == 'DATETIME'">
                                                <input class="slds-input" ng-model="field['fieldValue']" placeholder="{{dateFormat.toLowerCase()}}" date-format="{{dateFormat}}" datetime-picker="datetime-picker" />
                                            </div>
                                            <div class="slds-form-element__control" ng-show="field['fieldType'] == 'PICKLIST'">
                                                <select class="slds-select" ng-model="field['fieldValue']">
                                                    <option ng-repeat="option in field['availableOptions']" value="{{option['name']}}">{{option['label']}}</option>
                                                </select>
                                            </div>
                                            <div class="slds-form-element__control" ng-show="field['fieldType'] == 'TEXTAREA'">
                                                <textarea style="line-height: 100%; width: 100%" ng-model="field['fieldValue']" rows="3" class="slds-textarea"></textarea>
                                            </div>
                                            <div class="slds-form-element__control" ng-show="field['fieldType'] == 'BOOLEAN'">
                                                <span class="slds-checkbox slds-form-element__static">
                                                    <input type="checkbox" id="{{field['fieldApiName']}}" name="{{field['fieldApiName']}}" ng-model="field['booleanValue']" />
                                                    <label class="slds-checkbox__label" for="{{field['fieldApiName']}}">
                                                        <span class="slds-checkbox_faux"></span>
                                                    </label>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelEditRequestModal()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_brand" ng-click="saveEditRequestModal()">{!$Label.Save}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- Add Request Modal -->
                    <div ng-show="pageVariables['showAddRequestModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelAddRequestModal()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.Add}&nbsp;{!$Label.Request}</h2>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium" style="overflow: visible">
                                    <div ng-show="pageVariables['showAddRequestError']" class="slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_error" style="border-radius: 3px; margin-bottom: 0.5rem" role="alert">
                                        <h2>{{pageVariables['addRequestErrorMsg']}}</h2>
                                    </div>
                                    <div class="slds-grid slds-wrap">
                                        <div class="slds-size_1-of-1 slds-form-element slds-p-vertical_small">
                                            <span class="slds-form-element__label">
                                                {!$ObjectType.Reference_Request_Account__c.fields.Reference_Type_Needed__c.Label}<span style="color: #c23934">*</span>
                                            </span>
                                            <div class="slds-form-element__control">
                                                <select class="slds-select" ng-model="newRequestItem['refTypeId']" ng-options="rt['refTypeId'] as rt['refTypeName'] for rt in refTypesList"></select>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-1 slds-form-element slds-p-vertical_small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Account}
                                            </span>
                                            <div ng-show="refRequestWrapper['projectType'] == 'Member'" class="slds-form-element__control">
                                                <lookup-picklist object-Name="'Accounts'" object-Api-Name="'MemberAccounts'" extended-scope="pageVariables['addRequestAccountScope']"
                                                    selected-Id="newRequestItem['accountId']" selected-Name="newRequestItem['accountName']">
                                                </lookup-picklist>
                                            </div>
                                            <div ng-show="refRequestWrapper['projectType'] == 'Candidate'" class="slds-form-element__control">
                                                <lookup-picklist object-Name="'Accounts'" object-Api-Name="'CandidateAccounts'" extended-scope="pageVariables['addRequestAccountScope']"
                                                    selected-Id="newRequestItem['accountId']" selected-Name="newRequestItem['accountName']">
                                                </lookup-picklist>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-1 slds-form-element slds-p-vertical_small">
                                            <span class="slds-form-element__label">
                                                {!$ObjectType.Reference_Request_Account__c.fields.Deadline__c.Label}<span style="color: #c23934">*</span>
                                            </span>
                                            <div class="slds-form-element__control">
                                                <input class="slds-input" ng-model="newRequestItem['deadline']" placeholder="{{dateFormat.toLowerCase()}}" date-format="{{dateFormat}}" datetime-picker="datetime-picker" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelAddRequestModal()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_neutral" ng-click="saveAddRequestModal(true)">{!$Label.Save_and_New}</a>
                                    <a class="slds-button slds-button_brand" ng-click="saveAddRequestModal(false)">{!$Label.Save}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- Edit Attributes modal -->
                    <div ng-if="pageVariables['showAttributesModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open slds-modal_large">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelAttributesModal()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                        <span class="slds-assistive-text">Close</span>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.Edit}&nbsp;{!$Label.Attributes}</h2>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium">
                                    <div ng-show="pageVariables['showRequiredAttributesError']" class="slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_error" style="border-radius: 3px; margin-bottom: 0.5rem" role="alert">
                                        <h2>{!$Label.ERROR_SELECT_REQUIRED_VALUE}</h2>
                                    </div>
                                    <div ng-show="pageVariables['showAttributesModalError']" class="slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_error" style="border-radius: 3px; margin-bottom: 0.5rem" role="alert">
                                        <h2>{{pageVariables['attributesModalErrorMsg']}}</h2>
                                    </div>
                                    <div class="slds-grid slds-wrap">
                                        <div class="slds-size_1-of-1" ng-repeat="(filterId, attWrapperList) in filterAttributesMap" ng-show="attWrapperList.length > 0">
                                            <div class="slds-text-heading_small">
                                                <span class="slds-badge">
                                                    {{attWrapperList[0]['filterName']}}<span ng-show="requiredFiltersMap[filterId]" style="color: #c23934">*</span>
                                                </span>
                                            </div>
                                            <div class="slds-grid slds-wrap slds-grid_vertical-align-center" style="margin: 2% 0 2% 2%">
                                                <div ng-repeat="att in attWrapperList" class="slds-size_1-of-3">
                                                    <div class="slds-grid slds-wrap slds-grid_vertical-align-center">
                                                        <div class="slds-col slds-size_2-of-12">
                                                            <img class="green-check-icon" src="{!$Resource.GreenCheck}" ng-show="att['isSelected']" />
                                                        </div>
                                                        <div class="slds-col slds-size_10-of-12" ng-click="selectDeselectAttribute(att)" style="cursor: pointer; color: #16325c">
                                                            {{att['attName']}}
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <hr ng-hide="$last" />
                                        </div>
                                    </div>
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelAttributesModal()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_brand" ng-click="saveAttributesModal()">{!$Label.Save}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- Process change confirmation -->
                    <div ng-if="pageVariables['showProcessChangeConfirmation']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelProcessChange()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                        <span class="slds-assistive-text">Close</span>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.Change_Request_Title}</h2>
                                </header>
                                <div ng-show="requestItemToEdit['process'] == 'Peer2Peer'" class="slds-modal__content slds-p-around_medium">
                                    <div class="slds-text-heading_small slds-p-bottom_small">{!$Label.Change_Request_Message}</div>
                                    <ul style="list-style: inside">
                                        <li>{!$Label.Change_Request_Message1}</li>
                                        <li>{!$Label.Change_Request_Message2}</li>
                                        <li>{!$Label.Change_Request_Message3}</li>
                                        <li>{!$Label.Change_Request_Message4}</li>
                                    </ul>
                                    <div class="slds-text-heading_small slds-p-top_small">{!$Label.Change_Request_Message5}</div>
                                </div>
                                <div ng-show="requestItemToEdit['process'] == 'Managed'" class="slds-modal__content slds-p-around_medium">
                                    {!$Label.Change_Request_Type_Message}
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelProcessChange()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_brand" ng-click="saveProcessChange()">{!$Label.Continue}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- view all ref notes modal -->
                    <div ng-if="pageVariables['showAllNotesModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="closeAllNotesModal()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                        <span class="slds-assistive-text">Close</span>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.View_Reference_Notes}</h2>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium">
                                    <div ng-repeat="note in pageVariables['allNotesList']">
                                        <div class="slds-grid slds-wrap">
                                            <div class="slds-size_1-of-1 slds-form-element slds-p-around_xx-small">
                                                <span class="slds-form-element__label">{!$Label.Note}</span>
                                                <div class="slds-form-element__control">
                                                    <span class="slds-form-element__static">
                                                        <div class="noteValueDiv" ng-bind-html="note['noteValue'] | renderHtml"></div>
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="slds-size_1-of-2 slds-form-element slds-p-around_xx-small">
                                                <span class="slds-form-element__label">{!$ObjectType.Reference_Note__c.fields.Note_Date__c.Label}</span>
                                                <div class="slds-form-element__control">
                                                    <span class="slds-form-element__static">
                                                        {{note['noteDate']}}
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="slds-size_1-of-2 slds-form-element slds-p-around_xx-small">
                                                <span class="slds-form-element__label">{!$ObjectType.Reference_Note__c.fields.CreatedDate.Label}</span>
                                                <div class="slds-form-element__control">
                                                    <span class="slds-form-element__static">
                                                        {{note['createdDate']}}
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="slds-size_1-of-2 slds-form-element slds-p-around_xx-small">
                                                <span class="slds-form-element__label">{!$ObjectType.Reference_Note__c.fields.LastModifiedDate.Label}</span>
                                                <div class="slds-form-element__control">
                                                    <span class="slds-form-element__static">
                                                        {{note['lastModDate']}}
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="slds-size_1-of-2 slds-form-element slds-p-around_xx-small">
                                                <span class="slds-form-element__label">{!$Label.Last_Modified_By}</span>
                                                <div class="slds-form-element__control">
                                                    <span class="slds-form-element__static">
                                                        <a href="/{{note['lastModById']}}" target="_blank">
                                                            {{note['lastModBy']}}
                                                        </a>
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                        <hr ng-hide="$last" style="margin: 1rem 0" />
                                    </div>
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="closeAllNotesModal()">{!$Label.Close}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- preview/edit email modal for community -->
                    <div ng-if="pageVariables['showCommunityEmailModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelPostToCommunityModal()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                        <span class="slds-assistive-text">Close</span>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.E_mail_Preview}</h2>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium">
                                    <div class="slds-grid slds-wrap">
                                        <div class="slds-size_1-of-12">
                                            <label class="slds-form-element__label" style="line-height: 2.5">{!$Label.Subject}</label>
                                        </div>
                                        <div class="slds-size_11-of-12">
                                            <input type="text" class="slds-input" ng-model="communityEmailWrapper['subject']" />
                                        </div>
                                    </div>
                                    <div class="slds-form-element slds-m-top_x-small">
                                        <div class="slds-form-element__control">
                                            <textarea class="slds-textarea" ng-model="communityEmailWrapper['body']" rows="16" style="background-color: transparent"></textarea>
                                        </div>
                                    </div>
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelSendMailCommunity()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_brand" ng-click="sendCommunityMail(true, true)">{!$Label.Done}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- preview/edit email modal -->
                    <div ng-if="pageVariables['showEmailPreviewModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelSendMail()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                        <span class="slds-assistive-text">Close</span>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.E_mail_Preview}</h2>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium">
                                    <div class="slds-grid slds-wrap">
                                        <div class="slds-size_1-of-12">
                                            <label class="slds-form-element__label" style="line-height: 2.5">{!$Label.Subject}</label>
                                        </div>
                                        <div class="slds-size_11-of-12">
                                            <input type="text" class="slds-input" ng-model="emailWrapper['subject']" />
                                        </div>
                                    </div>
                                    <div class="slds-box slds-box_small slds-m-vertical_x-small">
                                        <div class="slds-form-element__label" ng-show="emailWrapper['noRefMatch']">
                                            {!$Label.NO_REFERENCE_MATCH}
                                        </div>
                                        <dl class="slds-list_horizontal slds-wrap">
                                            <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Use_Requested}:</dt>
                                            <dd class="slds-item_detail slds-truncate">{{emailWrapper['refTypeName']}}</dd>
                                            <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Opportunity_Name}:</dt>
                                            <dd class="slds-item_detail slds-truncate">{{emailWrapper['oppName']}}</dd>
                                            <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Reference_Account}:</dt>
                                            <dd class="slds-item_detail slds-truncate">{{emailWrapper['accName']}}</dd>
                                            <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Status}:</dt>
                                            <dd class="slds-item_detail slds-truncate">{{emailWrapper['status']}}</dd>
                                            <dt class="slds-item_label slds-text-color_weak slds-truncate">{!$Label.Need_by}:</dt>
                                            <dd class="slds-item_detail slds-truncate">{{emailWrapper['deadline']}}</dd>
                                        </dl>
                                        <div class="slds-form-element slds-m-top_small">
                                            <label class="slds-form-element__label">{!$Label.Notes}</label>
                                            <div class="slds-form-element__control">
                                                <textarea class="slds-textarea" ng-model="emailWrapper['notes']" rows="5" style="border: none; background-color: transparent"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="slds-form-element">
                                        <div class="slds-form-element__control">
                                            <span class="slds-checkbox">
                                                <input type="checkbox" ng-model="emailWrapper['writeToNote']" name="writeToNoteCB" id="writeToNoteCB" />
                                                <label class="slds-checkbox__label" for="writeToNoteCB">
                                                    <span class="slds-form-element__label">{!$Label.Write_to_Notes}</span>
                                                    <span class="slds-checkbox_faux"></span>
                                                </label>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelSendMail()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_brand" ng-click="sendMail(true, true)">{!$Label.Done}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- Notify requester modal on status/owner change -->
                    <div ng-if="pageVariables['showNotifyRequesterModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelProcessChange()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.Send_notification}</h2>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium">
                                    {!$Label.Options_to_notify}
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelSendMail()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_neutral" ng-click="sendMail(false, false)">{!$Label.Do_Not_Send}</a>
                                    <a class="slds-button slds-button_neutral" ng-click="editAndSendMail()">{!$Label.Edit_then_Send}</a>
                                    <a class="slds-button slds-button_brand" ng-click="sendMail(true, false)">{!$Label.Send}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- Notify requester modal on status/owner change -->
                    <div ng-if="pageVariables['showNotifyCommunityMemberModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelPostToCommunityModal()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.Send_notification}</h2>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium">
                                    {!$Label.Options_to_notify_community}
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelPostToCommunityModal()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_neutral" ng-click="sendCommunityMail(false, false)">{!$Label.Do_Not_Send}</a>
                                    <a class="slds-button slds-button_neutral" ng-click="editCommunityMail()">{!$Label.Edit_then_Send}</a>
                                    <a class="slds-button slds-button_brand" ng-click="sendCommunityMail(true, false)">{!$Label.Send}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- Notify requester modal on status/owner change -->
                    <div ng-if="pageVariables['showProcessChangeError']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header slds-modal__header_empty">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="hideProcessChangeError()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </a>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium">
                                    {{processChangeErrorMsg}}
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="hideProcessChangeError()">{!$Label.Ok}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- delete reference note confirmation modal -->
                    <div ng-if="pageVariables['showDeleteNoteModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelDelete()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">
                                        {!$Label.DeleteFull}&nbsp;{!$Label.Approval_Decline_Notes}
                                    </h2>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium">
                                    {!$Label.Delete_Ref_Note_Confirmation}
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelDelete()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_brand" ng-click="confirmDelete()">{!$Label.Ok}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- release all hit lists confirmation modal -->
                    <div ng-if="pageVariables['showReleaseAllModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelReleaseAll()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">
                                        {!$Label.Release_All}
                                    </h2>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium">
                                    {!$Label.ReleaseAllMessage}
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelReleaseAll()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_brand" ng-click="saveReleaseAll()">{!$Label.Ok}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- assign hit list confirmation modal -->
                    <div ng-if="pageVariables['showAssignHitListModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">
                                        {!$Label.Assign}
                                    </h2>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium">
                                    {!$Label.set_Disposition}
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="assignHitList(false)">{!$Label.No}</a>
                                    <a class="slds-button slds-button_brand" ng-click="assignHitList(true)">{!$Label.Yes}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- hit list disposition modal -->
                    <div ng-if="pageVariables['showDispositionModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelDispositionModal()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">
                                        {!$ObjectType.Hit_List__c.fields.Disposition__c.Label}
                                    </h2>
                                </header>
                                <div class="slds-modal__content slds-p-vertical_medium slds-p-horizontal_x-large">
                                    <div class="slds-form-element">
                                        <div class="slds-form-element__control">
                                            <select class="slds-select" ng-model="selectedHitListRecord['disposition']">
                                                <option ng-repeat="val in dispositionPicklistValues" value="{{val}}">{{val}}</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelDispositionModal()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_brand" ng-click="saveDispositionModal()">{!$Label.Save}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- edit hit list note modal -->
                    <div ng-if="pageVariables['showHitListNoteModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelHitListNoteModal()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.Add_note_for_Hit_List_item}</h2>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium">
                                    <div class="slds-grid slds-wrap">
                                        <div class="slds-size_1-of-1 slds-text-heading_small slds-p-bottom_small">
                                            {!$Label.Account_Contact_Information}
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-horizontal_x-small slds-p-bottom_small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Account}
                                            </span>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span class="slds-form-element__static">
                                                    <a href="/{{selectedHitListRecord['accountId']}}" target="_blank">
                                                        {{selectedHitListRecord['accountName']}}
                                                    </a>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-horizontal_x-small slds-p-bottom_small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Contact}
                                            </span>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span class="slds-form-element__static" ng-show="selectedHitListRecord['contactId'] != ''">
                                                    <a href="/{{selectedHitListRecord['contactId']}}" target="_blank">
                                                        {{selectedHitListRecord['contactName']}}
                                                    </a>
                                                </span>
                                                <span class="slds-form-element__static" ng-show="selectedHitListRecord['contactId'] == ''">&nbsp;</span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-1 slds-form-element slds-p-top_small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Approval_Decline_Notes}
                                            </span>
                                            <div class="slds-form-element__control">
                                                <textarea class="slds-textarea" rows="4" ng-model="selectedHitListRecord['notes']" ng-change="checkTextAreaLimit(selectedHitListRecord['notes'])" style="margin-bottom: 3px;"></textarea>
												<span id="limitCheck"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelHitListNoteModal()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_brand" ng-click="saveHitListNoteModal()">{!$Label.Save}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- Create hit list reminder modal -->
                    <div ng-show="pageVariables['showAddReminderModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelAddReminderModal()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.Set_Reminder_for_Hit_List_Item}</h2>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium">
                                    <div ng-show="pageVariables['showHitListReminderError']" class="slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_error" style="border-radius: 3px; margin-bottom: 0.5rem" role="alert">
                                        <h2>{{pageVariables['hitListReminderErrorMsg']}}</h2>
                                    </div>
                                    <div class="slds-grid slds-wrap">
                                        <div class="slds-size_1-of-1 slds-text-heading_small slds-p-bottom_small">
                                            {!$Label.Account_Contact_Information}
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-horizontal_x-small slds-p-bottom_small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Account}
                                            </span>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span class="slds-form-element__static">
                                                    <a href="/{{selectedHitListRecord['accountId']}}" target="_blank">
                                                        {{selectedHitListRecord['accountName']}}
                                                    </a>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-horizontal_x-small slds-p-bottom_small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Contact}
                                            </span>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span class="slds-form-element__static" ng-show="selectedHitListRecord['contactId'] != ''">
                                                    <a href="/{{selectedHitListRecord['contactId']}}" target="_blank">
                                                        {{selectedHitListRecord['contactName']}}
                                                    </a>
                                                </span>
                                                <span class="slds-form-element__static" ng-show="selectedHitListRecord['contactId'] == ''">&nbsp;</span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-1 slds-text-heading_small slds-p-vertical_small">
                                            {!$Label.Reminder_Date_Time}
                                        </div>
                                        <div class="slds-size_1-of-5 slds-form-element slds-p-bottom_small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Date}<span style="color: #c23934">*</span>
                                            </span>
                                            <div class="slds-form-element__control">
                                                <input class="slds-input" ng-model="hitListReminder['date']" placeholder="{{dateFormat.toLowerCase()}}"
                                                    date-format="{{dateFormat}}" datetime-picker="datetime-picker" />
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-5 slds-form-element slds-m-left_small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Time}
                                            </span>
                                            <div class="slds-form-element__control" style="width: 100%">
                                                <select class="slds-select" ng-model="hitListReminder['time']" ng-options="value as label for (value, label) in timePicklistValues"></select>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-1 slds-form-element slds-p-vertical_small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Subject}<span style="color: #c23934">*</span>
                                            </span>
                                            <div class="slds-form-element__control">
                                                <input class="slds-input" type="text" ng-model="hitListReminder['subject']" />
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-1 slds-form-element slds-p-vertical_small">
                                            <span class="slds-form-element__label">
                                                {!$Label.Notes}
                                            </span>
                                            <div class="slds-form-element__control">
                                                <textarea class="slds-textarea" ng-model="hitListReminder['notes']" rows="4" style="width: 100%" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="slds-form-element">
                                        <div class="slds-form-element__control">
                                            <span class="slds-checkbox">
                                                <input type="checkbox" ng-model="pageVariables['sendReminderMail']" name="reminderMailCB" id="reminderMailCB" />
                                                <label class="slds-checkbox__label" for="reminderMailCB">
                                                    <span class="slds-form-element__label">{!$Label.Send_Notification_Email}</span>
                                                    <span class="slds-checkbox_faux"></span>
                                                </label>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelAddReminderModal()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_brand" ng-click="saveAddReminderModal()">{!$Label.Save}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- Create new reference note modal -->
                    <div ng-show="pageVariables['showNewNoteModal']">
                        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="cancelNewNote()">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </a>
                                    <h2 class="slds-text-heading_medium slds-hyphenate slds-text-color_weak">{!$Label.T_New_Reference_Note}</h2>
                                </header>
                                <div class="slds-modal__content slds-p-around_medium">
                                    <div ng-show="pageVariables['showNewNoteError']" class="slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_error" style="border-radius: 3px; margin-bottom: 0.5rem" role="alert">
                                        <h2>{{pageVariables['newNoteErrorMsg']}}</h2>
                                    </div>
                                    <div class="slds-grid slds-wrap">
                                        <div class="slds-size_1-of-1 slds-text-heading_small slds-p-bottom_small">
                                            {!$Label.Request_Information}
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-horizontal_x-small slds-p-bottom_small">
                                            <span ng-show="pageVariables['isUr']" class="slds-form-element__label">
                                                {!$ObjectType.Unspecified_Request__c.Label}
                                            </span>
                                            <span ng-show="!pageVariables['isUr']" class="slds-form-element__label">
                                                {!$ObjectType.Reference_Request_Account__c.Label}
                                            </span>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span ng-show="pageVariables['isUr']" class="slds-form-element__static">
                                                    <a href="/{{selectedRequestItem['unspecRequestId']}}" target="_blank">
                                                        {{selectedRequestItem['unspecRequestName']}}
                                                    </a>
                                                </span>
                                                <span ng-show="!pageVariables['isUr']" class="slds-form-element__static">
                                                    <a href="/{{selectedRequestItem['accRequestId']}}" target="_blank">
                                                        {{selectedRequestItem['accRequestName']}}
                                                    </a>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-2 slds-form-element slds-p-horizontal_x-small slds-p-bottom_small">
                                            <span class="slds-form-element__label">
                                                {!$ObjectType.Reference_Request__c.Label}
                                            </span>
                                            <div class="slds-form-element__control slds-border_bottom">
                                                <span ng-show="!pageVariables['isUr']" class="slds-form-element__static">
                                                    <a href="/{{refRequestWrapper['refRequestId']}}" target="_blank">
                                                        {{refRequestWrapper['refRequestName']}}
                                                    </a>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-1 slds-text-heading_small slds-p-vertical_small">
                                            {!$Label.Details}
                                        </div>
                                        <div class="slds-size_1-of-1 slds-form-element slds-p-bottom_small">
                                            <span class="slds-form-element__label">
                                                {!$ObjectType.Reference_Note__c.fields.Note_Date__c.Label}<span style="color: #c23934">*</span>
                                            </span>
                                            <div class="slds-form-element__control">
                                                <input class="slds-input" ng-model="newRefNote['noteDate']" placeholder="{{dateFormat.toLowerCase()}}"
                                                    date-format="{{dateFormat}}" datetime-picker="datetime-picker" style="width: 20%" />
                                            </div>
                                        </div>
                                        <div class="slds-size_1-of-1 slds-form-element">
                                            <span class="slds-form-element__label">
                                                {!$Label.Approval_Decline_Notes}<span style="color: #c23934">*</span>
                                            </span>
                                            <div class="slds-form-element__control" style="width: 100%">
                                                <textarea rows="6" class="ckeditor" id="newRefNoteTxt"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <footer class="slds-modal__footer">
                                    <a class="slds-button slds-button_neutral" ng-click="cancelNewNote()">{!$Label.Cancel}</a>
                                    <a class="slds-button slds-button_brand" ng-click="saveNewNote()">{!$Label.Save}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- match modal -->
                    <div ng-if="pageVariables['showMatchModal']">
                        <section role="dialog" tabindex="-1" class="customModal slds-modal slds-modal_large slds-fade-in-open">
                            <div class="slds-modal__container">
                                <header class="slds-modal__header slds-modal__header_empty">
                                    <a class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="closeRefMatch(false)">
                                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                                            <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                        </svg>
                                    </a>
                                </header>
                                <div class="slds-modal__content" style="height: 100%">
                                    <iframe id="refSearchIframe" width="100%" class="matchPageIframe" ng-src="{{pageVariables['matchPageUrl']}}"></iframe>
                                </div>
                                <footer class="slds-modal__footer" ng-show="!isModalOpenedInsideIframe">
                                    <a class="slds-button slds-button_neutral" ng-show="!isHubMatch" ng-click="closeRefMatch(false)">{!$Label.Done}</a>
                                    <!-- REF-1964 -->
                                    <a class="slds-button slds-button_neutral" ng-show="isHubMatch" ng-click="getSelectedAdvocates();">{!$Label.Done}</a>
                                </footer>
                            </div>
                        </section>
                        <div class="slds-backdrop slds-backdrop_open"></div>
                    </div>

                    <!-- Error toast -->
                    <div class="custom-toast-container" ng-show="pageVariables['isError']">
                        <div class="slds-notify slds-notify_toast slds-theme_error custom-toast-width" role="alert">
                            <span class="slds-icon_container slds-icon-utility-success slds-m-right_small slds-no-flex slds-align-top">
                                <svg class="slds-icon slds-icon_small" aria-hidden="true">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#error')}"></use>
                                </svg>
                            </span>
                            <a class="slds-button slds-button_icon slds-notify__close slds-button_icon-inverse" ng-click="hideError()">
                                <svg aria-hidden="true" class="slds-button__icon slds-button__icon_large">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                </svg>
                            </a>
                            <div class="slds-notify__content">
                                <h2 class="slds-text-heading_small" style="font-size: 16px;">
                                    <p ng-repeat="msg in pageVariables['errorMessage'].split('\n')">
                                        {{msg}}
                                    </p>
                                </h2>
                            </div>
                        </div>
                    </div>

                    <!-- Success toast -->
                    <div class="custom-toast-container" ng-show="pageVariables['isSuccess']">
                        <div class="slds-notify slds-notify_toast slds-theme_success custom-toast-width" role="alert">
                            <span class="slds-icon_container slds-icon-utility-success slds-m-right_small slds-no-flex slds-align-top">
                                <svg class="slds-icon slds-icon_small" aria-hidden="true">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#success')}"></use>
                                </svg>
                            </span>
                            <a class="slds-button slds-button_icon slds-notify__close slds-button_icon-inverse" ng-click="hideError()">
                                <svg aria-hidden="true" class="slds-button__icon slds-button__icon_large">
                                    <use xlink:href="{!URLFOR($Resource.LightningCSS_2_3, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                                </svg>
                            </a>
                            <div class="slds-notify__content">
                                <h2 class="slds-text-heading_small" style="font-size: 16px;">
                                    {{pageVariables['successMessage']}}
                                </h2>
                            </div>
                        </div>
                    </div>
                
                </div>
            </div>
        </div>
    </body>
</html>
</apex:page>