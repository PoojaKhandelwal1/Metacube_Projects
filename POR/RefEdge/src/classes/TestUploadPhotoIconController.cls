/**
 * ReferenceEdge
 * 
 * Point of Reference, Inc. - Copyright 2014 All rights reserved.
 *
 * @company : Point of Reference, Inc.
 * @website : www.point-of-reference.com
 *
 * Disclaimer: THIS SOFTWARE IS PROVIDED "AS-IS" BY POINT OF REFERENCE ("POR"), 
 * WITH NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE SOFTWARE, 
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. 
 * POR SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, 
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES. POR IS NOT LIABLE FOR, 
 * AND MAKES NO REPRESENTATIONS OR WARRANTIES REGARDING, THE ACTIONS OR OMISSIONS OF 
 * ANY THIRD PARTIES (OR THE PRODUCTS OR SERVICES OFFERED BY ANY THIRD PARTIES) INCLUDING, 
 * WITHOUT LIMIATION, SALESFORCE.COM. COPY, USE OR DISTRIBUTION PROHIBITED WITHOUT EXPRESS 
 * WRITTEN CONSENT FROM COMPANY.
 */  
@isTest(seeAllData = false)
public with sharing class TestUploadPhotoIconController {
    private Static FINAL String fixedFileName = 'communityPic.jpg';
    static testMethod void updateReferenceabilityType() {
        Referenceability_Type__c rf =  new Referenceability_Type__c(name = 'Test Refrence', Visible__c = true);
        insert rf;
        test.starttest();
     	String iconname = ' assets/icons/asset/doc';
        String jsonObj = jsongenerator(iconname,iconname,iconname,'new Ref1');
        String referenceabilityTypewrapper= jsonObj;
        UploadPhotoIconController.ReferenceabilityTypeWrapper referenceabilityTypeWrapperobj=(UploadPhotoIconController.ReferenceabilityTypeWrapper )JSON.deserialize(referenceabilityTypewrapper,UploadPhotoIconController.ReferenceabilityTypeWrapper.class);
        UploadPhotoIconController.updateReferenceabilityType(referenceabilityTypewrapper);
        String newicon =   geticonFromid(referenceabilityTypeWrapperobj.id);
        System.debug(newicon + 'newicon');
        system.assertnotequals('assets/icons/asset/doc' , newicon);
        iconname = null;    
        jsonObj = jsongenerator(iconname,iconname,iconname,'new Ref2');
        newicon =   geticonFromid(referenceabilityTypeWrapperobj.id);
        system.assertnotequals('', newicon);
        iconname = null;
        jsonObj = jsongenerator(iconname,iconname,iconname,'new Ref3');
        referenceabilityTypeWrapperobj=(UploadPhotoIconController.ReferenceabilityTypeWrapper)Json.deserialize(jsonObj,UploadPhotoIconController.ReferenceabilityTypeWrapper.class);
        String oldid  =  getAttachmentStringFromid(referenceabilityTypeWrapperobj.id);
        String newid =  generateAttachmentData(referenceabilityTypeWrapperobj.id);
        UploadPhotoIconController.updateReferenceabilityType(jsonObj);
        system.assertnotequals(oldid , newid);
        ApexPages.StandardController sc = new ApexPages.StandardController(rf);
        UploadPhotoIconController reftype = new UploadPhotoIconController(sc);
        
        test.stoptest();
    }
    static String jsongenerator(String iconname,String iconvalue,String iconclass,String fileinstring){
        UploadPhotoIconController.IconWrapper iconWrapperobj = new UploadPhotoIconController.IconWrapper(iconname,iconvalue,iconclass);
        String id = generateReferenceabilityType(fileinstring);
        UploadPhotoIconController.ReferenceabilityTypeWrapper referenceabilityTypeWrapperobj = new UploadPhotoIconController.ReferenceabilityTypeWrapper(id,iconWrapperobj, '');
        return Json.serialize(referenceabilityTypeWrapperobj);
    }
    static String  generateReferenceabilityType(String nameval){
        Referenceability_Type__c ref= new Referenceability_Type__c(name = nameval, Visible__c = true);
        insert ref;
        return ref.id;
    }
    static String  geticonFromid(String id){
        Referenceability_Type__c ref =  [Select id,icon__c from Referenceability_Type__c where Visible__c = true AND id =:id];
        return ref.icon__c;
    }
    static String  getAttachmentStringFromid(String id){
        List<attachment> ref =  [Select id,body from Attachment  where parentid= :id AND name = :fixedFileName LIMIT 1];
        if(ref.size() > 0){
            return ref.get(0).id;
        }
        else{
            return '';
        }
    }
    /*
    static String generateIconData(String iconvalue,String nameval){
        Referenceability_Type__c ref= new Referenceability_Type__c(icon__c = iconvalue,name = nameval);
        insert ref;
        return ref.id;
    }
    */
    static String generateAttachmentData(String refid){
        String s = '';
        Attachment a = new Attachment(parentId = refid, name = fixedFileName, body = EncodingUtil.base64Decode(s));
        insert a;
        return a.id;
    }
}